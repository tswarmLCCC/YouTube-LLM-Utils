welcome to the unit on reading and writing files in Python um this is kind of a a bit of a you know a oneoff um it really doesn't build on other things and we use it in with with everything uh but file IO is just a very useful thing uh to be able to do with a lot of for a lot of different reasons we'll go over some of those in in some of our examples here um but it's it's just used in everything I mean keeping your data separate from your file really allows us to um you know uh make make our programs more modular um in a way that we can um uh you know swap data in and out uh in a similar format and have it have the same program process it um as opposed to you know updating the file all the time if we wanted to do different things or having users have to input it all the time um it you know this also extends into things like database work uh where we read and write um information to the database although we won't cover that um in this unit um it's very similar you can think of those as very similar operations um you know game programming uh certainly is a huge has huge applications of file IO you know game assets or even Maps uh you know and even sometimes the logic of the program themselves are stored in different files and read in um so this is a very uh introductory unit where we're going to use uh Python's native uh functionality for file input and output um but down the road and probably even in this class uh you might want to get into some other libraries that do uh the same thing but a little in a little more advanced way in data science for example you use a a package uh that we um haven't studied just yet a package called uh pandas which can read a lot of different kinds of data formats and do all kinds of great operations on those and I'm hoping to write a unit on that very soon um we'll see one example of how you might do that without using a package uh just just for academic purposes here in a bit um so this week there will be some guided learning uh as as you can see here um and the other lecture this lecture will be here I might do some um secondary lectures or find a few YouTube videos I haven't quite thought you know thought about um what else we might add to this as we go I just wanted to get a baseline today the um the zybooks reading uh assignment is pretty pretty brief in this one um let me go let me go to the actual Library here I'm going to use 1010 but uh they're both they both use the same one so it's not too bad here uh it's called guided learning files and there's none I I've kind of stripped out some of the um uh the challenge uh programming assignments so this one should be a little lighter than that hopefully this doesn't take you too much uh really pay attention to the width and CSV uh bits at the end um uh and then I do one other thing with uh Json which we'll cover in just a bit as well um the homework has a zip file that you'll download and we'll go over that when I go into the code examples here in just a bit as well um and it's a pretty simple program compared to what we'll be studying uh with the example code so make sure you you know go through both the prim exercise and the examples uh by the time you do that the the actual turned in assignment shouldn't be shouldn't be too bad at all um they are optional as they always are but um you know they're they're there for your benefit for sure um so other than that I've got a bit of a lecture here let me bring that up um just a very short series of points I want to make about the thing um oh that did not that didn't work very well let's see if I well that one got garbled up the point is you read and write files here hopefully the oh here it is I see let me just get rid of that slide I don't know what happened there sorry about that uh let's just uh start that there we go a little bit better slide for us here let me move my picture here always tends to get in the way maybe we can find a little home for me over here to this this week make me a little smaller um so the idea though is that you can you know read and write your your uh from code from code as opposed to you know putting things in um in the code themselves as we've done uh you know definitely with our lists and and dictionaries youit we we did a lot of that right where we hardcoded things in this is a great way to populate lists in dictionaries where we actually read them from files um reading from a file you'll connect to the file and open it with a command um that we'll see in just a bit uh you do need to make sure you have the name and path right um these are relative to where your script is running um or in in um if you have an environment set like you do in vs code it's relative to the root of that so if you've got like a files directory uh uh with in your project folder you'd want to go files uh usually forward slash and then the file name we'll see a couple of that uh then you'll set the permission for opening so you can you can do one of three things usually you can just make it read only where you can only read from it a file where you can't actually modify it or mess you know or alter it which is nice if you don't want to change the contents you can write uh which will make a new file and even if the files there it will write from scratch or you can append where you just add on to the file um and then you can read uh using a loop usually you'll read the contents into a variable although it doesn't have to be a loop you can do it um procedurally if you'd like and then um you can do do something sometimes you'll want to Output the variable sometimes you'll want to do other things with it um and then you make sure you close the files if you don't close the files they'll they'll remain to what's called locked basically your operating system grabs a hold of it and says this is in use don't do anything especially if you're uh writing or appending to it um those operations are R A and W uh as you might might anticipate and we'll see the syntax in just a bit but RS for reading um and it's looked at but not changed a pend will you can add to it um and it just TS on um and both R and W it will create files if they don't exist um the only difference is W will overwrite the file if it exists so as long as it's not locked um so here's the syntax uh in this case we're creating a variable called my file and we're using uh the open uh function to actually so this this test. text would be right in the same folder that you're working in if not if it was in a subfolder you'd want to put the the folder name in there and then R of course means read only like we just talked about and then we have a simple for Loop here which is a lot like a while loop except it's um this might look a little different for us basically though it's saying for every every line in my file return a line so we could do anything we want with that line um in this case we're just printing it but for each time we go through read a line um which is terminated by the new line you know character uh in in the file system it will uh it will create a variable in this Loop called line um until it gets done and it just simply when it can't do this it just sends its exit code to the to the for Loop instead of having to write these things manually we can do it like this and then finally we close it uh few other things uh so let's see the four yep um kind of just talked about that um the length of the loop will be the number of lines um again that's denoted by the new line character in this case um and then the print that's just doing whatever you want to do with it um you could read things read them into variables as well from the line which we'll see an example of in a bit and then finally we we make sure we close it um and then we do a very similar syntax where we it's still open right so this looks very similar to this it's still open except with r we have W which means right um in this case uh it will open it and or create it it will overwrite though in this case and then this is actually just taking a string that we pass into it called Andy and writing it to it um but we could put a variable in here as well and we could also Loop and write lines and things like that um uh this is just the the very simplest syntax so this isn't even using a loop but you certainly can you can put anything you want in a file um there's just a ton of ways to do it um and then finally we close it at the end just like we did before um so that's all I had for those um just remember that there is the append thing so I'm going to get into a few examples here um and then we'll we'll jump in at the end to our um to our actual assignment let's see yeah that looks good where where my face is at let's go and close this this um so the first example is a very simple one I've got this Star Wars crawl here where I'm I'm making a variable called input file and I'm reading this star wars. text file and you'll notice that that's right here with the actual file let me go and close all the other ones I'm just going to close everything actually just so keep that a little less cluttered um so we've got the the crawl here which is file read and it's just star wars. text and what we're doing here is just opening it and put opening uh the file and creating a a file object in this case called f and then for each line in F in our file object um will print the line that it reads so we can open the file and just like you know from episode four we have the first line it says episode four a new hope you know it's going to read these one at a time the whole line um and uh and and then um as we saw in the uh in the actual crawl it's just going to print them out so we can run that and very simply it does just what we might expect where it reads it and this prints lines now it does create a new line after it as well because there's a new line in the file and then a new line in the print statements and there's ways to overwrite that with um changing the print statement but I'm not getting going to get into too much of that um I'm going to get into two complex more complex examples here just to kind of show you how to do some things with data other than just uh printing um and then we'll get into much simpler examples in your Prim assignment that I'll go over next um the second one is um this customer count file so you can you and this is in your zbooks this syntax you can actually um do this uh so you could do file equal open um uh so you could write that like this if you wanted to or well not like that let's let's do it like we would do it you could do this just like we did before this is absolutely legal you could do this um I'm not going to though so the width statement that's might be a new one for some of us um what that does is it only keeps this CSV value uh uh object around while we're doing this operation so that's basically all that's going on there it's nothing too crazy um and then next just reads the the very next um the very next uh uh row so um in this case in our CSV file we've got a file that looks like this whole bunch of data right but the this is called a comma separated value it's very common in computer science um and data science where we we ship data um around by putting like so this is a field called index and then the customer ID um and these are separated by commas so we separate our Fields out like you might in a spreadsheet as a matter of fact fact you can even save spreadsheets to csvs if you want to um first name last name Etc so here we have a Heather and so because that's the one two3 comma com comma separated value we can see that the um the customer name here is Heather and then Christina so on and so forth so you can just follow this along and this will actually give us the uh the the field names of of all of these rows that come after it and this is a huge file that I downloaded um and we're going to write a very simple program here that basically does a little bit with some string operations so um it's basically just reading this and reading a data reading data in each row so the the um the uh the row is uh let's see it it uh as as it iterates over that um o over the the file we get this row returned um and that's a keyword in this case um because what we're doing here is a for Loop this is called a uh so we could write this as well um in a different way um and actually I will in this case just to illustrate the difference between these two we could write four row in CSV file right this is just the same thing we did before and then we write data so um uh this is called a list comprehension is what it's called uh let me get rid of this we don't need it um so what happens here is um we are reading the data um row by Row for each one um and that's all that's going on here it's the same thing this is just a shorthand it's called a list comprehension where it will Road uh load those all into this data thing um and then it's uh basically stripping and splitting these things out for us and then um and then it's simply counting uh so it's grabbing all of those and just appending it uh to our data um and uh it's simply going to count each time um um how many times the word John occurs in that data same same thing here so um let's go ahead and fire that off and give an example of uh I messed that up so hold on I messed up the list C here so let's go back sorry my indents probably got off let's try that one more time yep so we can see that here let me just clear that out so the idea is that we're basically reading the data and then for each each uh we're making um a a a new um I should have written this a little simpler I'm sorry I probably should have rewrote this uh but the idea is you could write this with for Loops just like we do and we're basically adding one to a count of John for each row in the data if the second item which in this case is or third item in this case right is is the first name is John that that's all we're doing there so you can address each one of these and do some math here and we can see as we run this that it certainly does exactly what we want to do in this huge file it counts the number of Johns so uh that's just a very simple example of how you can use data in there um and all this all this list comprehension and things like that we're not going to have to do that this week I just want to introduce it we might do some more things uh with better libraries frankly to do it uh one's called pandas where it does this kind of stuff a little more elegantly so that's that's an example of data processing from a tech a large large text VI look how big this thing is it's just just massive but you can do quite a bit and if these had like numbers or salaries in them you could do averages and means all that kind of stuff um the other kind of data format I wanted to uh explore is is called Json Js Js n um it's it's a it's a file format that can take data um from uh a program or even lists in this case see this is embedded um so here we have a record called Alice and her age is 25 as you might example with this syntax and uh sorry I'm getting some emails here um and then a list of hobbies here this is actually um a a list though this is a three-dimensional or three a list of length three within that within the uh within the Json file so you can kind of um you know you might have first name last name ID or whatever and then a list of hobbies which is essentially array right it could be a list or a dictionary in Python um and you can embed that and you could even embed those again you can keep going down and down that down that Pike so what we're doing with this is we're essentially um creating a uh um you know uh um this data structure and we can see down here so this just creates it if it doesn't exist uh nothing simple there but you could certainly uh you know create this with Json as well using its libraries to Loop through different parts of of it um and then it's it's just creating the file so this is just setup but if we wanted to read it you see here we we're reading it in um and we we're going to read this thing called data and I'm going to actually set a stop Point here and let's just debug this for a second Let's uh yep we'll do that and that should go down to our width statement here and pause for us um and we can see here as I step through this um I want this one we're going to have data load so we have the the file object here right just like what we' saw I've seen before and it's just an it's called an iot rabber but um you know that's just doing the workforce of reading the thing then here we have data and we can see that uh we have not only the name of you know what we saw but we also have this um this uh this uh this um essentially uh dictionary that we can return as well um and then it's going to be done because it's only one it's going to step out here and it's going to print the thing so you can see here we have what looks just like a just like a list um in this case of a three-dimensional array which is kind of cool and if we print the whole thing if we print the whole thing what we'll see is the just the Hobbies so we can grab just the thing called Hobbies here and isolate that if we wanted to do processing on that and we could even get um we can even get individual ones so um this is just subscripting that list right of of hobbies and it's G to kick out music uh in this case because we're zero and one and two so you can see what we have here is a string that's that's uh being kind of torn apart to recreate a data structure that might be more useful if we have multi-dimensional data um so we'll just go through that and there's music and then then we're done that's all there is to it um I don't know why it's read reading the data again I can't remember why I did that um so that just a couple examples for you that I'm actually going to get rid of that I'm not sure why the heck I left that in I think copy and pasted from somewhere else so um and then so let's get into the uh the actual assignment for the week um the predict is very very simple um I I grabbed a few examples from online in this case because they're they're well done um so you can uh I you know just kind of go through and uh write comments if you want or in your head just predict what each one of these do uh play pay particular attention of course to the w& that we just talked about and how those might work uh certainly if you want to play with the file and maybe add some more lines to a pend and see what happens uh or or maybe you know change you know change this up and see you know if these files get um get get changed on us uh you know if they if they get deleted you can see how they operate right here um these don't have to be here by the way so if you want to you can certainly delete them them they'll just get recreated when you when you finally do get around to running them uh just like so should have an appending here somewhere see where it go oh I had the wrong one open sorry in investigate or predicts what I want so you'll see here that it it does create the the appending and the writing again for us as you might expect just like we promised it would so those don't have to be there because it will basic basically do do some of that for you so you can certainly play with this code and I ENC encourage you to to see what happens um the name here is just the name uh just a variable we're putting in there there's nothing too crazy there um investigate takes a little step further so we'll actually uh do a little bit of uh reading here we've seen input plenty of times it's just reading from the uh keyboard in this case and we're going to open a file and we're going to appin to it students here and then while true um I think we've covered this in the while unit but I want to go back over it again basically this will continue forever um because the expression is always just true right but a way to break and this is a common thing to do is to do something um and this is a great reason why we'd use a while unit instead of a or a while loop instead of a for Loop here is uh we want to basically control when we leave it and that's what break does so break here will leave the the the control unit it's in in this case it's it's the while loop so um it's essentially reading um a uh um this this this thing over well you you first you'll you you'll put in a student name an initial one but you can enter another student or you can literally type the word no or quit um and then it's it reads that into um a choice and uh and then it evaluates that um of course it makes it lowercase that's what lowered do so you you know we wouldn't have to write both um you know we don't have to you know test for that or that as well uh it it's only it basically takes whatever the user enters and makes it lowercase that's what's going on here it's very common uh because the computer doesn't care how it looks right we only care if it says no or or quit um and then it will it breaks out of the unit so basically what this will do is keep continuing to have you read uh the student name and write that line to the file um until you you say I'm done and then of course you know the idea then is you can look in students. text when it's done and see what's in there as well um and this is defined in a function uh that gets run just at the end so we Define a function right um to keep our code so you can actually collapse this so the whole program is actually really just two things right uh where we've got a definition of a function and then we're just calling the function of course the function is doing all the work here but that's very common um in the future we might do something like put this in another file or a package right so the program gets much simpler and then I just give you a whole bunch of different um or I shouldn't uh this example gives you a bunch of of questions that you should kind of look at uh and maybe answer in your head and and make sure that you kind of understand what's going on then finally we have a modify that's just a little bit more example again um and uh it basically uses um uh just a few other things that uh U that you'll want to add to it so you should be able to You Know cover that from investigate or your reading for sure um and modify it so it does it grabs a grade uh and passes it into a parameter so what you'll be doing is um adding a parameter to save student um which you know shouldn't be too foreign for you uh after we covered our files unit just a couple weeks ago um and and uh so you you'll take an input here and then actually process it here uh appropriately to actually add that to the file as well um and then finally you have your make assignment this is the thing you'll turn in of course as we always do um where you're going to make functions to add a singer and a band to two different files uh a file for each singer and band text and um and then after it's done uh uh let's see reads the I can't remember what I wrot why why read and output the content for the S list yeah so it's just reading these back sorry I was thinking it read one into the other the way the way I I wrote that kind of tripped me up for a second and then you know using the same looping mechanism right so that's why we gave you these uh the same same kind of guys you'll uh ask if you want it to input a new singer or a new band so basically you're just going to have a list of singers and a list of bands at the end of this thing that's what you're after um and then you'll want to validate the input basically just make sure it doesn't have any crazy uh crazy uh characters and things like that there um and of course you'll want to and then um we'll do the same thing where you'll break out uh if you do you know with C or G uh C or Q um and um and and and same thing there so that that's about it uh that's kind of the whole unit uh I hope this is a pretty simple one after you know some of the heavier ones we covered with uh the looping um and uh and certainly the functions I hope this is just a little tacked onto those uh I'm hoping that this is a bit of a light week for you but certainly if it's not if if if some of this seems foreign to you uh get a hold of me and we can certainly go over this or other ones and um I'm really interested to see if you want to play with things like Json and things like that uh we can extend it right I didn't want to go too deep into that because the main idea is to learn that this can happen and how to do basic IO as opposed to just killing you with all the different file formats um I'm hoping to you know expand on this you know later in the semester if we have the time for that so so that's about it for files so yeah just make sure that you get in there do the zybooks reading early just like we uh just talked about it should be pretty light I'm hoping that these are a little lighter um I've certainly heard your feedback that some of the the ones I wrote before the semester started with the challenge units uh were a little much uh so hopefully you know I've taken those out I hope the understanding is still there um but if you find yourself lacking uh to you know be able to write these things without the zybook kind of guided you on how to do it um I can bring some of those back you can do them yourself by the way too you can certainly go into the um the uh let's see in this case would be the um the uh files unit and uh let's see see if I can find one here um I know there's a few that have them this one's just so stinking short to begin with um I think it was in let's see here maybe here there was one you're free to do them when they exist right so you can go back there yeah here's one um that I don't think this one is assigned I don't think you actually have to do this one uh I don't think that's in the assignment let me double check that uh let's see I remember how to check these things yeah I don't I don't yeah so these challenge they're not assigned you don't have to do them in this in this one so so yeah that's kind of it uh that's all I have on files for your Bas work now that doesn't mean you can't come to me and we can't explore I love doing that in open Labs so um you know if you if you've read read and done your work or at least some of the work you know coming through Monday Tuesday Saturday Sunday Monday and you want to come in on Tuesday Wednesday Thursday to office hours we can certainly play with these things as well so um all right good luck and let me know if you have any questions bye