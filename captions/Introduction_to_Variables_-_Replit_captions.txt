hello um in this video we're going to introduce the uh concept of variables or um how to assign um objects and values to memory and reuse them um it's a central uh really core component in computer programming and just one of the things that really makes everything else we're going to do in this course work um very important concept um so uh getting into an interpreter here I'm just going to I'm going to just this this is just our console you might might have seen something like uh this where it's over here right all I did was close these files down just to make it a little easier to to read right now um so we can get into a shell and if you're in a shell I'm going to just clear this out real quick you can actually just type the word Python and it's going to go into what's called a python interpreter so um we can do things like uh use python as a calculator where we we do like two plus plus two and it's just going to kick out four or we can even use some of its built-in functions where we print say um hello world we might have done that in one of the previous videos right things like that um you know and you've seen this in files too I'm going to go and grab these and make a file real quick in here um and we're just going to call this test.py and we can do the same thing here right where we go 2+ 2 and of course this won't do much by itself um even running this if I go into a shell here and oops not that button uh let's just go let's grab this shell here and we'll just exit out of this like so um but even if we do python test.py here it's not going to do much right it's just going to execute now we could do something like this you may have seen this in one of our very early videos where we can print this and that will actually give it to us in the output um so python can do stuff like that there we get four right makes sense we could do same thing with hello world but um not very useful on its own right I mean you'd have to code things into files when you could just use a calculator you could put a bunch of these together but where we really get um into our first level of of the reason we program is using things called variables and variables you can think of almost as a mailbox where we can um basically give a a place in memory a name and then refer back to it um I'm going to illustrate that just with an example that we'll use so instead of uh doing something like print 2 plus oh he I went a little nuts there we can assign say uh a a name called X and then we give it the equal sign and we could give it two for example and we can do the same thing uh that we did before but instead of doing print uh 2 plus two we can do X plus 2 and as you might imagine it's pretty easy to read this is going to take the value of the integer the the number two and store it in a place called X and then when we go to print it it's actually going to take that and add to the number two back to it well let's go and change that to like five just to avoid confusing so if we add you know this the whatever is in X to two or or to five uh we're going to as we might expect we're going to see four because it's doing this the literal one and then when we get down here we're going to get seven um because it's basically doing this and using this this idea of this named place called X in in place of two and then I think about that is then we can change it right we could change it either manually like this or um so I'll do this and we see that it's eight now inad to seven right I'm going to go and comment this one out um so we it simplifies our our our our our work over here or we could even do something like X so let's let's go and do that let's leave it as three and then I'm going to grab this whole thing again we can even update it by doing referring to itself and there's some rules around this but it's nothing too complex so let's say we take X which was three um and then we add uh two back to it so now we're going to have x = x + 2 so it's going to basically take this and then reassign it back to X um and and we'll get 10 we'll get 10 back out um and just to to demonstrate that there we there we see that work so you can basically take values or numbers or anything you can really do anything and we'll see that uh many many more times coming up you can take anything and give it a name and give has a place in in uh in in memory that it can refer to let's go and illustrate that with a little example here uh see if I can do a good job with my little paint program here um I'm going to kind of do this and this and let's kind of see what we're we've got going on here so we're going to call this little place oops let me grab the pen here is that going to do what I want yep X so this is the the variable called X right so what we're doing here is we say give the value three to X sorry about my writing there I think I could use a font here maybe to be better and then what it does is it basically says go out and grab this thing from memory and add five to it right we kind of already Illustrated that um but let's say we wanted to make a new one instead of reassigning it which we kind of already talked about what this will do is make a new one called y and and it's basically going to say take X add two to it and it's going to put that in here but these are things that are just hanging out there now in memory um which you might remember are um are stored in bits and then bites uh from our our week one discussion or chapter one of of either book um where uh these are in memory there and it's basically encoded in binary right with the the number number of uh of bits that are one or zero and it just pads that out I'm not going to go back into that but that's essentially what's going on here well that's just what's happening on our computer chips here um I think actually yeah I do have one um this is memory so in in in this in this uh old old thing there's there's places for M millions and billions of ones and zeros to be stored on what are called transistors which basically just hold hold that state of of on or off and then from there it can go to the CPU the the central processing unit to understand that that's a three or a five in this in this case um not to get too much into Hardware here but that's how all this is represented and as a matter of fact we could even do things like um what we started to do here I'm going to make this bigger just because our video is a little small here um it basically takes one address and says grab whatever's in there add to to it and store it in another place that's kind of what's going on there um so all of these all of where did my stupid thing go there it is um all of these would have addresses right and we can store these anywhere we want um or give them names um and sometimes even things called pointers but we won't get into that today that's kind of a more advanced topic but you can actually um refer to these by their physical location as opposed to a name but for our purposes is we're just going to use these names X and Y and first name and last name so um you know if we wanted to store like my name in there uh we could do something like um you know we could do something like right like that and as soon as I run this um it's going to be in memory and if we wanted to do something with it we could do something like print Trevor or print first name and we'll see that I don't know why that's not my so there we go so that's basically just putting it in into a new a new placeholder called first name and storing a bunch of characters there now this one's a little different because it's not individual numbers um which are easy easier to store so what happens here is you know say say the computer said I've got memory available starting here right well what am I do is it might grab like this much and put a a t here and a r here and an e here so on and so forth right pretty simple to figure out what I'm doing or it might not even do that it might say oh I've got you know some some other stuff here and the r would have to be down here it knows how to do that and it would still put that together but the point being is it knows that this is the name and it knows how to get to all of this these values and it's just in memory um and it's assigned to this address box or a mailbox if you might say so it knows that there there's a place there but you can put whatever you want in it um and we can create basically unlimited amounts of these things not really but for our purposes pretty much um for this class you can you as much as you can come up and it turns out you can even give mul multiple first names if we get into lists and arrays and things like that um so that's kind of how they work in in in that show but you'll see them all over the dating place I'm just going to grab some um random random Solutions here like uh here it takes a number in uh and uh from from a function and does some comparisons um one thing to to be very aware of I'm gonna grab this this particular syntax and put it back in our our other program here um is if I do this I'm gonna actually just clear all this out now um one thing to be aware of is this assignment or I'm sorry the the auto complete messes up my video Sy sometimes this is how we assign a number to three so this is basically going to um say this worked so if I run this it's going to I think say true if I'm correct I'm sorry oh it actually didn't even work yep so if I did something like this it's going to do exactly what we did before right if we did this where it's assignment what I'm trying to say I guess is that the assignment is a single equal sign and whatever is put on the right is going to go into the variable name on the left and that variable name can be the only thing on the left so for example you couldn't do something like this right that wouldn't work either but if we go back to our example we'll build on that here um so save this and uh no I don't want you to do all kinds of crazy things I don't know what just happened there there we go let see um not quite sure what's going on there that's weird repet trying to outsmart me but that's okay uh yeah there we go it did what we we we wanted it to do um where it assigns the value three to a number right but the the thing is though uh this is not this so if you wanted to um this is not an algebra statement for example this is uh not an expression the difference between an assignment and an expression is a very key thing and that's what I'm trying to illustrate here um we can actually compare to see if let's say we got number two like or let's call it number B just to uh to for illustr let's say that's three as well um we can actually test those for equality by doing something like this where we go like that and um what that's going to do is you'll see this word true here as opposed to the actual number what this is doing is it's testing this expression and this means oops this is basically saying are these things equal are these things equal as opposed to assign this so just remember that if you're trying to do this kind of operation it's two equal signs there's other operations like this where We compare things where we could do like less than or equal to or even just less than where if we run that you'll see that that's going to say false because obviously three is equal to three um but that's the difference between those the other thing we cannot do is do something like this we can't say add the number plus one the assignment the only thing that can be on the left of an assignment operator is the variable name so you see if we do this we're going to get an error just to illustrate that there we go you can't assign there you go you can't assign it to an operator what we would would probably want to do there is if we're going to try to do this is actually use our algebra and do something like this you can do whatever you want on the right these again are just Expressions um so Expressions uh versus variables right uh this is an assignment this is storing the value of three into the number this is doing some computation or comparison um and then storing the result of that in a variable um and that's how to distinguish between those um just some other gotas uh let's see um identifiers python is is case sensitive so if you make a variable um and then I try and I try to do something like big number like number with a upper uppercase this is gon to this is going to blow up again because uh it's going to say that's undefined right um and that's because that was up upper case what you we need to do is is obviously that or or number B whichever whichever we want um you know that makes sense for the program that runs so just make sure that you're the the the case the the case is is uh um is consistent there um it's it's pretty common if you're going to use more than one word to use underscores here uh which is a legal thing um uh you can use numbers in variables as long as it's not like the first thing so this this won't work um let's go ahe and all right let's uh actually do it here and there so again illegal but if we do something like this that's okay that's okay um so it just can't be the the first character can't be oh I messed it up somewhere uh uh oh it's because I changed it there yep so that this should work it's just because I hadn't updated it everywhere so just be aware of that uh you can't use too many special symbols like explanation exclamation points um the other thing to be aware of is you can't use some of the keywords that are in Python like if else print there's a list of them just uh you know just Googling python keywords uh it'll tell you though that it's a reserved key word if you run into that [Music] um I think that's kind of everything for this one other thing though is to be aware that some variables could actually be changed and some can't so numbers uh what do I mean by changed U this is an assignment this is not changing B1 it's actually replacing what was in B1 every time this is run but you can actually change things like lists and things like that in in place without reassigning them that's just something to be aware of there most of the time it won't matter for what we're talking about but uh we'll get into that down the road so that's kind of it on variables again variables you can think of them as basically a a mailbox and you can put whatever you want in there um and you can go back and access it later just by its name so you know you don't have to go you know explicitly type two or things like that they get really handy because we can keep reassigning things programmatically to the same thing and refer back to it so for example if we wanted to count from 1 to 10 we might what make what's called a loop and then every time the program repeats itself it says add one to the variable number and then print number and every time it goes through there it's going to add one and then print the word the the variable that's in number even though the the the value that's in the variable keeps changing so um pretty pretty key point here um I don't want to beat it to death because it's it's actually quite simple and I think I'll over complicate it if I if I continue it but if you have questions please let me know or review the book both both both of our texts do a pretty good job of of explaining this concept so that's all I have on variables thanks