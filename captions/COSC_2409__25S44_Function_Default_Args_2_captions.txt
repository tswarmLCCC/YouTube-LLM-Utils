in our continuing lecture series on the ins and outs of python uh the the core components of python and some of the language features um we've been studying functions um in this particular unit um in in our last video uh the one uh directly tied to this notebook um it we've been studying essentially um default uh arguments essentially the idea that we can give uh values to variables in such a way that they can be used um uh uh they can we we can provide a base case or a default case a default value to a function that will be used if um that that argument happens to be omitted um so just a review in this case we can uh call calculate area here with just the length and it will plug in 10 that's why we get 50 or we can provide both arguments in in case we override the default value U of width uh with the value 20 um because that's in the second position here um and we we can uh we we basically have two functions for the price of one right uh which is super super handy for reusability as long as you understand what you're reading and writing when you write it um there's a lot that can be done just with that but it turns out that python can go a little bit further um in the previous video you might recall that We examined how you can flip these things and use the names themselves with equals like 10 for example to to to plug in and and uh put these in any order you want um as long as you have these these names in here otherwise it'll try to uh provide the uh the um it will try to do them in order the position using the positional arguments um so that's just kind of a review where we were we're going to talk about some nuances of that in just a sec but one other thing I want to consider have you consider is that the um the uh the instruct uh the uh the arguments um when they're when default values are provided in this case a mty list are basically um only evaluated once that's when they're first loaded right so what happens with this code is we have a list here that's empty we might say okay every time I do this I'm going to get a return a list that that's empty um and I'm going to um uh started off with one two or three and then of course I I can append to it or whatever um but that's not what happens as we see here in the first one we get one and then in the second call you think okay it's taking this default uh list an empty list uh well where's the one coming from here well it turns out that this was created the first time uh and and it uh the first time it was created and anytime it sees just a value it's going to continue to use this list and that's why you continue to see one two and three um the way you can get around that um is to basically give it a nun value here and check to see if it's not there um and then then initialize your list so this is a code pattern that you can get around that way with so if you're seeing Behavior like that just remember that this exists and that you can um you know certainly write this where I I'm creating this from scratch so you can evaluate this for none which is just a null um and then this will behave uh like we would expect where we're just getting the one value in there so um it's kind of a corner case but it's important to consider that um so that that uh essentially these default arguments get only created one time not every time you call the function just remember that as you go forward uh I think I'll write a quiz item on that one so pay attention to this right now um and uh re refer back to the video it'll be a good one for you you folks that don't watch the required videos uh maybe maybe I I can snap that up so anyway there's some explanation in the book for both how how both of these work um uh then the last thing I wanted to talk about is essentially uh the same thing happens with variables here excuse me so if we've got a variable here in this case I uh we're passing that in and then we print it um and then we change it it's going to basically be uh set to it's it's the first value um uh after the definition even though we're we're running this before we call it it's being evaluated here in this order so just a bit of order of operations of how python works so if you end up you know changing this you might expect I to go uh be you know to take that variable in even because this works right we can we could pass a variable in as a is a argument right uh but in this case um because it's being used as a default value in its definition here it will overwrite and we we will see five so uh just be careful of that of course we can you know override that and we could do this this works just fine and then it would be six but because it's being used as a default value here um it will it this is basically setting up its signature and that's what's going on here it's basically saying this will always have default value VI five because I've evaluated it once and I'm good so you can do this design pattern you just want to put I in here to override the default value even though they're all using the same names it can be better bit confusing let me know if you have any problems with that in particular um the last thing that I wanted to cover and this is a really cool feature but kind of hard to get your head around um consider this function where we've got a lot of stuff going on where we've got um a positional enir no def value right and then we've got a um a a parameter or three parameters with default values we've seen this before all of these will work uh let's uh did I run yeah down here all of these will work um as you can see we can run it with its the voltage but uh you'll notice uh that this first value always has to be there um and uh in in this case it's just printing so we can do things like uh you know all of these iterations um but uh the uh we can't mix them we can't do things like um start off with a um a named argument and then go to a positional argument right uh where the action is would be dead you have to once you start using these you can't mix them um which would be super handy right if you could because basically you could write functions to go through a lot of different things um and and and handle all kinds of cases um but you cannot mix uh basically once you start with names you you have to go in order from then on out uh with your your non-named arguments they they need to be positional and that's what this all this code is explaining so none of this works right we're getting positional arguments following keywords right it's basically saying hey you didn't tell me what this is even though um even though you've given me a name here so these can't go out of order u in this case um none of these will work um likewise I couldn't uh voltage you Might Recall is the first one I I here I'm giving uh a a value to voltage because it's the first argument then I'm trying to basically say hey here's the named one well it doesn't know what 110 is then right because that was supposed to be the first argument um so just things you cannot do is basically mixing uh mixing your uh your um non-keyword arguments after you use a keyword one your positional ones after a non-keyword um so a whole bunch of examples of things that don't work and and then ways you can get that to work as long as they're in order and they're named all that all these things will work um uh so on and so forth but there's a really cool thing called the keyword argument uh is essentially where you've got arguments and then keywords and they use this syntax um and if I run this code here you'll see that I've loaded it what happens here is basically u i take a a POS positional argument kind this is this is always going to be the first argument this limberger um but what happens here is that I can uh pass essentially uh collections or sequences in this case lists to uh both the second and third argument um and loop through those um and you can do anything you want with there so basically what this means is you get any number of arguments um and you can get that at them with the keyword and arguments uh collections um so here we're just using a for for Loop um here and let's go to run this uh and then we'll run it down here and you'll see the the arguments here we're printing printing out these arguments so the first first and second line are just these these kind of funny things that came from a sketch but then um you can see that the arguments that we passed through here um in this case limberger blah blah blah and it's very funny um are are uh being passed in U right after that so you know we have we have um essentially the it's very run sir and uh it's very very runy sir are passed in is these next two arguments and we're just looping through those arguments um and then of course it will continue to print things out um and then you can even continue from there um you can even continue there and find out which arguments it was it was giving back so you'll notice in the last example here uh we're we're saying hey we're giving you a named argument right shopkeeper client and sketch even though those are never defined up here we can use this pattern to say hey I I have something called name shopkeeper and it's got a value right um and that's happening here where here I can say okay I've got a keyword um and that's what's coming from uh or I'm sorry we got an argument um and uh the arguments are basically be what's passed and pasted into here and we can get this pair and in that way you can write uh code against this we could test uh you know the keyword coming out of the keywords argument here right the second one um and and say what is this trying to do we could set up variables appropriately or we could get default values and you can extend this on indefinitely this is very useful for data analytics where we we don't know what's coming in you might have one column you might have five columns or you might have a 100 columns in this way you could basically assign each one of those columns to a variable in your code and and deal with it or anything else like that um it's you know if you had like a bunch of players or things like that you could basically pass them in as lists or other things here I'm not going to really go into this and there's a whole bunch more in the Python tutorial uh that I derived this code from uh that you might want to dig into but just be aware that there's ways to extend the the name spaces and the signatures of these functions indefinitely um as long as you follow the rules that you can't mix positional and non-positional arguments um in the way that was well you can but there's ways that it'll break um but and then there's a way ways to even get around that too um so just a lot there as well um let's see I'm going to go a little long I just want to talk about one more thing which are Lambda functions Lambda basically means it's an an anonymous function there's a lot of functions and other other bits of code that you'll pass around where you actually can pass functions to functions um and often you don't want to write a whole new function uh just to pass it to another function it might be a simple addition and things like that well what you can do is you can write a Lambda function then where it's basically saying take this uh value um and and uh so uh and single value and pass it in and return it so this this particular function right here is a full function it's returning the sum of these variables um and uh and uh and it's taking an argument of X and passing it in and returning that value you can use this in line here uh to do things uh where uh for example key here requires a function this sort requires a a function and I can just Define it as such I'm not going to go too far into this but there when you see Lambda just basically know that it's defining a function just for that little block of code it only exists right there where it's defined and it's acting as a function not as a variable so um we don't go into that too much but that's what those are if you see them um I'm happy to to go into Lambda functions more at length in a more advanced video and I may uh depending on where our units take us um but if you have any questions about that and you'd like to see more concrete examples I don't want to you know belabor this video uh and really get into Super Advanced topics like that uh but uh I I do want you to be aware of what these are if you come across them so uh all right that's uh I think it for functions I I'll take a look make sure I didn't miss anything but hopefully this video really opened your mind to abstraction um uh and compartmentalization with functions making code re more reusable um and then extending them of course with the the Nam space tricks that we covered in this video um so uh let me know if you have any questions about functions I I hope this was a great unit for you I sure enjoy have enjoyed making it