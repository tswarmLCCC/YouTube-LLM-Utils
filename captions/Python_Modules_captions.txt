welcome to kind of a unique unit um in in our python classes um this one's going to go over a lot of utility functions within python um mainly about modules and libraries adding ex uh external functionality to our programs but we're also going to go into a few other things like notebooks and some some software testing and then even how to write our own modules so so there's a lot lot in this uh that's really kind of useful stuff um that uh will really make programming just a lot easier uh in terms of organization um but also just standing on I like the term standing on the backs of giants where we we don't start from scratch every time like we have been but instead we use other people's work to build on top of which is kind of what modern programming is all about um there there's a lot to this unit so I'm going to jump right in to the overview here and um and uh and try to cover uh that stuff so there's just a little bit here in this overview um the the reading there is a zybooks reading this week um pretty light there shouldn't be any labs I don't think in the assignment um let's see where's it at it's it should be um looking for the modules unit here uh can never find these in there it is oh looks like I need to change the due date so um let's uh yeah go ahead and edit that right now um and I know so let's just make this do should be probably I want to say March 15th or 20 I I'll go actually what I'm going to do is put this into May uh just in case uh somebody doesn't quite get it done uh on time they can go back to this um as well but I don't see any labs in here right right off the bat so shouldn't be too many of those um and then uh I'll I'll also link this lecture right here um this link right here by the way is the uh Google collab notebook that I authored uh for and I'll refer back to it in the lecture but you can get that right here it's also included in the download that'll be linked on the assignment um and then there's a couple other links here that are kind of useful um for running uh Google collab or uh uh doing local installation on Jupiter notebooks um those those are um well I'll cover those when we get to it so uh let's see yeah that's that files are good there's the assignments yep everything else is just fine for what we're doing here so I'll get right into the lecture here um so uh modules uh are basically bits of code um and I hope you've read the zbooks by now that we can move out of a main program into um another file um uh um and um and bring those in they're really useful because we can reuse them then and that's actually what we'll do several demos on here in just a bit um some of the libraries that come in I said modules here but uh coming with python like CIS and time and math and random will'll use as well recently um those are just built in you can just use those for free it looks right right in the python directory where was installed for those um they they get updated quite frequently um but they just come with python and then um there's another uh Place uh where Python's installed um called cy. paath and that's there's a whole whole slew of of downloaded uh of uh directories there um that that uh you can you can download code from the internet quite easily using a program called pip oronda if you're using the Anaconda suite and it will go out and find find these things from the internet for you there's places called repositories for them and it goes out and finds the modules downloads them and puts them into the directories and then finally you can also uh put them both in your directory and also um on uh in uh user paths and things like that you can add these things uh to wherever you uh want as long as you update your system accordingly the main thing though is to know that it looks in this order uh mainly uh we're on syst stop path and then tries to find other things from there to resolve things when you do what's called an import um which should be Yep this one um so there's a couple different th ways to um import things um the first is to um is to use uh a namespace where we import uh something um so numpy would be a package here uh that we've downloaded and installed and then when we import numpy as NP P it's G the NP is uh is what's called an alias um uh you could also just do import numpy without the Alias but uh and put uh numpy do arrange here to do this arrange function and you need to look at the numai documentation to kind of see how to do that um aliases are nice but uh uh sometimes they're misleading so make sure you look at the top of your file and see if if the code that you're if you're either writing or or reading is using them if you see something that seems short it doesn't seem like a library name it might be an alias um the other thing you can do is you can do uh you can import specific names from a module so if we wanted to for example grab a range we could say from uh numpy import a range as opposed to importing the uh the all of the name space see here we have to still call numpy and then call it um here we can just call it Direct ly it's kind of a personal preference the one nice thing about the second version of this though is this keeps your program smaller if you end up uh sending it off it uses much less memory because this will import the name space for the entire numpy uh Library where this will only grab uh specific things so it's sometimes considered better practice to import just what you need as opposed to just grabbing a whole bunch of things off the get-go it's interesting uh python will let you get away with it but some other programming languages won't even let you compile if you don't use something that you import to in in an effort to keep it smaller so um the other really cool thing about uh um modules because you got to keep in mind we're keeping these in external files is we can use um what's called uh this uh this um name it's called oh goodness I think it's called a magic variable but there's a specific name for these things um and what this bit of code will do if you put it well in any program it checks to see if the name of the calling space is Main and what this does is it basically says is this is this script that the file that I'm running from is this where uh is this being called directly from a user if so this will evaluate to true or is it being called from another file because if it's being called from another file this will execute as false and the thing will uh will not fire this is really really handy though because what it allows to do is write little programs in our modules to test things in just that module without calling it um so we can do like prints and logging and and asserts we'll see here in just a bit um to test the code and our functions in the module without writing another program so we can we can have some baked in what what I call unit testing or what we call unit testing um they're not quite to if you look up unit testing there's a lot more goes into that but um we can we can write um fi uh a program to test our functions and and classes and everything in there uh right within the file that contains the module um without and then and then when it's called from other another place that code's not used it's only used when you execute that um so another example of that is like is basically this um where we write uh say we had a uh a calculate area function well we might make a test calculate area uh function as well and then we call that uh within our our main our our if name equals main block right um or we might just call this code exactly this will throw an error basically if this if this uh this function or this um expression right here is not true so assert basically throws an error if this is not true um which is handy because you know uh you know we expect the output to be 20 when we're calculating uh area in this case so we can give it the answer and test it and make sure our function does what it's supposed to be doing um this could be really useful to write um up uh these kind of test cases up front to make sure that our program ends up being doing what it's supposed to do especially as these things get complicated and then you can leave them there so if they ever update you can run all the tests again and make sure everything's still working um so there's a lot to assert um uh I'm not going to go into it but know it exists um and you'll see this used in just a bit in one of our examples but super handy a super handy bit of code here let's see okay so um packages um are basically bigger modules right where we start to package up a bunch of things um uh for external use and these would be something that's distributed so you one way to maybe think about it uh you know in the simpl senses modules might be set up FES we keep around locally that we use where we write um when we're writing a program we might want to separate logic that's you unique to just that program but if we start writing bigger things that are reusable across programs across projects we might move them to what's called a package in Python and this can be super super handy um to do things that are specific to a lot of things in in your programming environment for example in a previous job I wrote a lot of libraries that would connect to our local databases so instead of like setting up the database object writing the query retrieving the results storing those as as an object and doing all the things that go go along with that um I stored the the server that I always wanted to hit and uh in in in a in a library um and then just said run DW query so i' that's all I would it would just be a one liner as opposed to five or six lines every every time I wanted to do it just sped up my work and if I ever had to update the connection to the data warehouse I would only have to do it in one place just a connection string that lived in that Library redeploy the library and then everything works again very very handy uh let's see what oops I need to change it over here yep so the modules that come in with a python I kind of got these out of order um are are good to know about uh you know we've seen some of these before already uh certainly some of the um you know the CIS and Os we've done for some clearing screen probably on the midterm um random is a great one to know uh to to do things with random numbers Math's another huge one uh where there's some functions in math like you know even things like simple exponents aren't built in but we can bring them in if we need them right very useful um and then a couple other things to deal with things like URL some uh directory stuff with the OS things like that um oh date time that's a really nice one to to be aware of as well so the point of this though is that there's some stuff built in you don't have to do a thing to get these but it's good to go out and read the documentation here and that's why I kind of gave these here uh because you and get to know what's available for free without having to write it right same thing is true of other modules um and in libraries it's really good when you're approaching a program uh programming assignment or project to go out and just kind of Google is there a library that does this very well or not right um that's that can be super super handy um to um you know save yourself a ton of time and uh some of these are really well thought out libraries and they're industry standards even it's one of the reasons python is just so dang popular there's so many great libraries out there um let's see the only thing I want to touch on this one is uh using uh package managers um so pip comes with with python um and you can install uh you can install uh functions or I'm sorry libraries with just type like pip install and in this case it's going out and downloading something called camel case so I might look out you know have some code that does uh C camel casing by the way is uh when you take a string and and it it uh it will change the lettering um to remove spaces in in in uppercase so it makes nicer variable names things like that um and then you can uninstall it the same exact way just doing pip uninstall uh camo case and you can obviously see you can also see what you have on your system or your environment which I'll talk about just a bit by doing pip list um sometimes pip gets messed up I usually just reinstall python if that happens um at that point and and just uh uh and we'll see that here in a bit I'm going to go through an example where pip shouldn't work on my system and then I'll I'll run it and uh and we'll see an error and I have to go find another package the there's another um alternative out there it's called Anaconda and and it's it's um it's it's kind of a Scientific Python suite and it comes with just a ton of stuff it comes with a notebook Explorer a package manager called cond which I think is much easier to use and that can also help uh do what are called virtual environments both Python and Anaconda have what are called virtual environments uh where instead of using the same python set of uh modules and libraries all the time you can make specific ones for your project or projects so for example I have an artificial intelligence one that uses some of the neural networking things but it's quite big and I don't need other things in there um that uh you know I might I might not need like you know Pi game for example that' be one I to install in a gaming environment so virtual environments will basically make a copy of python and their own set of packages for you to use um I'm not going to jump into that today it's a little beyond the scope of the video but I want you to be aware that both anaconda and stock python have ways of doing that and if you really get into um you know Python Programming and doing some bigger projects it's probably worth your time to investigate that um and then finally um we're going to introduce um python notebooks so python notebooks are kind of an interesting Beast um Jupiter uh is is one kind of them it's called Uh Jupiter j u PYT R and you can install those right you can install it with you can install it with cond um but cond also comes with um a Jupiter notebook server installed and it downloads a a whole bunch of stuff but what it'll do is run a web server on your computer and um and you can run what's called a Google or a a python notebook Google collab is also another one of those that's freely available um you can pay for it too to get more compute um that's available from Google and as a matter of fact most people that use pyth well I shouldn't say most a lot of people that use Python do it in Google collab I honestly thought G gave some serious thought to doing all of our work in Google collab but I didn't want to require that you have a Google account if you have a Google account though you can go to your Google Drive just type Google Drive and you could you can write um um Google note uh collab notebooks you can also type Google collab and it'll bring you there and you just go file a new notebook we'll touch on that just a bit too um we'll probably see this more as we get into some of the um exploratory modules especially data science it's really huge in data science it's sometimes used quite a bit in AI these days because the other nice thing about Google collab is you get to run on Google servers and you can use their um their gpus their Graphics processing units to run these things with a little more beef that you might have on your laptop um and it's also a nice way to not have to maintain a python environment right you can just run it in in the cloud on Google's Cloud at in this case so um that I think is the slide deck yep so let's see where we're at here I think I'm going to go into some examples now of some modules um this will be a little bit long I've got a few of these that this is actually the assignment I'll come to back to that so the first one I want to show is this guy it's it's a bunch of different programs that all use this import utils here right and what this uh is demonstrating is this might utils might be a place where I've just got a bunch of different utilities that I want to reuse across programs these might be you know this this GRE might have something custom to our company um you know certainly calculating area is obviously something that's not all that hard to do but we might do it a lot um you know rolling dice you know just things that we um we we do often in in program s uh we might move the logic of how to do them into this module so they're done right um and then you can see down here um I've got that that unit test so I can actually run the utils P dot here even though this is not the intent I'm going to clear this so we can actually see what it does so when I run this program we'll see here that it goes through oops let's dismiss this it's actually doing some test it's this is actually printing the uh the greed other than that it's actually doing all of these tests that we wrote so we wrote you know this is the one from the lecture where it's um you know taking four and five and calculating the area well that's just multiplying them right nothing too much but here we're testing to make sure that that does indeed uh equal 20 and we can do the same thing with like this conver these two conversions uh or this conversion where we're converting Celsius to Fahrenheit uh rolling the dice this one's a little different it's making sure that it when we roll a dice of six that you know it's between one and six and then finally so like let's pretend I did something like this let's let's say I did something uh where I made this like 10 and um now our test is checking for between zero and six so hopefully uh before I run I'll keep running it here there we go so here I got an air because the fun the the dice function was actually outside the r Di return something other than six it doesn't say what it is um but it throws an air um and so you can you can have this thing check and throw errs before they become just thorns in your side by writing test case to say hey does this thing behave like I expect so instead of going into a thousand you know line program and having this thing everywhere we can test it here make sure it works um so that you know that's one nice thing about unit testing and we'll hit that again here with this other example that I talked about but the nice thing about these things is once we've done that um we can just use it so we got import utils right so this one's just grabbing my name and it just it just works I don't have to I don't have to worry about it too much right um now this one doesn't I could return this this could be a function where I return my name like we have this one just does some printing right um this one uh does some calculating area so let's you know let's pretend that it's much more than just multiplication it's a huge calculation maybe does some database lookups well it's a oneliner for us because we've we've coded it we've tucked it away in utils we get it for free and uh well not for free but we can just have it whenever we want and it just works so if we ever need to change it we only have to change it in one place here not all of the places then we have a couple other examples but the point being is all we have to do to use this is import it and then call it not even going to run these because they're pretty simple um you know this is you know what we were testing earlier um I'm going to enter a 10-sided dice here and we rolled a nine and then let's say we wanted a 20-sided dice they were're playing like Dungeons and Dragons right um we we get all that functionality for free because we implemented it once and then we never have to think about it again as you get into weeks and months and years down the road you'll really appreciate starting to take your code out with it's useful and putting it into um into a uh into an external module like this um one bit about functions and I'm sure I talked about this during the functions uh um uh uh module uh canvas module um is anytime you start to you write the same code twice consider putting in a no module and if you use it use that function in more than one project consider I'm sorry into a function if you consider uh and if you start using that function more than once consider putting it into a module basically try to um abstract your code and reuse it as much as you can that that's a key thing um if if nothing else if youd learn nothing else from this class I'd really like you to appreciate that that you can build things up tuck them away reuse them and maintain them and you're going to make your life easier and easier and you're not restarting from scratch all the time um which I think is just just key I don't know what the heck that thing is so we'll get rid of that um let's see so I've got another example of a module that does quite a bit here so this one um we have uh uh this was actually going to be our assignment where we we write just a bunch of logic over here but then um our main program is then very very light um so you can use main here too um and you should um the idea here though is that we we write a bunch of these uh things uh and then we test it so uh but Bunch so this one's just guessing numbers and then we write an assert here that's uh um that that's testing it so this particular program uses random number Generation Um one thing that's really useful in random number generation is called setting the seed basically what this does random number generation isn't actually truly random it's based on a a couple things but the main thing is it does is it it starts with what's called a seed and it will if you set a seed it will always generate the same random number the first time after that and then the same the second random number generated after that will also be the same so on and so forth this is useful for testing programs we often need Randomness in our programs I mean it's just used everywhere but to test it we often want to control what the random number is so if we set a seed we can figure out what that's going to be in this case the random number is always going to be 19 like I've already done this work I I I ran this um um and um so th this function itself is just having the user guess some input here up here um uh and or they they even uh do they I can't remember if they input it here otherwise um but the idea is that they they compare it and it just Compares it to that 19 but without knowing that that's going to be 19 we'd get um some changing results so just some things that that come into play there I don't think you're going to need that too much for the final but it's a good thing to know about for sure um just know that you can you can control random numbers and you can test a lot with assert here uh to make sure that it's behaving behaving properly probably a really good thing to get at least into the mindset of it is understand what your your functions and programs will do before you write them so you can write the tests like for example I could write the um I could write the uh the the number guess test here before I even write number guess up here right so the idea is like hey I'm going to give this you know thing uh you know like if it was area you know four and five and expect 20 so I could write the test and then as I'm writing the function I can keep running the test to make sure it works right um uh you know we've even done that a little bit in class haven't we where we kind of know the answer of what we're expecting um and we keep writing it manually this is just a way of having the computer do it as well uh let's see moving on there a libraries and unit testing okay so now I really want to do some more fun stuff sorry that was pretty heavy lecture but um one uh one thing that you can do with uh let's see are they in here I'm trying let me find some uh YouTube stuff so uh one thing you can absolutely do with python is download fun libraries this one in particular um it's intended it's intended to be able to download YouTube videos right which is a lot of it's kind of hard to do but python can do it so I found this when I was writing this but I wanted to show an example of uh so I'm going to use pip here right and I'm going to go install so I need to install this do you see how that's yellow it's saying it cannot be resolved actually if I run this we'll see the same error um we should see let me clear this actually because I think I messed up because I started to type P but if I run this program we'll see no module called pdup you'll see this a lot this module not found a well to resolve that often not all the time but often you can do pip install and then the name of the module and you're going to see it try to do this here I didn't copy it apparently there we go and it's going to go out and it's going to try to look in its repositories and it's actually going to download this thing right um giving me a bit of an error I'll have to check that later but the point being is that when I run this I still get in there oh that's the path yeah so uh dang it um I'm gonna have to fix that before this runs ah dang it um let me see if my other one runs just I don't think it will either let's try it the point of the module was that it it's actually a deprecated module and I had to go find this other one and I was going to show you how to navigate that whole area let's see what happens here if I run this thing so I'm downloading another thing yeah let's see what's going on let's make no still doesn't work all right I'm going to stop this video for a second and I'll make another one here so uh the main lecture you know what actually I'm going to do the I'm going to do the go Google collab bit as well uh because I I can jump back to this Al I'll add a supplementary video to this after I fixed this pathing error on this it's just a system error I introduced and I thought I wrote this at home and then I'm obviously recording this here um but the other thing I wanted to go into is the actual assignment so you got all these programs to reference on how to do all these things certainly use these two and all of these for examples on how to write test cases and and how to abstract so again these programs are importing utils which is just the name of a file and that's all you have to do in Python is within the same directory if you've got a file you can just import it and it will act and it will give you everything in there so the only difference is you don't want import. py you just want utils um as opposed to utils.py even though it is a Python program but you can run this to do tests as well just like we talked about earlier um so let me go into Google collab real quick and um by the way this the the um the uh The Notebook I actually put it in here as well so you can have it it's also downloadable from the modules uh or the the um guided learning for the week not guided learning the the weekly overview but it's the same notebook um and I don't even know I don't think this will run uh I don't think I have an existing Jupiter server so but the point is you can do it and to do it we're going to look at look at this in Google collab instead um which uh if you got it in Drive I've got it here you can right click on it and do open with Google collab collaboratory um this is actually a different one that I'm working on uh for mapping um but uh for the gis department but you can right click and just open with Google collab but I've already got it open here and this is math this is some math stuff uh which is super super handy um obviously if you're a college student right I know you guys use um mat lab a lot for this stuff but you can do a lot with this uh right here so I need to import some stuff numpy uh basically is a number processing Library it lets us store data um and do some really interesting things uh with uh with series of numbers storing it on top of what we do with list and dictionaries map plot lib uh is a plotting library and then uh s uh simpai and scipi um bring us uh scipi is a scientific P python library simpai is a is a um a uh oh goodness it's a it's for simulation um or no not in this case that's s m py sorry um anyway uh you'll need to put these in here um and run them and if you get an error you can actually import them as well here uh so for example I'm going to go Ahad and run this so what it's doing here is it's going out uh and checking on Google collab this is on Google uh to um to see if these things exist if I wanted to install something like one of those libraries I was just running uh let's I think it was called P Tu fix I'm just going to copy it real quick though uh from here or from here let's say I I went to do this actually I might even be able to do this um in here let's so you can make new blocks of code um and you can even so I can I can type in these things right I can write a report of what I found in here that that's all pretty easy to do and that's why they're called notebooks you can do a lot of things right in here with word processing like features like you know I can underline I can uh bold bold italics all all of the things right that's and then when I I can export these things as well um so this is what the user would see uh so on and so forth but if I wanted to install some new things I can do that so let's say I had this kind of code and um I'm going to run it I don't think that yeah so we here we see our no new module again and here if I do I can do pip install Pi P tube fix as well but the only thing I need to do here is this is not a python command it's actually an operating system command so I need to I need to preface it with a um a uh exclamation mark and then this um so that's the only thing you need to know or to to install things is you can use pip here and it's going to go download it um and let me grab a YouTube video real quick let's just find one I'll do that over here uh one sec I don't know how well this will work but we're going to try let's grab just a music video verbo is for sharing so the idea here instead I'm just going to actually put a YouTube video in here and this should work now because I just installed this so like it's actually downloading a a music video called uh uh ghost love score it's actually a song um that and and and so it's downloaded here and you can see here that it actually did download um this is what I was trying to do earlier um and as a matter of fact I'm going to demo it right here instead so I can actually download this uh from YouTube now just like so um think I did it oh I's see is it downloading well I'm going to grab the other example as well since I've got it handy where we do the MP3 from it sorry about the awkwardness of the demo this still pretty cool same exact thing as I just did except this time I'm going to make an MP3 of it instead of a video hopefully we'll get them both um I think it's the same video If oh no not quite the same video but uh we say we should be able to get an mp3 from this one as well so instead here I'm just prompting it but instead I'm going to actually just give it the URL just like we did before and uh let's go ah and run this uh happened here well I think the problem is that it's trying to do this uh download show the progress of the download I don't really although that worked up above why didn't this work I don't see it off the top of my head let's make sure this link still works well you know I'll just use this one we know it worked so it might it might have R into an error when I did this let's try this there we go so this is actually going out to the YouTube video and actually just getting the audio stream and saving it as an MP3 and here we have that same thing so here I can I can download that as well and I don't know why it's not downloading I should have seen it by now let me check my downloads directory um but it certainly Works locally it's actually I had a lot of fun with it over the weekend um no nothing yet something something about the downloading isn't quite working um it might still be might still be processing um anyway the point is you can install things into not notebooks quite example uh quite uh elegantly uh here they come so here comes our MP3 how's it going everyone welcome back guy my name is Blake and today we're gonna be don't really care about that but the the point is we downloaded uh some some some uh uh some uh some stuff from YouTube sorry I'm getting a little distracted here with with all of that I meant to do that in a other demo um the point of the notebook so other than being able to just run code in a in a an environment that's maintained for us is there's a lot of free things that we get so um for example if we wanted to do some graphing we can use uh um the U the the uh the combination that we had above wherever they went didn't download I didn't where's the Imports here yep so map plot lib and numpy will give you the ability to define a function here and then um in numpy we're this is just defining the space that we're going to graph over here um and then some functions on how to different plots like like setting the title and things like that um there's a lot that goes into that but um just Google you know map plot lib um uh plotting examples and you're going to just run into a ton of them um this one does uh the uh solving some polinomial and doing some Roots here um and then lastly I think we do a sine wave plot here and some integration if I recall yep it's basically finding the area under the curve here and putting it right into a plot so that's a really neat feature of using um for using or some reasons to use notebooks but really you could do a lot with them we could do we could have done almost all of our homework in in notebooks if we wanted to um oh one more example of uh running actually a fit line if you're familiar with stats so um this is actually doing um a a fit of a polinomial um where we have an X and Y uh function where we just generate some random numbers uh between it it's I think this is grabbing 10 numbers yeah 100 numbers between zero and 10 that's what this is doing uh from a uniform distribution and then um and then essentially uh G building a formula and then we're just um plotting the two uh two as well um just do a fit line things like that so sorry that was a little choppier than I intended I I I kind of jumped over because I just realized that we could do the YouTube video over here but um kind of some fun stuff that you have the access access to and as long as your pip environment's not messed up you can you can do that right in yours all right this uh video is getting quite long sorry I apologize for that let me get into to the assignment and then I'll be able to end the video so this week you will be basically oops dang it um going to have to chop that out um I don't probably don't have to I don't think it's that bad um the uh you're going to be be basically doing some importing here the random unit will go up here um and just uh just uh building a function that does essentially this um is you know and you should be able to handle that to to with uh um uh so you you'll write a function much like we just saw with our our dice function that we just did um and then you'll test it down here so we have a test di roller already built so this this should pass right when you write this function this should pass uh and uh and then um when you run this program dice roller here it should you should be able to run this and I will do this when I take grade it I should be able to run this um um let me get rid of that you can go away there we go I I will run dice roller here and you'll have completed it to run the tests and then of course you just use it in a function so the first part of the program is is copied here where you're you're writing dice roller which is the the uh the the module and then you're going to import it here uh so you'll import it like here and then actually use it in this program and do a little formatting um not nothing too bad here um and so two programs this week and you'll turn both of them in um is the idea so sorry about some of the choppy examples there there's a lot lot I wanted to go over and some really fun stuff I might re record the YouTube stuff as well and uh and and maybe cut out the video we'll see how it goes see how this turned out so um as always let me know if you have any questions we're going to be doing a lot with modules going forward frankly the rest of the course probably will be based on using different modules and notebooks in a lot of Senses to do things like data science and AI things like that so uh this is kind of hopefully giving you the building blocks to do that and please go play with these things as a matter of fact my assignment originally was like go find one and just build a program but I wanted something a little more structured so that's what the this assignment is all about um and that'll be I'm going to package all of this up there will be a lot of programs in there but just remember dice roller well obviously not the solution but dice roller and dice stats are the two things that you'll turn in um and I will uh I think I already did in the assignment here not that assignment the uh where's the assignment here it is so this is just the same thing I was just showing um but you'll you'll you will turn into dice roller and dice stats uh to me um uh so that that'll be what you turn in so uh okay uh bit of a long one sorry about that uh let me know if you have any questions um and I I hope this is kind of a fun unit for you certainly uh when you get to this level of abstraction things I hope start getting a lot more fun bye