all right we're coming back in in the middle of uh discussing tupal which are part of our data structures continuing lecture series um as we uh talk about uh data structures in general we've gone through lists and now we're moving on to tuples um uh there's there's a a previous video in this that introduces the concept of tupal so hopefully you're watching these in order um as we continue on uh we uh are starting to talk about where we can um um access tbal uh using indexing just like could with lists and they use the same syntax so this could be a list right this is the same syntax of a list but in this case it's a tle which of course we had a multiple did I create it let's let's actually just let our um let's just create a t real quick don't know how I lost that but let's go ahead and just let autocomplete give us an example here and of course when we run this we get one the first element pretty pretty self-explanatory remember that zero of course is the first element of any um any sequence or iterable in uh python um and uh and many programming languages there so zero is of course responding to this we could uh do the second or I'm sorry the third element by using the index of two um and we get of course three there uh much like list we can grab go backwards we can grab the end element by using uh negative the negative syntax uh this starts from the end and grabs the first element so there's no negative zero here that's the main thing to know so if you're using variables to do this you have to count for that in the math we can also use um the between operator um to retrieve a range this basically says start at position two and end at position four so we get two three and four uh not a lot to say there um uh you can you know play with the ranges there and see how that work yourself or you can go back uh and and explore the um the uh um excuse me the um um list uh slicing uh videos uh for more on that um and then of course we can grab the second to last one uh you know with negative -2 there's nothing really between that and that um we can just basically we're going backwards this is the second to last the third to last would be neg3 that would give us three of course uh because that's the third from the last here um hopefully that's um you know if you're watching these in sequences um is pretty straightforward for you at this point if not again please watch the indexing videos that we talked about uh during the uh the the the lecture series on lists um but it's the same idea so I don't want to really beat that uh that concept too too much further um the one thing main thing that happens uh that uh with tups that don't happen with list is you can't change the element of them so I couldn't do for example I cannot do something like this let's let's grab a bit of code here and let's just make a my Tuple y let's go let do that and I can't do for example my Tuple sub three don't know why it's doing that just finish it I this will break right it will not let me do this um we'll get an error we'll get a type erir Tuple uh does not support item list this is basically saying it's immutable and what we of course mean by mutable and immutable is that it can be changed or not changed that's what that work means if you're not familiar with it um and then we we have some ideas here where uh some some Concepts here where we uh I don't know what it seems to be locking up on me a lot here there we go um uh we get this this will raise an error of course that we are trying to do the same thing um and it's an imut immutability error and if I print this we can see it it it didn't you know let's break this code out just to uh let's just put this um let's do this we'll do it down here just to let that print statement show um that uh we can we can C this is how we capture errors with tries and accepts uh we will cover that a little bit later um so uh um uh anyway the point being is you you you can't um over overwrite elements of a Tule there's ways to get out that around that which is described up here but I I don't want to go into that right with now um there's some uh operations that we can use with tuples uh so let's go and set that up um so here we just have tle one and two we can combine them with the addition operator much like what we did with lists uh um the concatenation operator I should say I have to be careful with that plus can mean addition when it's dealing with numbers but often it's um meaning concatenation when it's dealing with strings or iterables and concatenation of course just means combining two items concatenating them together um we can do multiple ones where we uh where we we we pack them together this is a chainable operation uh which is kind of nice um so you can do things like that and of course you can do something like this as well let's add the one that I kind of forgot here so let's add let's just do this and let's do you can do this um repetition operator um as well let's do it times four um where we get basically it repeats a whole bunch of times uh so if you see this it's not multiplying each item in there times four like you might expect you know if we were writing a function to do that there's ways to do that of course uh but we wouldn't want to do that in this case um we could write a for Loop or something to that end instead to do that uh this this is basic basically saying add concatenate these together four times that's what that means so we could have Rewritten this uh to or or to to repeat um of course all those operations are chainable um one of the main reasons that I've seen that you want to use tuples are is this idea of unpacking uh so uh you can basically get variables out uh by saying and you we've seen this right before uh where I kind of skipped over it but the point being is that you can get each individual out uh let's do this where we do print a print B and print c um you we'll see that we can get each one of these individually out on their own lines um or you can of course you know access them uh like that like that as well uh but uh so you can get each individual item out of a tupal um and you don't even need to do that I think you can even get away with this where it'll work in sequence we wouldn't see C here let's get rid to see just for a tick uh NOP looks like you have to do all three um I I couldn't remember if you could do that or not so basically you have to map the variables to or the outputs I should say um to the number of uh items in the tle and assign them directly um now of course you can use the indexes as well you don't have to do all three at once we could certainly do uh something like this where equals uh well you know you could even do this if you wanted to one two three and then we could do SUB one so you could actually do something or zero let's let's do zero and just print the the first one sub zero not one um and then we could if we do this uh let's just print my variable and we'll put this in a new code block down here come on there you go uh this will work as well where we uh are accessing the first element of the thing um so if if you just need one out and you happen to have either a tupal that's already in a variable an object uh or you for some reason want to do it this way you you can absolutely use the indexing as the result of the Tuple so this returns to the Tuple and then of course this uh performs the indexing operation on that Tuple and then you're giving it the argument of which index you want that's how that's working okay this is what I was trying to think of earlier basically uh you can grab um the rest of the sequence using this star syntax I forgot about this this is what I was thinking about earlier so essentially you'll see here that the the star B here uh is basically grabbing two three four and five but you only reference that with a B it's a reference to the rest of the TB what's going on there yep uh yep and this is the ER we saw earlier where you can if you uh more or fewer uh than uh what's allowed of course that does not work you'll get an error uh same thing here y so you can grab a B and C where uh A and B are independent uh and then uh C is by itself so you can grab the items within the Tuple of course by doing that and uh we're getting a tupal back out because we're combining them but we do not have to do that we could end it we could of course just like we saw above cover each of those individually just a lot of options for getting in and out of those things um we've seen this a little bit uh already s uh my goodness this video is getting long uh you know let's break this up let's let's make three videos on two um let's see what do we have left yeah let's do that because I do want to cover dictionary keys and I would be rushing it more than I'm already rushing this uh so uh just to um kind of reiterate what we've come through there's a lot of different ways to construct and unpack tuples um and then we'll go into the operations that we use on these things uh and and a few use cases in the last two here in just a bit