welcome back to our little short oneoff uh lecture series on uh formatting strings um continuing from our introduction video we're going to talk about uh F strings format of the string literals um the key features here that you want to look for are that there's an F before a string and again a string uh could be um marked up with either a single or double quotes but you can't mix them so you're looking for a pair of quotes here like so and they could be double quotes uh and then um uh apparently you can have a triple quotation work as well um but you can write Pyon Expressions between brackets you can have any number of these and they're right in line so here we're basically printing out Pi where we basically use the math. so uh math is of course a built-in python in or module in Python we're bringing it in and bringing in the constant Pi uh which is defined to an obscene amount of uh decimal points there and formatting it with um three decimal points there you can look up formatting options um on your own uh certainly I'm not going to go over them all but look up python string formatting options and you'll get just a whole slew of them uh for decimals and dates and things like that I more want to introduce you to how to use them as opposed to all of the formatting language that's certainly something uh that that's quite easy to look up and not really worthy of our time in in a short video like this one um as we saw in the previous uh video you can um in bed multiple ones of these if you do that with names they will just come in and they use the same variable names again these are just Expressions you could print either one of these out you could do operations on them of course when you do these um they will become strings um so you know this format. onef will format it as a a single point um of floating Point decimal um but the point is you don't have to like break out of your um break out of your string here to do like things like concatenation or things like that that you'd have to do in programming languages you simply put the variable in in the bracket um you can do some uh really interesting formatting options with uh these kind of things too where if you put the colon in there you can um basically say this is always this little block here this first print statement this first expression is always going to be 10 um 10 characters wide um and in doing so you can basically set up a little bit of a table or at least uh where columns line up right where this is always going to be 10 so like this wouldn't end up over here because this is shorter so if I took this out let's just do that for a sec um you can see how these get out out of line because these are you know the strings are of different length so by basically padding them in such a way and there's padding methods in in the string functions themselves uh you can you can print these things out um in that in that kind of way um moving on uh the second format uh that you you might see or or want to use is uh of of string formatting notice there's no F string here we tack on a string with the format method um these can be variables as well so uh again we did this in the previous video but this uh we could do something like this where we take this string here this part of the string right here um with with the the uh brackets and all that uh intact we could do something like this and store it as my small string equals like so and then uh we can use that as a uh as a as an art uh as the object that calls this so format here is basically a method of the string uh class and then when we give it a string object either literal in this case or uh past as a variable in this case we can basically format them the way this works is essentially uh when when you don't give them names which we'll see in just a bit um they they go in order so spam and eggs will go um in order here but if we flip one and zero um we'll see of course that they flip uh like as as such um and that's only because we're just passing these in the same in in a different order um so these are basically positional arguments like what you would see in uh functions uh as opposed to named arguments um we can uh we start to see some named functions down here uh where we have have other and uh again there's an order to these you can't mix these where we put other first but you can say you know Bill Manfred and then other uh uh and then of course George gets resolved to other um so you can you can uh certainly format them as such uh um you can also pass more complex data types so here we have a dictionary right where we've got a name value pair where we've got these um kind of foreign looking names and then some values um all we're doing here um if you really want to kind of decode what's going on here is um is so Jack is a literal string here this is not like referring to this Jack but this is this is basically saying the first argument so zero because again we're passing a format table here right so format and then table's going to get passed in that's this whole object here so what's happening here zero is referring to table and then within there within that dictionary we're looking up Jack the uh the the the the key Jack and formatting is as a decimal that's all that's going on here um so uh that's kind of how to read that so again uh we're passing in table into the format function that's replacing the zero here in all three of these we're looking up the key for each one uh which is nice because you can match up a whole bunch of these um however you want um and then and then extracting the value by of course um look uh extracting uh the equivalent so that would that's essentially the um equivalent of doing something like this where we do let's do table and then just subjack like so if I could type it would help um basically each one of those uh sorry I need to put that in quotes because those are indeed um so that's one thing you can get away with here because we are in a uh string already I don't have to do that um uh you know these are these are taken as l l literal strings excuse me um but basically uh table here is where zero is coming in because again we're passing that in right we're passing that into this this string here um and then looking up the key value of Jack and then that's where you're getting the the 4098 here and then of course the uh colon uh is where we start our formatting options and D is just the decimal operator there let's see what else do I have about this uh I think actually this was supposed to be part this is the explanation for this sorry I got a little out of out of whack there um yeah this is just a rehash that these things go in the order that they come in um so name age height name age height right 0 one2 0 of course goes to name one goes to Age Two goes to height um that's a you know they just go in the order um just a little bit more here that you can do um where we have uh oops did I not print that let me print that um you can uh what was I doing here I think I lost I was moving some stuff around there's there's more to this I'm going to skip over this and if I come back to it I'll move it back up here um you can uh do uh our uh uh interesting uh options of course with uh lists as we've seen in in previous versions where we basically combine these you might recall that these these combine the the two um the the two uh lists into one structure here um where we've got iterables within them and then we can access them independently um and format them so um in a very concise way we can extract Q&A from the two lists explicitly um so the there's basically a tup here of two lists um of iterables we Loop through those of course and and they get each one extracted uh which each for Loop so we'd get name Lancelot Quest Holy Grail favorite color blue um extracted in each of the for Loops um and then we can just grab each one of those respectively in a very concise manner as such uh from here they're just positional arguments and we get a really cool way to uh loop through multiple arguments and of course you could have more than two there let's see how we do it on time you know it's a good point to stop a good place to stop there's a few more uh features here that I'll I'll come back to um but uh we're we're at a good stop I'll just call this part one and part two since we're kind of mixing the the two uh string formatting options that we wanted to talk about but uh uh we we'll continue right back up with with a few more features that are really slick