hello in addition to um our reading material in this in this week uh concerning objectoriented programming and the review of classes and things like that I just wanted to touch about touch base on a few of the higher level topics why we use them and uh just kind of go through a few slide Decks that I've collected on objectoriented program to supplement the reading I'm not going to try to do a lot of demos on this or anything like that in this lecture I think that'd be kind of a waste of time both because uh you should have had it already and I think our our book does a really really good job of um of walking you through the concepts of of of abstraction and then the syntax of implementing classes in C++ um but really I just really wanted to kind of touch base on a few um ma major Concepts that we uh we talk about when we talk about object-oriented program why we do it and how it fits into the larger picture um abstraction um in in computer science um is the idea of essentially um I'm going to go to a different slide deck actually because I really like it better um uh abstraction though in computer science is really a a powerful idea where we take Concepts and essentially build structure around them and to make them work as a tool for lack of a better term instead of individual lines of code um and and really I really like this slide from the University of Texas on exactly that where we um go from essentially a line by line code uh bit bit bits of code and loops and things like that and ending um instead we we uh try to model our data to to be kind of a contained unit that we don't have to think about anymore um great example um is what we'll use um on our final in this class is uh this concept of is is this concept of a deck of cards right so we'd model the values of a card um and we might you know collect the face value and the um the suit um at that point though we might put some logic into say is this is this you know face value greater or less than another card's face value things like that um but then we once we Implement that code we can tuck it away and use it at a higher level down the road and then we could start to build a collection of cards in a deck um and that might do things like um uh you know so the cards themselves take kind of take care of themselves and we can perform operations that make sense at the deck level then um and we could do things like Shuffle or Draw cards from a deck um and then a hand uh might be drawn from a deck and it's again a collection of cards but it might have uh the concepts and this is what we'll do for our final is is the kind of the concept of this this uh the the this collection of cards represents a four of a kind or a a straight or a flush um and and but that way we get out of the idea of like okay we count the number of twos and things like that um because we've done that in another place and we can free our mind of the burden of thinking about all the details of a card or or or the deck when we get to the hand and then ultimately the simulation that we'll do um so I really like this slide um and uh you know in C++ it was one of the first I shouldn't say the first object to oriented programming languages but it was really one that um kind of brought it to light where uh before then we we use the struct keyword we'll actually touch base on that probably next week um to uh to expand it into just doing a lot more of of of the ideas of modern program programming uh objectoriented languages um let's see and you know we get away from a few problems with uh procedural programming um that you know data is very you know uh closely tied to the operation of a linear program um or procedural program whereas object oriented programs again try to pull that away from you know the implementation at at you know at the time and if we change data types we can change it at the object level um and not necessarily in the procedural level that that follows um and then well I don't want to get into all this stuff for C++ um or classes and objects um we'll get into all you know class so the idea though is that we build data types called classes that encapsulate things um uh based on you know our standard data types you know integers floating points um uh um you know uh character array strings um things like that but then we also incorporate methods that we we that would act on those data um but then again hide them away um and that's really kind of the essence of abstraction um and we call we call those those variables that are parts of a class uh attributes and then we have methods I I've never used the term Behavior myself um uh th those are the basically the the things that act upon it so you know for example we made a class called an organism it might be able to walk right um and it might have a height and a weight um things like that um in a video game setting for example it might might have a move command or a shoot command um the the the height and weight would be attributes and shooting would be a method that it would it would you know basically do some sort of um uh some sort of action um and like we were talking about we get to hide a lot of the data in an object so we Implement an object uh or a class and when we create objects um you don't even necessarily need to know all the inner workings because it's again it's it's at a lower level of abstraction we work really really hard on making sure that the the the way we describe things in the in the class are accurate and the methods do what they they should do and then we basically surface those as ways to interact with it um but we don't necessarily worry about the details anymore um this slide deck gets into a lot of C++ stuff it's kind of example but um the idea of private and public classes though uh are are quite actually I like this slide a little bit better for this um it's kind of what I was just talking about where you you all the all the Gory details of a class can be buried in in their private uh um their private members or private attributes um but then accessed or or used by their public members um we we'll get into that pretty Qui quickly in the reading though I really don't don't see the need even to really bring up code here um but here's an example of kind of what that would look like where we have you know height and uh height or width and length here you would never actually touch these you couldn't access those but You' do things like set width and set length to actually set these things and then get in get in uh get with and length to access them um and then double is actually a computation right that's how we'd Implement that but the idea is that if we needed it needed to do more logic than just put a value in here we'd put it in the function to handle things correctly as opposed to directly getting it each and individ each individual gory detail um so we we can basically take whatever um information we need we could clean it we could um reject anything that's you know invalid um or or do do work on it that uh maybe it needs to be in a different shape to do what we need um and that's kind of what's going on here um uh cons globals yep so and then you know another term uh access and M accessor and mutator are are basically those uh I call them Getters and Setters in my head uh because I think it's just a little easier to remember that but um it it's not necess the the the you might come across these terms where so like going back up to our example the uh get is an accessor um method and um and uh and and these um these sets those would be um mutators mutators that actually change the V variables underneath the Hood um so I don't think I really want to get into too much more of this stuff this is a pretty long lecture and it's it's exactly what you'll be reading and going through with the guided learning this week um so I'm just kind of going through Constructors and destructors are pretty pretty uh pretty important examples so um when you when you create an object it it will implicitly call a function that's actually named after itself to basically help set it up so you can give default values there or do logic that's necessary to set it up um um in in our rectangle example for uh we might um have an area private member um but it only takes a height and a width or perhaps even height and width are just given to it as default so if you create one that without any any values you don't give it any it might give it like two and two and set the area to four just so you have something that makes sense out of the gate uh um a lot a lot of uh you know uh if you're building a student you might give it like you know test student uh type of type of information and things like that uh it might be important there um so you know and the the other probably biggest thing is uh let's see is that objects or or classes and objects are just data types so you can have AR raise of them and vectors of them and anything else um which is really where they start to become powerful right where instead of you know collecting you know everybody's age and everybody's name and everybody's you know height and everybody's width in separate arrays you can create objects for all those things and can just create an object of each one um and and then access them individually it's much more powerful and keeps the uh the details of how the thing is is done um kind of buried so um just a quick refresher that on some of the big terms we'll use um uh we talked about object and class and abstraction um and encapsulation is really are really the ideas of taking the details the gritty details of a concept and burying them in a in a class definition um that uh then we don't have to worry about it anymore um and then we get into some really cool Concepts especially in C++ called uh inheritance so we might make a an object called uh an organism um that uh you know has like a height and a weight like I said it maybe a a move Command right um or or method but then what you can do then is uh so uh is you can do what's called um inheritance where you basically make another class based on that class that hence the term inheritance um and uh and there's another term in here that uh we'll get into called polymorphism um where you implement let's say the the default move in a video game's one tile right but maybe you make a bird or something that could move faster the move in the bird class that inherits all the other stuff uh might be uh two or three tiles so um the idea there is that you you override some of the defaults that you give in the in the parent class with a with with specific stuff as you go down down that chain lot of lot of really cool stuff you can do there um and it's really how modern systems do a lot of lot of the things that they do um I think that's kind of everything I wanted to handle although I will kind of just revisit this if if there's any key points it's probably on this slide it's that we we we can take um a lot of the complexity of of a single layer of code for lack of a better term and start to encapsulate it you know abstract with a details to make our our make the way we have to think about it uh simpler it can simplify you know the concepts that go behind um you know really um comp complex operations by um getting working on small parts of it at the time encapsulating in an object and then working on those objects individually so we're thinking instead of a you know a dog that has four four legs and Barks and and has you know fur we we just think about the dog and and then we could think of about a 100 dogs or 100 dogs and 100 cats or things like that so um this is a tough topic to just give an introduction too as you might imagine U but get into the get into the reading work uh do do this first week's assignment it's pretty pretty simple um and let me know if you have any problems with any of these Concepts um and I I'll be happy to you know do specific videos on any of these um I'm hoping though that all of you um this is all review and and there's not any new Concepts here but if that's not the case please please let me know uh because it's a crucial aspect of what we'll be doing in in 2030 here and I'd really like to be able to uh uh um stem off any misunder understandings or or confusion early on so we can build upon these ideas so thanks