okay picking back up where we left off with Expressions I want to get into the different kinds of built-in mathematical operators that C+ plus gives us basically for free um and then we'll start to talk about how we can extend those or bring in other things as well with libraries and things like that so um there's examples here descriptions all these are in your book too I'm I actually pulled this from the book but I wanted to combine two things um of of operators that are uh very Comm in in C++ and programming especially one in particular that you uh that you may not have um seen before um so we have the addition and subtraction operator these very work very much like you would write down math um you just uh remember you have to do the operation on the right hand side and assign the variable on the left um and then we have a division operator now that one and actually multiplication as well um they do different things based on their types and we'll see that in just a bit um if you're dealing with two integers essentially all the remaining decimal points especially on division are dropped they're just dropped so for example if you divided three uh 7 divided by three the answer would be two not 2.33 333 right like it normally would um but if you if one of those was cast as a floating Point only one is required or both then you would get 2333 um because it it knows to say okay I'm dealing with a floating Point de deal point it's very likely that this person wants a floating Point uh output a floating point is of course a decimal value um it's it's the floating Point means the decimal can be anywhere in the in the in the variable um uh and uh it's it's it's a common term for basically decimals it's um but the point being is if you multiply or divide something with two integers you're going to get an integer if you multiply or divide something with a floating point or two floating Point variables you're going to get a floating Point variable back out um there's an what's called an overloaded operator as well uh overloaded just simply means that uh a an operator can do more than one thing and in this case uh plus the minus and uh I'm sorry the multiplication and division do that depending on the types of variables they get but you also get a um a a negative a NE a negation operator a negative sign and if you put that right before um a variable without any context it will just simply multiply times negative 1 it gives you a negative version of it um which is is very handy in some case but you got to be careful that you're doing things like uh making sure that it's isolated um and you're not accidentally performing subtraction because it uses the same exact character uh in C++ as the subtraction sign um and then the uh we'll and we'll talk about modul uh the modulus operator modulo that's your remainder one so if you're dealing with integers um and you do a division much like our example where we divide 7 by three um instead of giving you two it would give you the remainder um modulo does so if for example you wanted to find out um you know what uh you know 10 divid 3 was uh of course the answer would be three but you could also get the remainder by following that up and saying what's 10 modu 3 and you'd get that remainder of one after you know the the the division got you to the quoti of three um that that would of course leave you with a remainder of one and you can you can extract that with a modulo operator it's a very useful operator it turns out it's a great way to find out if things are even or odd uh and things like that um let's see and then the the only other thing is it's starting to talk about order here you know pendus things like that where we've got you know um our parentheses uh uh uh I'm sorry not parentheses uh um the well basically you know the order of operations left or right all that stuff exponents those are all followed uh very much like you would expect from a math class uh I kind of talked about this a little bit ago um where uh actually I talked about all of this but I'll leave this up for just a little bit and talk about it a little bit more um you know where this this modulo or modulus operator depending on you know if we're talking about the plural um it will give you the remainder um and the the differences between the different data types uh and we'll play with that probably in the unit here in a little bit if we do some code examples on this if not feel free to do it yourself it's pretty easy to do in C++ you just you know you can just write those right in there you can even do it at a command line if you want to you don't need a main program you can literally fire up a C++ program and do that without a main program if you want to um the one thing to be aware of U just like in math uh dividing by zero is not allowed right it's it's undefined and in this case it will throw an error and crash your program if you don't handle it with error handling um but uh this this happens quite a bit um unfortunately where you might set a variable and never forget to add it up and you go to do an average um and you divide by that thing that never got added up for example if you're counting through you know 3,000 records and you go and add up say a salary um and you're trying to figure out so you go through and you get that total that the the you know the the the numerator but you never count the records you never you forget to do that increment you'll divide by that variable which is either zero or null and you'll get an error so um you'll you'll know it when you do it it's pretty pretty blatant uh and and it's usually pretty easy to fix but it's one to be aware of for sure um let's see yep and we talked about floating Point numbers um uh basically these are essentially uh the uh so the one the the main one you use is double uh it's a double double Precision floating Point decimal is what that stands for and it's basically the Precision has to do with how many how many uh uh uh points of precision or how many how many numbers to the right of the decimal point will the computer store um and you need to you do need to pay attention to that on occasion uh making sure you have enough to do the operation uh with the Precision that you need before it'll round it at the end things like that um and then there's a few examples of here of when you want might want use different kinds of integers or or or or or floating Point decimals uh but it's something to be aware of there's two different kinds of numbers in the grand sense and then there's many little subversions of those as well so the big two of course uh one more time are integers and floating Point decimals or doubles and lastly I wanted to cover the idea of random number gener please let me take a quick sip here if you took uh any of my python classes last year uh you know both of our finals relied on this idea of random number generator uh to uh help us perform scientific experiments turns out they're used all over the place uh random numbers um anyway the idea oh I lost my I lost my mark on this um you know what I'm GNA going to draw back real quick give me just a sec let me do a little drawing here and um I had this done I don't know what happened to it let me go down to this one and I want to highlight this include statement here and I guess just the random statement here but this out yeah so those are the two biggies and then um yeah I think that's fun this comes for free as well and I'll talk about that just in a sec so let me go back here and start this back up there we go so uh random number generators they come from this uh the standard the standard C library which you can include just like we do with IO stream and things like that um but you need to remember to do it otherwise the Rand function will just say I don't know what the heck you're talking about and it's also in the standard uh namespace so if I hadn't included using namespace STD here I would need to put that before the Rand function calls uh but basic basically those just give us numbers between um between uh one and or is it it's either zero or one and essentially a really really big number is the way and that's different than a lot of programming languages um where the really big number being in the billions I think or or even trillions it's going to grab us grab a number an integer uh between those those numbers randomax you can see what that is by the way uh by printing it out like is done in the example that's baked in to that c standard Library um it's it's a constant that's there and it it's it varies from computer to computer uh depending on the uh CPU architecture of all things but the point being is you get it for free and it's a really big number and random will give you a number between I think it's zero yeah it is okay I'm looking back up my notes Here zero and random Max sometimes it's one is the reason I was struggling there um and but that's different than python right if you do use the random library in Python and use the Rand function there you're going to get a a floating Point number or a decimal between zero and one right which makes it a lot easier to do things like ranges um so I gave you a common operation to do a range there and the idea is that you use the modulo operator so use that remain remain remainder operator and you're doing a division and saying okay when I divide by 20 how many because if you think about any number uh no matter how big it is in the billions if you divide it by 20 you're going to have some remainder between Z and 20 right or if you if you need a a number between 45 you're going to have some remainder between 0 and 45 otherwise you would have gotten to the next the next quotient right so you can get a number in a Range just by using the modulo operator on a Rand function and then of course you need to bump it up from zero um because if you think about what Rand modulo 20 would here it'd give us something between zero and 20 uh if we were right at an increment of 20 it would give us zero and if it was one before 20 uh it would give us 19 so we need to add one more to it to get the range from 1 to 20 so that's a really cool trick on how you can do that of course you can increase the one to a bigger number say you needed a um a random number between 11 and 30 you could just increase that by 11 here so you could just use that offset like we've done with ranges before but it's a very common trick uh and uh the last thing I wanted to talk about with random number generation here is that you can set a seed and that goes right in the random number uh function um just like you can in python or almost any other programming language you when you're developing these things sometimes you want the same random numbers to get generated so you can control for their behavior um when you're debugging things um it's handy you know uh well I mean just just in that way if you have random numbers changing every time which they will if you don't set a seed uh then uh it makes it harder to track down what might be going wrong with your program so if you set a seed you can uh you can basically ensure that the way when your program starts up it's going to start with the same random number Genera and use the same random numbers in subsequent calls as well so that's something to be aware with random number generation and that that's covered a little bit in your book too but if if you have trouble with that come come let me know uh it's it's but it's something that I certainly wanted to include in this math unit and I think that's the last one oh NOP one more that I'll cover with this um sometimes we need to change between uh types um uh so if for example we read an integer in uh from a string we need to turn it into uh a number to do mathematical operations on it well we can do it two ways um uh one's implicit and one's explicit in the case of a string to a number you need to use the expc lid uh uh operator and that's using the static cast operator and that looks like this let me go and highlight that I didn't do a very good job oops sorry uh let's see oops this guy right here and um let me go ahead and highlight two different things in here because it's kind of cool how they do it uh is that the right one yep and then I'm going to make this a different color so static cast is the call and let's go a and do that and and then type is the type where you would get uh let's go ahead and make this a new line so it just breaks that out a little bit um yep so we can see here in the example and let me go ahead and save this and make it a little bit bigger um you can see here for example if we have an integer uh of seven and we need to make it a double we'd call static cast like this and say give me a double back and then we feed it the my inar and then we can assign that to a double um as well uh the same thing can be done with strings uh to and from um well usually I mean you can't cast like an a to a number actually you can but you're going to get a weird number but it will cast because it turns out like we talked about at the beginning of the previous video that letters are basically numbers underneath the hood right so that's the uh that's the other thing to know about that the main thing to know is that you can explicitly do this but U much like what we talked about with division and multiplication sometimes this is done implicitly where um into double will basically uh uh drop uh or just add a point zero that that's the easy one right we don't lose anything when we add Point Z to an integer because it's already an even break at that at that whole whole number on our number line um the other thing to know though is that um double to int basically when you're going from a a decimal to an integer it does not round like you might expect it to it just drops it it just drops it there are round functions in in different libraries uh that you can absolutely say uh make this five but if you just just do it uh explicitly um if you for example divided um 25 by 4.9 you're going to not get five it's not going to be a the answer won't be five it'll be some version of 25 divided by four um is is something to be aware of as well there uh and that's an important one to know lastly there's uh and this is a newer thing certainly caught me off guard when I started teaching C++ again is this uh Auto keyword um uh and what that does is basically you can give it um you can create a variable with the auto type auto type and what it does is it creates that type with the uh first time it's assigned so if I say um Auto age equals I don't know 21 / 7 or 21 minus you know or my age divided by uh 21 if those are both ins it will basically evaluate that expression and then say that's an integer give the give back an integer and same thing like what happens with multiplication there's a floating Point involved in in one of those operations it's going to give you back a floating point so on and so forth and you can do similar things with strings too so that's another big one to be aware of as well there so yep and that's where I want to stop before we get into string data so I'm going to stop this video here and I will get right into that one so we'll see you in that one and we'll wrap it up with a little incremental development stuff