in continuing our study of lists um previously we've studied how they're created and what they are and then how to access individual elements at their index indices uh we can finally get into how we can modify these things so you'll see me repeat this code a lot because we'll be modifying them uh as we go but there's a lot of uh methods uh so when you see this syntax this dot syntax in Python it's essentially using a method of the class that we talked about earlier the iterable class that was then extended into list well when they built that they like there's some useful things that a lot of people will want to do so we're going to build functions or methods in this case when they're part of an object or a method to do things to a list um uh that are are quite handy the first is appending things to a list so we'll see here that we're creating a list and then it will append to it uh append the number six so we'll start here let let me go ahead and do a print here as well not that we need it I think everybody can kind of conceptualize what we're doing here but let's go do it for the the sake of complete list we can see that uh we are first building a list and then printing it we see it only has through five and then when we append it tacks one on to the end right six um and it'll keep doing that so let's go ahead and do this now let's make some new code down here uh oops not copilot I don't care about you I just want code there we go um so you'll see once we have that I can if I keep running this it's going to keep tacking on six so now we'll get two sixes and then three six sixes and four sixes and it's basically because every time I run this code it's doing this of course you could do this in a loop as well right we could keep appending things to an existing list we'll see in a in a bit that this is a uh an example of a stack where we add things in and we can um pop things from the end uh uh and it's so it's a last in first out type of operation which is useful in some data data operations um we can also insert elements in a list um using insert so basically this is saying insert an item at position zero and then it gives us the item that it want so here we'll see a zero get tacked in there and then another one and then another one this uh this first one sorry if I can hover over that and give you the the syntax highlighting let's see if I can get it to do it again H doesn't seem to want to but there we go well anyway the first one is going to be the position and the second one is the value so let's just uh let's put put this into quotes and we'll see that it's going to start tacking in uh the quote is zero or a letter at position zero um of course it doesn't have to be at position zero there's nothing sacred about that we can put it in at position three here um not zero3 but three and we'll see them starting to get put into there uh and it's getting longer here because i' I've made it too long let's go ahead and uh recreate our list here like so just so we can use that again and we'll see that uh it's getting in position three and then if we change it to position five it would get put in there so basically you use the index and it will put it in after that any anything you want anything including other lists of course or other objects uh so let's just change that back to the way it started out um and you can certainly play with that on your own time if you want um you can extend it this is a basically uh an insert at the end of a of a list um uh as you might expect so if we're extending it with a list uh and this is the same as that plus operation that I showed in the last video up here my goodness that was a while ago already where did I do that right here I kind of demoed that right um You can do a similar thing with the extend function here um right here so here we we have a list of of course it looks like this and then we'll add 789 to it and we'll see those get tacked on and of course if we repeat this again it will keep doing that right the these things are um just continuing to add items to that list as we go that's all that's going on there let's see I'm gonna I'm gonna grab grab our code here just to clean up our list as we go through some of these operations here and Tack it on I've done it in some places and not others um so uh this one uh this actually I'm not going to use it yet um so so uh my list remove it removes the the value um so this is not at the index um it's uh it's re it's actually trying to find the first occurrence of zero and remove it and in this case it's going to throw an error um I did this backwards but I did it because I want to show it so if we run this we'll see an error because it does not have zero in there right zero is not in this list um of course if I put ASDF in here we can see that it is it will remove one of those so there's two of them in here right if I run this now it will see now that there's one now there's none of them and now it throws that same error that's why that works that way so I'll change that back um and we can see here that I I did that where it's removing the one here at the beginning so the first time I run this it will work right it removed the one from here now it's not in there anymore and we'd get the same error um so that's what removed us remove some people make the mistake here that thinking remove removes the thing at the at that index that's what delete does um but um de but this actually removes the the first occurrence of the value and you can have it start later uh so for example if I wanted to grab the first nine I could start it at like position five here and we'll see that it's basically grabbing ah dang it uh I think I've made a oh there's a different way to do that I think um sorry I kind of get those jumbled up in my head sometime different languages sorry about that all right anyway this removes the first occurrence of the value there there's ways to do that but I can't recall off the top of my head have to do it um the uh the next element uh of course is um is is popping so again let's just run my list here let's go copy this make some code up here just to have it on the screen here pop will remove the very last item and actually Returns the item so it's not only just deleting it or removing it but it gives you that item back um and we'll see an example of that in just a bit um so if I run this we'll see now that um that uh my uh the last thing I do let's do this let's do this instead let's just change it so it gives us both of these right back out I think that'll be a little more instructional we'll just print this by the way in Python notebooks if if you want to know it if you just have an element here it will um it will basically print that to your output including plots and things like that in a in a python notebook um but if you print things it will it will do all the output so um multiple items it will ignore uh but if you print them it will show both like this so now we're at seven of course this is because I've ran it twice it's now popped nine and eight and we can even see eight was the last item popped here uh and we could do something with this variable pop called popped element or object or whatever it is um and then this decreases um and we can see that keep going down and whatever is getting returned gets returned there um earlier I was trying to delete uh or showing uh when we did um when we did the remove that's searching for a value uh called zero uh with the value of zero and removing it instead though we can actually uh just delete things at that position so delete will basically return remove the two here um it's this is continuing to remove that first item um so if I do it again n we'd see that we remove the three and if I go like two in it will remove things to to in um so this is an index so 0 one2 it'll remove the six so we should see four five 789 just like that and then of course if I run this again this is now at that second position if I run it again away it goes uh we can use a similar trick uh we can reassign things uh this is called a mutable uh data typee so um in this case my list is 4 five 89 in this in in this certain instance we can replace um an item at uh at an index so in this case index zero the first index uh with the value of 10 um and we see that it from went from 4568 uh 4589 sorry to 10589 it just basically replaced it running this again will have no effect because it's just replacing the same one of course if I change the index to like the third element though it will have an effect because now it will change that fourth element to 10 and again that's because index 3 is actually the fourth element uh we can do multiple ones at a time like so uh basically changing uh the things within there uh to uh 20 30 it's basically saying grab this and uh this slice I want you to replace with a slice of this this size um I can I think I can add more than that like you could basically put a whole bunch of things in the middle like so and it will extend it instead like so so basically it's saying take everything that was one through three and replace it with this whole big gigantic number that I've just shoved in there is what's going on there so you could actually really uh go nuts and expand this pretty fast um let's see here I talked about this a little bit but I wanted to call them out uh let's see where we add on time I'm going to keep going because I've already covered this uh we can repeat elements we can add two lists together um so on and so forth um and then we have these two operations uh let's grab this real quick uh let's add code here um so um the idea is that basically it will retrieve one or zero let's go run this uh oh I don't have a list one let's let's grab our code here just to set set the thing up excuse me I know this video is getting a little long but we're almost as a a good stopping point for this so the idea of in and not in is it will return basically uh is the number two in this list right so it's just checking in there it's looking for values in the list so in and not in well basically you can use just to check everything in the list to see if it's in there this is super useful in data science and there's other ways we can use this to build um essentially arrays of of these things to say where are things but uh for what we're doing right now um uh just you know the the N here it's looking for the value here in this list so the n n is the function or the operator and you we can see that two is in the second element here um so we can check to see if it's in there of course this is super handy right if we're trying to find it um and remove it or whatever we did like we did earlier we were seeing that error we can first check to see if there if it's in there we can write if uh to inlist uh you know return blah blah blah the index of it or whatever wherever it is or not inless we could insert it you know so you can use these with if statements and things like that uh let's see we talked about those already these are again repeats I I I I put two different versions of tutorials together here um and then we'll get into some more methods here when we get to reverse and sort here in the next video uh so I'm going to stop this one here and come right back