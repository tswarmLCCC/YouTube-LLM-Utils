in our continuing series on uh using in different input and output methods uh We've we've moved from talking about displaying uh values to Strings uh uh from strings to the screen and then um the basics of file opening and closing we're going to talk about the methods of the file objects or the file object uh in Python here um where we can just do some slightly different operations um so we are going to U in a lot of cases uh have a file called workfile text uh but we'll have some other ones here um so you might recall that we can do things like um either open a file uh as such where we use the open keyword optionally we can give it a mode uh the default mode is read you might recall uh where we specify this second argument as W uh or r+ uh where we can do it read right um or we can uh or or we can use this with um syntax um and you might recall that the WID syntax basically executes a code block and says this uh this assignment where we create a file uh variable holding the object um from the uh open open uh method so open basically returns a file object and stores it in this case as the file variable that only uh that only exists as long as we're in this code block and then um in this case File gets closed automatically um that's part of the uh the mechanism behind the file object where we didn't have to do file do or f. close or a file. close as we did would do in something like this um so uh just running that we can I'm going to go ahead and fire this off we'll get an example. text that kicks out here um and we'll see that um our our right basically has a right line or um a right uh it just basically shoves characters to the output to demonstrate that a little further I'm going to delete this new line character here um and rerun it let's go Ahad and just save that and again we're going to overwrite our file um because we're not using uh uh the uh the um a option which is for a pin but you'll see here that um our new line character is no longer here so these get these get smashed together and that's because we did not include the new line character in file. write so right basically does that uh explicitly it will but only it basically just shoves the characters right into the into the output stream um in this case a file um we can use that same syntax of course to read the contents of the file and print it out these are kind of the base syntax so if I rerun this now with our um with our I'm just saving it because I made a few changes um if I re rerun this file it's going to recreate it um again that's because uh W by itself is the right syntax and it overwrites files and you'll see here that we're I run this we have uh the new line characters in there um and of course when we open that file up we uh we see those resolved um as new new line characters oops sorry did not mean to generate anything there um so you can um also read in line by line so uh what we see here is we have um uh a for Loop that basically saying four line in file and for every line in the file it will Loop um and we could do an operation in this case it's just printing things out um and doing some um uh you know stripping out some content but we could do more we could do like you know uh like um you know I don't know if you'd want to do something like this where you'd want to maybe uh I don't know say um input right or output is and then we could uh you know just print it out but you'll see here that basically or we could do even something so that that will of course put input uh before each one or we could do multiple lines where we could print like for example we could print a new kind of line we could print you know something uh very specific in there where we could do something like this if we wanted to uh for one reason or another and um because we're inserting that on each new line U we're or we're processing this one line at a time we have that line object but we can do anything we want to before or after that or even process data from that so um that's that's a simple for Loop uh that you can do for line in file uh just a simple operation there um let's see you can do a similar um uh methodology where you do uh a read line explicitly um and it just simply read uh it reads one line at time so I'm just going to put a I'm going to do a similar print statement in here just so we can see the uh differences let me uh get that in there like so um and we can see that we are indeed oh I'm sorry I didn't actually print the thing oh I see it's it's actually done it down here um oh oh well yeah this the way they wrote this one uh or the way I wrote it I should say uh and it reformatted it when I when I slapped it into the notebook it um it it basically uh it it these is variables of course so but we can see that the first line is only reading that first line and then a subsequent call to read line goes to the second line so on and so forth so um it's certainly working um as such um I just uh kind of botched the demo there um hopefully that makes sense um alternatively we can have it read all the lines at once basically the entire file right um those come as a list uh so we could Loop through these then it returns a list and we could deal with list one and list two so we could do all lines of course just one here and see that that is indeed just the SEC if I run the thing there we go uh how I get that back there we go uh so you can see that we're only pulling out one item in there so you get a list of everything uh all the lines as a as a list there if uh if you chose to do that and of course we know it's a list because it's in the bracket syntax that we studied earlier in the course right and and that comma separate value this is of course the um uh just from the last unit that representation print object right where it's representing the list even though it's not giving us necessarily the nicest format out uh let's see oh and then we talked about appending right so uh you know let's see if I can do something a little clever here so we're going to have example. text here this is uh opening it in a different mode right where we are opening it in the append mode um and let's see if I can do something cute like maybe this where we have the file and it yeah oh except that's not what I wanted I wanted work file is what I want there and let's do this so we can hopefully see the thing working oh except I have the wrong file uh let's grab work file here or example I'm sorry I keep grabbing the wrong thing there we go uh so if I delete this let's go and delete it um and when I run this we see that we get one right so uh if I put if I would put W let's go ahead and run this a couple more times so this is appending a new line each time right because we're in this append mode if I change this to W it blows it away right um where if we run it it will start over and every time I run it this time you can see it kind of running there with my little spinny thing um it will uh it will override the file with with whatever you're starting to write there until it's closed um but if I run it with a pend it will start to tack those on so that's how a pend works pretty cool right let's close these down so we can get back to it um and then of course you can read it uh just like we do before this is of course reading everything in the entire file at once and we just spit out the output um so we have a couple different appending to the new lines um and of course if we ran this again and we ran this it this would just get bigger and bigger and bigger um and uh yeah so uh again very simple file read uh nothing nothing too crazy there we're just uh using the file. read as opposed to read lines or or uh or read line uh the read will read everything in there and give you a string back as such um and then we talked about this in the last unit but if you uh if you don't open with the width statement you want to close things explicitly um so you'll notice that if I uh let's see here let's see if I can demo this with just a just a script like y so uh let's save that so I'm gonna run this and you'll see that I can't even get the thing um oh that's not what I wanted the AI kind of I I just wanted file content is all I wanted there sorry there we go so you'll notice that um before close it uh doesn't let me do oh does it oh that's because I'm reading it it's fine to read it um but you want to close it if I was writing it it wouldn't let me do that let's go demo that real quick so you notice I can't even get at it because it's locked um and and then when we not readable that's the unsupported operation and it's because we're not closed here um uh so uh let's uh uh if I actually change this back or if I if I actually try to read it after it's closed that's why um it's uh so basically the short version is make sure that if you're not using the width statement which explicitly closes your file for you that you close it manually with file f. close very important lesson there um okay I think this is a good stopping point for our file operations and then we're going to go into a a different kind of data file called Json here in a bit um and show how we can uh store and and um and retrieve uh data from complex data structures