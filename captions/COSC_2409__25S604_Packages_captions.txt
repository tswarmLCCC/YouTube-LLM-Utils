we have uh one last topic I'd like to cover in the modules unit as we explore the building blocks of python um and that is uh extending the use of modules into packages uh what a package is is essentially a collection of of like-minded modules um th this uh this uh readme is available I rewrote some of this but not much of it uh in the lesson doc folder of this GitHub repository that you'll have access to but this is um kind and a lot of the the example code we've been using in this unit is from the official Python tutorial a linked here at the bottom of this um that I want you to make you aware of we're just actually kind of going to go over this there's way more functionality in building out a whole package that I want to um use uh in in a beginner class like this um but the idea though is that um a package is simply a directory that contains a whole bunch of uh modules and a special uh folder file in there called init.py and what that init.py does is it essentially says all of these are related and uh and you can access them by importing the package as a whole once we import the package um you can basically get at modules in subdirectories so if we have got you know a a directory structure uh called my package and we got module one and module two we can import um different modules just by uh using oops sorry I want to go back to preview mode there um just to make that a little more readable um we can import this with that same dot syntax but instead of the dot syntax uh giving us a a um a uh a function here it's giving us an entire module um and then we can of course do the same thing we did where we e either import uh functions directly or class uh which we'll get to down the road um or we could uh import everything or we can do any of the aliasing and things like that that we've talked about and of course you can do the same thing with subm modules uh where we can use dot dot syntax um so um in the example that they give in that tutorial uh it's yeah I didn't didn't use it here but in the tutorial they talk about you know maybe you're writing um a a project to deal with all the different kinds of audio that are out there so you might have one module that deals with mp3s and another one that deals with wave files and um another one that deals with like a aorus uh you know uh different formats and those all might be in different modules but this might be a sound package sorry I keep jump I keep double clicking that um and basically as long as you put this a nitpy file up front you can you can start to access them as as such you can also do other things with the init.py file you can do things like what we talked about um in the last module where you um you basically expose more name space and add system directories uh and things like that uh you can write that kind of code you can write code that sets up the whole entire module or or parts of it um if you're you know using a structure like this um basically this will always get executed when any of these are executed but often they're just blank files just its presence will let python know that you're dealing with um dealing with modules um and then of course it talks a little bit more about uh um the executable packages this will run a main um a main function from any package uh so if if that's in there and you have essentially that name uh equals main trick that we talked about in several different uh units basically like this when we have this kind of a syntax uh in a module name um and you um and and you run it you could run uh run instead of importing the module you can use this- M syntax and of course this is how we bu build virtual environments um You Might Recall or if you haven't been exposed to it you can um use the VNV built-in module like so and do VV in in instead of um and if I did something like this I would just make a new python environment for me uh in test um like so um this is doing something right this is actually doing something it's actually create I'll show you what it's doing uh real quick oh no I won't because I I don't have it show my uh uh broadcast uh software to set up to show you my directory structure but um well I I can kind of show you here hold on let me go to C like this and do directory you'll see that it made a test folder in here uh yeah it doesn't matter the point being is that um that uh that this Command right here basically said run the executable in V VV so it's looking for that that main uh that main um name and executing a main program of course in there um like we talked about earlier so it's another way to basically use those uh right from the command line uh when normally things are just imported um let's see we talked about that already in namespaces I'd advise you to kind of go over this um uh you know the namespace stuff a little bit uh either here or in the um uh the the python uh uh documentation there but basically it's talking about how these names are resolved when you're talking about local names or something that might be used in um in a a package that you've downloaded um there's some nuances there um that I think are a little beyond the scope of what we're trying to do in this class but they're good to know about once you start moving on um one last thing I did want to talk about though is um this import lib this is a a third part module it's built into or not third party but it's built into python um and if you're rewriting your module a lot you'll it's only loaded once the first time you call a module uh with an import statement it will um be loaded but it won't reload again that's for efficiency sake normally and you might recall that we've talked about this a couple times when you write a module it's supposed to be sit on the shelf and be reused you're not supposed to be updating it all the time if you are updating it all the time you could run essentially this import lib reload uh uh function and uh that as opposed to import you can reload it um and that that will keep you from having to restart python all the time if you ever go down that package or down that path excuse me my goodness um so uh again we're not going to jump into too much of this but it it's a little bit more as we move away from essentially where we started this whole um um this whole uh module uh Journey where we had something like oh goodness something like this or even uh without a function where we had something uh where was the first one I can't even remember now I think it was this one where we went you know from basically writing our menu system in um you know in our file and having to maintain it and reuse it to going to you know something like this where we you know tuck them away um and call them in a main function that were to where we you know we go into something even a little um a little uh you know more concise where we're importing all of our functions um from a a module and just using them and maintaining them of course in you know a separate file and then we went away from even moving those from convoluting our directory into U moving them into a lib folder and the tricks associated with that like we saw here where we need to do um a little little jump through here now of course you don't need to use this uh syntax I I didn't mention that earlier you don't need to use this syntax if you put your module somewhere where python already knows about um there's plenty there's user folders and there's um system folders where you could put your your um your modules uh in packages for that matter into and this is what happens when you download packages and modules from the internet they get imported there automatically from your package manager which we'll talk about when we start to explore some of the external uh modules uh that are available uh to python um towards the end of the class um but the short version is if you just want to make um you know package code that has a separate folder um from your uh from your your current directory you can do it in this way um so uh yeah uh let's see is there anything else I wanted to talk about there oh yeah one thing um so if you uh if you don't want to use a source structure let's let's pretend we just want a new folder here let's just do a quick one right um the only reason I needed to do that at all I can do import uh we can do import li. Fibonacci here we can do this and do FIB I think it was FIB 2 right 500 I think that's the one that printed uh that's F so uh let's let's go and run that uh let's do oh I know what I did there this should run yeah so actually we wanted FIB one FIB one is the one that printed um uh I I did kind of skip over not FIB one just FIB silly remember what you named it yep so the uh the difference between this and putting in source is uh Source has a a nice way to tuck away a lot of files um but if you're just running them from your route and you're going down directories you can use this do syntax in them I didn't talk about that earlier um and I should have uh uh when we were talking about accessing those um so if if you're if you want to run your main main programs from your root or a a a folder uh you know um above where you can just go down into it um you cannot do this this is the problem you can't do this where I do something like dot dot or even like dot dot like this this doesn't work I unfortunately where I go back um a directory and then then go in but you can certainly do it this way so hopefully that's useful all right I think that's everything for my notes um I'll probably I don't know add something to this because this is actually the more common use case than what I did but um um anyway uh yep I think we'll end her here thanks