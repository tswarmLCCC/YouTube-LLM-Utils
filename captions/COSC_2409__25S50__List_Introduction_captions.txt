welcome back to our um exploration of the Python Basics um we're moving on uh with this video from functions if they're in continue in the same sequence that we've been using to lists um we've seen lists of course uh in the introduction and certainly in other classes uh before 2409 here but um uh this unit we're going to explore uh some of the uh methods and Natures of lists as well as um you know some of the more extended us usages uh that uh perhaps you haven't seen before I'm going to change my window here just a bit to fit our video sorry I developed it a little bit bigger and let's close this we won't need it for what we're doing um so uh the first thing to start off with and this is a bit of a not a very good introduction frankly but kind of a big concept is a list is an object of the type iterable um you've probably heard me talk about that a little bit but let's talk about what that means um basically in object-oriented programming we can Define essentially blueprints for data types and the list is just like this as are almost everything in Python these are extensions of building blocks that make things convenient um you know uh for example in um in C++ or C or any um or even Java um we don't get these functions like append and delete and index immediately out of the gate we have to build those ourselves or some you build some for us um that's one thing python did because as as we all know it's a bit of a more modern programming language than some of those other languages and as such um it does a couple things for us for free which are really nice um in modern Computing the chief among them is of course that they are Dynamic you can add and delete and um have mixed types all of all all this in in the in the uh list data structure um they do this by essentially um building up to and then extending the iterable uh class in Python um which what that means in in practice is that any uh um an iterable object is any class or any object that uh implements or has an iter method uh which returns an iterator and a get item method which um basically lets the indexing happen um so what's that mean here right well we can iterate through these things and that's why the for Loop works the way it does um that's what iter does behind the scenes is every time this happens um this list will call its iter method and it'll go to the next item and then it will use its get item method to of course return the item that it's uh it'll first use get item and then iterate on my list and we see the the functions that we or the methodology that we've all come to know and love you know where we can use four and things like that so that's what an iterable is and we'll see it in other aspects of the class but I thought I'd cover that up front and get that out of the way since I've been talking about it a little bit Without Really defining it um so uh moving on from that um let's uh let's jump right into list Basics and of course all of this uh all of the this code will um will be available in the in the GitHub and you can play with these notebooks as well if you'd like to change and things like that um a list is uh you know um a pretty much uh uh an extension of an array um from other languages except that they can hold mixed types um in this case we can um we can see that this list um just has the numbers one through uh one through five um which are all integers in this case but we they don't have to be we can change one to a float we'll see that we get different types and we could even change these to different uh to a string if we want so we could say like this just to be very blatantly obvious about it um in the in this way we could store uh any number of uh different types of things in a list including other lists so um or objects or anything like that they don't even have to be primitive types um uh they uh they're basically a way to group data together um usually related data although in this case not very related right um and be able to iterate over those just like we were just talking about um a lists have an order to them basically it will know the order that this comes before this this has the index of zero this has the index of one which we'll see in just a bit um they're changeable uh or mutable um so you can change items uh we can do things like index uh two equals you know in this case the word three and we'll see that in just a bit you can do that or you can't do that in some other data types um and they and you can have duplicate values in there um not a lot to say about them we've seen these before but just some definitions there that uh that uh you know we haven't quite covered yet oh looks like I jumped ahead of myself but you can certainly have mixed there so actually I'm going to undo my list here for the notebook and we'll get it back to normal that's funny sorry I forgot I wrote that oopsie um so there's uh different ways to create lists you can create an empty list just using our bracket notation the bracket notation of course um is a Constructor for a list um but um often you'll see lists just created with those uh directly um we could also use the list uh defined Constructor which is the name list list with a parentheses and give it a sequence like so um so this would be an empty list of course and then we'll see the constructed list give us you know um a similar way or we can use our uh our bracket syntax within this um so certainly this would work like we've been seeing excuse me um but you know be because this is referencing an empty list I'll change that back just to save the file that way um and then we get into into some cool ideas uh uh one we'll cover in quite a bit um uh quite a bit of um uh uh detail here in in in a future unit probably the next one maybe um where list comprehensions but you can use uh some repeated elements and there's some other things like that uh but we can take a list and you can multiply it or you can add them together um I didn't really do that but you can certainly do this where we get five zeros or you can do um uh let's go ahead and extend this one just a bit let me make a new code block here and we could do something like this too where we could do list uh or uh repeated list so so we wanted five zeros say we wanted to add a new element to it uh we could do it or elements we could even do something like like this uh where we'd get um those added together um uh by using the addition operator those are overloaded operators there's other ways to do this with functions uh or methods that we'll see in just a bit part of the list class but that that's uh some shorthand that you may see this one's in particular is Handy um you can create a lot of different lists or you could even do things like this where we could do like this uh you know I'm not going to go into that but you could make lists within lists doing this way it's a good way to set things up ahead of time if you need to um but list comprehensions are almost always a better way to do that so just to give a preview of list comprehensions um what this is basically doing is it's a for list a for Loop creating a list out of it so basically um it's it's uh 4X in the range it's basically uh returning that to a list so in this case we get zero through nine here we're going to cover those in a lot more in just a bit but you can use essentially four Loops um uh as opposed to uh some of the other uh while Loops um or or for Loops um you know around a list and creating them one at a time um we'll see a lot of a lot I'm not going to jump into those we're going to probably have our own unit on that let's see where we at on time um you know what I'm going to actually stop here uh we'll get into list methods next uh as you can see but this is a good introductory unit uh to that and then we'll jump right into uh some of the methods that lists give us um including some of their features