welcome back to our continuing study of the various options we have in Python to study data structures uh we're doing this as a um an ongoing series uh in the beginning of our 249 class or other python classes if I choose to reuse these uh covering um essentially the essential building blocks of python the entry the not entry level stuff some of this is kind of advanced but the stuff that's built into python that's always there um that's been uh um essentially added to python um and some of these features are things um that are not present in in more um traditional programming languages like C++ or Java that you uh that are just there for free in in Python what I mean by that is basically in other programming languages to do some of the things that we'll see here today you have to build them or import them um directly from either um standard libraries or build them yourself um in the case of of some of these dynamic memory um dynamic memory structures uh that that um are given to us essentially for free in Python which is one of the main reasons people use Python um we've we've been studying uh lists uh for a while but there's there's a couple other versions of these things uh that are that are uh very handy to use um and one is called a tupple or a tuple I usually say tupple I don't know which one is correct but what they are are basically um a series of of um of values that um instead of being mutable and accessible and changeable like lists are these are immutable um and as such they're handy for um uh moving uh things in and out of functions for example um they uh they're a little bit faster uh because as you um uh they um they uh they they basically are stored in memory and and um are a little bit more permanent sorry I kind of got off track there in my head um but we have some common things that are true in both lists so we can build up on those where they're index they're um herous uh where we can have mixed types um and uh and they're ordered um they have an order to them uh much like list but uh in contrast to list they are immutable once they're created you can't modify them um you can overwrite them though I should say I shouldn't so you can basically replace a named tupal with another one but you can't for example update individual indexes with it and we'll see that in a bit um why do we even use these things well um the first one is data Integrity they're they're um they they are often used to store data that that shouldn't be changed um like latitude and longitude are good examples of this sometimes names are right um uh things like that or sometimes keys that are you're using to access data um uh the the big one that I've seen um and you'll see them more common than not is when we um return multiple values especially from functions we'll end on an example of that in this lecture um and then of course grouping like data um uh latitude and longitude I mentioned uh the color spaces like you know RGB uh are great examples of that um you know sometimes parts of an address uh parts of a name anything you can think of that kind of goes together you can think of these as light objects in that way um or or structures from C++ if you haven't do have studied that before um but uh there's a lot of reasons to use these that aren't great for lists um they could be done with list of course uh but uh or you could do them natively but uh these are built in so let's get right into the structure the first thing that you need to know about a tuple is that they use a different syntax than list they use parentheses um uh so you can create an empty one just like you can with an open and close bracket in a list you can create an empty tupal with an open and close bracket here so we can see that and we'll get that back out and as a matter of fact the print function of a tupal much like lists will will will will show that you're dealing with the tual because they have the parentheses um you can um create single value uh tuples um I believe that you do need the comma here let's let's try it without I think this will just give it yep so a single value this would evaluate to essentially an integer um because it's it's actually using the math operations here to say hey uh this is a math operation and it's uh it's basically a math set of parenthesis as opposed to a tuple but if you include the comma here then we get a tuple out that's why you'll see the difference changes here uh multiple uh values though are of course the bread and butter of these things and you can initialize those much like you can with a list with literal values um going uh you know just in sequence um and these are iterables just like um a a list is in this case it's just an immutable iterable um but you can see that we can create those just like so um it turns out that the comma is is a reserved uh you know uh value in Python and you can actually create um the the the outermost Tuple that you do because you can Nest these things um just like we could with list you can create a a tuple like this without the outer parentheses you can also do something like this if you wanted to uh I think this will work so if we did something like this I think we'll get that one tupal within the larger tupal uh yep just like that so you can see the tupal within the the more you know so we have a nested one here uh so you can you can combine those as well if you want to um I don't know why you would do that but I I almost always start the I'm sorry uh where did my code go the comeb back code there we go I almost always do this though I almost always put the parentheses around these things when I use them or put variables within here um because uh you can actually also do this where let's say IAL 3 and I could put I in here as well now the thing about that though let's go ahead and demonstrate that just for a sec um so we can see that three did inde get put in here and translated but you could not update this um after the fact we'll see that in just a bit so don't mistake the fact that we can do this to create the thing um uh to mean that we can we can change these later uh cuz that that's not the case at all but that's not the point of where we're at in this and I don't want to mess up my notebook for you guys so um I'm going to undo the codes there but uh just just a bit there um you can create a list from a tupal so you might recognize that this is a list and of course we could pull it out into its own variable um and you can see that it will convert that it's doing this because the Constructor for a tupal um The Constructor being that it takes an argument um of a list it knows how to do that behind the scenes but um it is an option for you um you can also do it from a string um so when you do it from a string it will break out each letter into a tupal and as a matter of fact this is how a lot of the indexing Works behind the scenes four strings it converts into a tupal in this case and you can index them as such um so just some options there um we have a few element a few common uh um patterns excuse me that we've studied uh you know what actually I'm going to break break here I'm going to try to break this up into two two videos of about this length uh before I jump into here um uh now that we've gone through the introduction and I'll come right back