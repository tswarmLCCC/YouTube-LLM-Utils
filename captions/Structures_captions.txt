wanted to go over um a short topic for this week um won't add a lot to what you'll read and do um but uh just wanted to cover a few key points this week uh about the topic of structures it's really getting into our first um kind of foray into abstraction with C++ very important topic in computer science um and we're going to spend two weeks on it probably um at least that in in the current format of the class um in the first week uh it'll be in the um oh guide guided learning containers unit in zybooks if we're if we're using that resource still um and it's down here in this uh containers Unit 14 and then down here again in 16 and really the ones to pay attention to go and go through the full thing but really what I wanted to uh highlight for the the the reading for this particular unit is the the 1611 to 1613 uh starting with the struct keyword um the text is a little general here though so I did want to cover a few other things that that that might not be immediately apparent about the use of structures and why they're they they can be very very useful so um got a few things in repl here that uh that that I've was um you know provided along with the assignment for the week and these These are available to you as well um in the in the in your in your student replate so you can take a look at them um the idea of a structure uh uh is to basically start to what we call encapsulate data into a new data type so um we use the struct keyword here to do such a thing and we're making actually a new data type called student um and it includes a couple different integers and even a function um they can include both uh both member functions and different uh different bits of data these happen to be three integers but they can include um uh strings and characters as well even even pointers if you really wanted to so the idea here is that we uh basically have a lot of things that are related to a student in this case we have um the uh the um the the RO the roll call um their age and um their marks their grades this is just an example that I wrote very quickly and then we got a very simple function that just prints them out um if you're familiar with object-oriented programming if you covered that in another language or even if you got into that in the the previous vers the previous course in this sequence this is kind of the beginnings as you might recognize uh of objectoriented programming which we'll get into in a couple weeks um but here we we we contain these these three um these three uh variables in one type and we can set them so we make a a new type just like we do uh with any type so instead of using for example the keyword int or car uh we use student because that's what we called this thing it's it's the new data type and we're calling this student s um and then we can assign it using What's called the member membership notation it's this Dot and we could access each one of these individually and set variables uh set values to these things and then lastly we can print out the details of of the thing using using our supplied function um this this one happens to be a void function where it doesn't return anything it actually just prints things out to the output um uh um that you might recall from from uh 10:30 for example so if we run this um again this is I'm going to click clear out our our shell here um and and you might recall this trick right where we we uh we run GCC right the compiler command or GP g++ sorry and then we'll want to because it's not our main uh program and we've got multiple ones in here we'll want to give it the name so just simple structure like so and by default it's going to create an a do out that'll be the default one uh oops uh what did I do here oh I don't want the it's a system okay there we go so it's actually going to recreate a do out here so if I deleted this if I deleted this guy it's the object file yep that could go we'll see it come back and then we can run that to to to to uh give us our output like so and all it's doing is just kind of regurgitating what we gave it with its print function here so that's a really nice way to encapsulate some things into you know um you know kind of a bite-size uh piece of code um it gets really powerful though when you you start to put these things into arrays and things like that or even um some of the the looping mechanics where uh you can fill in the data as you Loop through say a file or a database right um another example though of that is let's see is is here in this this employee this payroll uh structure that that we have here um you can basically do the same thing here we where we give it an order of the things where we've got an employee number a name a pay rate hours and pay but here instead we've structured the thing to um to basically accept things in that order right and and they just do it uh in the order they get it so um what we what we've done here is it'll it'll fill them in an order and you can almost take these in as a data file and that's actually one of their first uses so if you had you know a file coming in with like employee number D and pay rate um and then you wanted to add ours hours are gross you could Loop through the file then and use this structure to use this kind of shorthand to load those variables in there or do it by hand so if we wanted to add a new one it becomes very easy to do that right we could just copy and paste this and um and make a new employee let's call this you know 101 and we'll call oops 101 because it's an integer we'll call this Trev swarm and we could make his pay a little less because he's doing a bad job explaining these things for you guys like so and then we we can we can just work through those um and then we can also do the same thing where we access these things where we can ask for the uh the hours that employee one worked and get it out same same thing there and we could start to do multiplication and any other things now just like before right we could add a member function to do this calculation for us at that point though I'd probably argue that it's better to kind of get into classes and objects uh which we'll cover in a more a few more weeks but you can certainly do that and uh the rest of this program just kind of prints that stuff out so that's kind of it in a nutshell of what I wanted to cover this week uh next week we're going to get into vectors um and a few other things uh but they can use these as well so if we wanted to add things dynamically um we have a built-in way in C++ to do that with vectors and then down the road we'll we'll actually build the thing from scratch where we allocate memory on the Fly and do the same thing so just a bit on vectors that the book doesn't quite covered a few use cases there um let me know if you have any questions