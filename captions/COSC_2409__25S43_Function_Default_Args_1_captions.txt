welcome back to our python lecture series uh where we're digging into essentially the nuts and bolts of some of the uh core components of python um in this series of lectures we're talking about uh python functions um and in this video we're going to start talking about how functions use their arguments um and keywords um let me figure out why that's not there we go that's better um so uh the idea with this is we can basically make um veral modes of functions or let functions um work in different ways by the way we we set up their signature this uh this this top part here um of a function is called a signature it's basically the name that python knows about that when we call this thing later as we've seen in previous videos it will know what to do and come here and and run some code um it turns out that we can uh do uh uh in uh we we can actually give default values to these things which opens up a door um that uh that uh can be quite quite useful um in in this case we can um I'm I'm struggling to kind of give the the use case ahead of the the car here but the short version is what this code will do is uh it'll Define a function with a name and a greeting variable this this is the this is the actual the second argument it's called greating um but you'll notice we only have one one um argument in this case the name pass to this well what's going on there what we're doing is passing what's called a default argument to it so you notice greeting is meth missing here but we give it greeting and it's used as such in here so when we run the first one you'll see that it's saying hello Alice where the greeting is being pulled from the default value and that's done with the equal sign here the equal sign here is assigning that default value of greeting but you'll see in the second example we're overwriting that we're overwriting the greeting uh to say hi and that's why it says High Bob instead of hello it's grabbing this from here and plugging it in and that's why we get high Bob there and you notice they're not even in the same order as we use them because they're just variables they just get plugged in uh you know when they're passed as arguments to the parameter list that we give our function they get plugged in and and used appropriately there and you might recall that these only exist here um right they use these names U you notice there's no not even variable names here these are constants that get plugged into these values um the uh so hopefully that that uh by itself uh can kind of show you how useful these can be you can do things like this by the way where you can do name equal and greeing equal like so just just to um in this case um this um this uh will basically be used just for documentation you'll see that this code still works but if I did something like this let's go ahead and copy this I'm just going to make it down here um if I did something like this if I flipped these like so um I don't think this runs uh oh it does it does so it it works because I've given it the names here um but th those positions do matter eventually um uh and the the way they work is basically they take them in order so if I did something like this if I did something like hi and Bob like you might want to read it that way right that that kind of makes sense that I would want to write it that way even though the greed in a second you'll see now that we get we'll get Bob high right because it's thinking that Bob is the uh the you know the uh the first thing that it should print because it thinks that that's the greeting so if you're mapping this they go in order so the name here becomes high right because it's the first parameter um and Bob becomes the grading uh even though there's default value now of course if I took Bob off like we just saw just to kind of reiterate the previous Point we' see hello hi which hopefully drives that home a little bit more um now uh going back though you can see that when I give it the actual if I point it in the right direction by giving it the parameter names up front you can map those in and uh and it will work correctly um so you can either rely on positions or you could name them in any any order but uh it turns out that there's even even cooler ways to do that um here's a more complex example though just to uh kind of talk about why we might want to do that um where we uh uh where did I did I forget the code here it looks like I did where did oh goodness I lost my code here let's um I'll pull this out real quick hold on let me just add a code block here let's do sorry about that I put it in the um let's do that and then we'll do code here and we'll do this and we'll do sorry about that I hate to I hate to edit in front of you guys like this but um this won't take too long and then one more so the cool thing about this uh design pattern is you can see we get basically a whole bunch of different uh different kinds of of functions we can give it one two three or four right and the positions do matter of course just like we showed uh did I grab the wrong one let's see one two it looks like okay there's only three of them let's just delete this one let's just delete this guy so um if we run this the first one will take do you really want to quit is the uh prompt right so we're mapping the first argument um and then it will Loop through the number of tries right and if let's go and run this right we run this uh and I think we can do yeah so it's it's waiting for input here unfortunately in our uh notebook here so uh I'm not even sure how I can do that I don't know if I can um there's a python input thing uh I'm gonna go ahead and just just stop this though uh let's see um how do I stop I just want you to stop there we go um let's see looks like that worked uh where where was I sorry it jumped around on me a little bit uh there we go that's what I want stop stop stop stop I might have to kill it uh sometimes that doesn't work uh yeah sorry about that let me uh let me restart the uh yeah restart there we go it it finally timed out on me um the short version though and I won't run it again here this would have worked of course it's it's asking for input that's why um where we're we're tast doing um we're uh doing this input that's what it was looking for and I I did not have it set up properly to handle that in the python notebook uh but the short version is it prompts for this right so we give it that um but it does the number of retries are are set and the the reminder is set right um up front so uh and uh the other thing that you might might not have seen before is this in operator here uh which I talk about down here uh where it's basically using different versions of the input handy for a menu system it's saying you know if you've read okay um and it's in y yes or or ye or yes um same thing here uh it will uh do it will execute this block for all of these um and now uh basically if you get either of these or these it's going to return true or false which is the whole point of the thing it's basically just encapsulating and abstracting away um an Ask okay prompt that I could just literally say ask okay um with um a uh you know an input argument and it will return true or false so I could do something like this if I wanted to I won't run this for obvious reasons but I could do this right this would work um because this is returning a Boolean value true or false I can just write w wrap around an if statement so instead of all this logic right I could absolutely done something like this I could Absolut oops I could absolutely have done something like this if I wanted to uh but goodness what a what a pain that would be right or I could have set it up where I read that up ahead this is all encapsulated away and just works um and it turns out I can even add multiple functions multiple modes to this where I'm um instead instead of four retries right this will Loop through until um it returns or eventually it will it will give an error right um and the number of times it Loops through is set up four but I can say I can override that with two so if I use this version I get four but if I want to override that I can say two and again that's just by using the next uh next parameter um and then finally I can actually change the reminder uh when um that's printed out when um when I Loop through here if I haven't returned by then it's basically say please try again but I could overwrite that as well right um so that's probably a decent place to stop for now um and I'll break this into two videos uh the reason being is we're going to get into even more advanced function naming parameters and things like that uh and I'll continue on with that in the same notebook here in the next video so um I'll stop this one here and pick right back up with essentially a part two about um default arguments and naming uh variables in in functions