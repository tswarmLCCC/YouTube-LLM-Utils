in this unit we are going to start to expand some of the ideas around general computing and and talk about variables um a little bit more about memory management uh but uh with a specific regard we're going to talk about data types and and how different kinds of information get stored in memory and processed um with a lot of applications in mathematical operations this week um and in these units and then we'll talk a little bit about strings and uh some strategies for working through larger programs or or debugging or incremental development here in a bit um so uh hopefully we'll get keep these very short um and and get into some applied work but uh anyway we'll see how that goes uh sometimes these things get a little long as I get into them we'll see how it goes um so we're expanding what we talked about previously where we started to talk about um different kinds of input and output and things like that and we're going to get into this concept of Expressions this week um in this case we're going to talk about mathematical Expressions uh but there's a natural uh carryover into a very a very near future unit of of uh Boolean Expressions how we control uh loops and things like that um which we've seen before in previous classes but um we'll we'll study them a little more in depth here in the coming weeks as well um let's see here let's just uh let's just keep going here and so the main thing that I really wanted to start with is really nailing down what happens when we create a variable um a variable is um a variable is basically a name that we give uh to essentially a reference to a memory location um so on on a chip you know there's there's room for uh ones and zeros that become you know uh bits uh so a bit is a one or a zero a bite is eight of those ones or zeros usually um and then uh it goes up from there uh and we use those ones and zeros to start counting you know zero and one and then with two bits we can count two and three um and so on and so forth uh and we we basically get um ENT let's let's call it for practical purposes an infinite amount of numbers well what we could do with those numbers is we of course can use them as numbers um and as we learned in a previous unit we can also use those as instructions we can represent certain operations um by uh saying this this specific series of ones and zeros means to for example add something or subtract something or call a user function um we can also call certain sets of of ones and zeros uh and say this represents a letter or a a bunch of those can be uh put together in what's called a string to represent words and things like that um and and hence we can start to build about anything we want um we can start to represent sentences and and languages and things like that uh we can encode emojis in in the same way we can even start to uh encode images and text in in in different versions of encoding ones and zeros um so what we do when we create uh when we want to use these things is we basically create a place for them in memory that has enough room to store those ones and zeros and we give it a name um and that name is a userfriendly name um you know like first name or user age in this case um and it it basically takes what's called a data type A type uh of data that goes in there and we need to give this to most programming languages because that's that tells the environment how much room to grab um for example a very simple integer could be represented with eight bits uh and uh that that would hold a very large number uh you know two two to the eth in this case um or uh and you know a bite um and we can keep going and basically every time you go up with one more bit as you might imagine in a base 2 uh environment you get the capability for a doubly large number so as we go from you know 0 to one uh and then we add another bit we get we can double that space and we can have room for two or three and then we can go uh from uh 2 to 3 to 3 to 8 uh or 4 to 8 and then uh 7 to 16 so on and so forth um they basically they just we get exponentially High every time every time we add one more bit we can double the amount of numbers we can store and we give it a name and we give it some predefined types uh so when we talk about numbers we're either talking about an integer which is a a whole number um and that can be a positive or A negative one although there's variance where we can make them unsigned um and and make them you know only go on the one side of zero or we can create what are called floating Point types which hold decimal points and those are useful for money and fractions and things like that and then as we talked about we can also create character types um and those are the big three that you'll see built into to C++ uh but we can extend those with libraries as we'll see in just a bit too um the only other thing that I'd like to cover on this slide is other than giving it a name and a type uh we can use What's called the assignment operator actually I'll go to the next slide because I talk about a little bit more there um in this case we're doing a couple allocations um where we create um essentially um and this is from last week's uh slide deck if if you recognize it um we create in in the first one first example a variable called first name and we tell it it's a string now um the reason it says STD colon colon string is because string is not a built-in data type we have to import that uh import the capability to do that uh it's IO string you'll see it in almost every C Plus+ program you write um uh the uh the directive pound import IO string um and but that's that's how we get that and then the STD is the standard template uh Library uh and it's just giving us access so it's it comes with C++ but it's not directly built into it um in the modern libraries the second the second example here um gives us the idea of of building a number um and what's Happening Here is we're giving it an expression actually all of these give us Expressions the first one with my name Trev there is is a what's called a literal string expression and those again should be double quotes I'm going to actually change that right now it's kind of driving me nuts uh I kind of made that mistake when I built the slide um actually I think what I did is actually copied it from Python and altered it but they they do need to be double quotes um so I'm just going to save that and then start back up here there we go um and what happens it takes a literal string and builds it in memory um and that's called an expression um an expression is something that happens and is executed and reduced down to one value the Expressions always reduced down to one value um or well most of the time but for for this entire class you can an expression evaluates down to one one value and then it assigns it to to the variable that was declared on the left that's what the equal sign does it takes the thing on the right and assigns it to the left left the same thing happens with the number one it takes two and seven again these are lital literal constants that get created in memory real quick um and then they they are added with an addition operator in this case and stored to the number on the left um that that right to left thing is important to remember you can't with very few exceptions assign things to the right and when they do it's usually with a streaming operator like C CN does that um but U when you're using the equal sign the assignment operator um it's all always from the right to the left um and then La lastly I wanted to at least uh one more example I wanted to show you that you can use other variables in Expressions so in this case we're taking the age variable um that that would have been existing before we call this line it would have to be there and have some value in it it can't be nothing um or you'll see a null pointer error which you'll see a lot in your programming uh Adventures um and it's basically doing the the the subtraction operator the negative sign there and subtracting 21 and assigning that to the left um so again it's reducing these things down with standard pmest type of uh mathematical operations and going from the right to the left um the one thing that I'd like to also talk about here I guess is when you do a mathematical operation and the value ends up being outside of that space we talked about earlier um uh that uh the memory allocated for for example an integer or something like that um and you make it too big you're going to get a a a an overflow error it's usually a runtime error an error that doesn't happen when you compile it but an error that happens when you run the thing and uh you basically say this is bigger than what I've allocated for you uh try to jam it in there and it just won't do it it won't do it so you have to do some other operation or use a bigger data type and all those data types are uh there's double and and uh long and things like that I'm sorry long and and double long um and those are outlined in your book you can really care get some humongous numbers usually it's not a a problem but if you get around the two billion Mark you need to start thinking about using a larger variable um that uh and just instead of you use one of the other ones from the book let's see um like I've been talking about Expressions um are uh items or combination of items that are evaluated to a single value um and they they can be uh variables they can be literals so you like we when we saw for example 21 in the third line and 2+ 7 and Trev those are literal values that we're giving to the program um they they uh and then they're evaluated down to a single value you see this often in while loops and for loops and if Loops uh with Boolean values where we take a lot of Boolean operators like greater than or less than uh not uh you know the equal the equality operator equal equal and uh evaluate to true false as well so we we do all that work and we evaluate it to a true false value as well but uh math can be done the same way so const strings strings can be operated on and put together with different operations and functions as well um the one thing that you probably have seen somewhere in other languages is this idea of a compound operator uh where um we use um the uh the plus the the plus equals or minus equals or things like that so for example in our uh down on that last line there user age plus equal one basically just takes user age adds one to it as you can see right here and and assigns it back so this this is this is equivalent to that you just don't have to type user AG twice here and you could put two here you could put a variable here anything like that this is just shorthand but so if you see something like this it's basically shorthand for this but it's still um uh the the the the thing that's being omitted is the the variable on the right this is common we we increment things all the time we use them in loops and things like that ages um but if you see that kind of syntax uh and here's some more examples modulo and things like that um those are pretty good examples that that's what's going on there uh let's see is this a good breako let's see what's next oh nope I want to go through this as well um we can go through well let me see where we're at here I think I do want to stop here let's see I think we're going to go into division floating Point numbers yeah this is a good place to stop this video um I'm going to stop with this idea of Expressions here um and then what we're going to do is get into some of more the common mathematical operators in the next video uh or in the Sister video to this um and we'll see how that goes uh next so uh look forward to that one as well it they'll probably be in the same unit most of the time um but if not you can certainly grab this slide deck from me all right talk to you in that one bye