moving back and building Upon Our comparison from the while loop and the for Loop one thing you might miss from the while loop is that ability to actually have access to the index right what if you actually wanted to know like okay I only want like the top five things it'd be really handy to have that I uh or the the current index operation well it turns out that you could do that in a for Loop quite well using the range uh function um the it's a built-in function to to um to Python and it basically will build a range of um of uh of numbers between um well there's a lot of different versions it's it will build uh well I'll just go over them this first version where it just takes a number goes from zero until the number right so here we see 0 1 2 3 4 and of course it stops at five it's basically giving us a range of five things and starting at zero that would end at four you can override that to start at a different number which is what's happening here um so this will give us the range from five till nine it's the same deal where it's basically saying given us give us everything between five and 10 um uh uh starting at five um the the uh end point is never part of the generated sequence is the short version of what I'm trying to show you there you can also use uh ranges uh to go over things like um uh or I'm sorry not go over things it can do every third or fifth or whatever you want you um it doesn't have to go by one so the default uh argument here and we'll cover default arguments more in functions but just know that um Range basically takes default of zero has an end point here and then um has a increment by or a step operator that um in in all of these um and you can overwrite each one this will give you basically every third item instead of every first item so you could rewrite this one or even this one um to uh to do something like this if you wanted to where it would this basically goes over each one by one uh where this one goes and it this one give will give you every third item uh which is super uh super useful in a lot of different ways as well um uh let's see what's the other thing I wanted to cover here um you can even go backwards using this so I could go from -10 to a 100 by 30 right um and these create what are called iterables um it basically uh uh um will create things uh that have indexes themselves one thing to note though uh I I just want sorry I'm stuttering because there's about four things I want to say right now um the range uh it looks like when we do things like uh well especially this it looks like what it wants to give us back is a list this this is not a list um you can convert an iterable to a list but I want to show you just a little difference here when I just do the inner part you'll see how we get range here this is an object of type range and um what I mean by that is it's actually a data type that knows a lot about what it's trying to do more than just the list that it's giving you back uh but it it also knows how to convert to a list so if you give the list op uh conversion uh an iterable or or the range uh output here it will of course uh you know convert it to a list that you can do things uh that are that are quite nice um so uh what's the point of all this right well um I'm not going to go too too far into all this but uh you know in our previous example we didn't have access to which which item we were on and that can be quite useful even if you wanted to do a nice print so in this case uh oops I did the same thing I've been doing where I need to up just a little bit more on this come on give me a sec just to do the there we go too many useful things um do you see here then uh where I've got I in range right so I can get the the index in here it's basically saying instead of giving me the object itself give me the uh give me each of these iter iterables um the the uh the thing we're iterating on I'm sorry I studed over that word um and uh just like what we did before just a slightly different and then I can I can grab that index um independently this is super useful um uh if you're doing things like uh sequencing and you want to affect different parts of your list so say you needed to do a rolling sum you need to know where you are but also the next one right so then you could you could do something like that let me let me try to write that real quick because it might be a nice example for this so let's do instead of let's do uh um let's just do zero let's just do a simple and again we could use range for this couldn't we one two 3 four well two three four right um what I can do here is i instead of let's not print this out I'm not that interested in that um although I will print the current let's let's just print as subi here as ofi uh which is uh we're getting the um now I I is you know which index we're in and we're we're grabbing the the version of that let's just demo that real quick just just to show that we're we're just printing out a bunch of numbers but the the way I can do this now or what I can do is I can also print um let's say I need to do let's well let's just do a rolling total uh let's make a uh rolling sum equals zero and then what I can do here is I can say uh well that I don't even need to do that let's say I was only interested in printing out let's get rid of this um sorry my example off the top of my head wasn't a good one uh let's say I was only interested in uh printing um the two the value I'm on and the value the next value well um I could do this and then I could do A+ one couldn't I um and I could only do that because I have access to this index so let's go and do that let let's actually do it in one statement so they're all on so the the the printing's a little bit bit nicer uh let's see make sure I didn't break that anywhere looks like I just need to delete this and we should be fine so what this is doing is it's putting the current value and then the value right after it like so why is that oh it's because I ran out I I actually ran the the list off its end um so we just need to do this um if uh yep just like that is exactly what we need to do uh we need to test to make sure we're not on position four because there or I'm sorry position five um on item four uh because there is no item five so when I tried to access that it it that's why it threw me that error but we'll see here that I can get access to the next one right you have to be careful of what you're doing there um and I can do that because I have access to the index but I'm still using a for Loop um uh and you can get at that with the range function um or and you can do a lot of other things with range as well very useful design pattern um just another one to keep in your back pocket like oh yeah I I remember that I can I can use for Loops for almost everything in collections but um and but there is a way to get at the individual uh indexes and access them if I need need to for some reason which it turns out you will um there there's a lot of reasons to do this uh so uh hopefully that wasn't too convoluted and I'm sorry about the bad example there I kind of want wanted to show another example besides this uh kind of botch that one up making up examples while you're lecturing don't recommend it I tend to do it a lot though okay moving on thanks bye