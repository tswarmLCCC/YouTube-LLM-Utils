all right coming right back um let's let's try to break this down I'll start with the code we had and we'll expand that uh in in uh into a little bit but um like I said earlier we Define functions using this defa uh deaf keyword um and basically that's telling me the thing that is going to follow is a function um I can take uh this next thing in parentheses is called um an u a parameter for a function so when you're defining it uh it's called a parameter when you're using it it's called a um a uh a um or I'm sorry you you you define it with parameters um and and then you um you run them uh with um uh by passing a value to that parameter so n does not uh ex uh is the only thing that comes into this um the next thing that follows is just a simple comment you can put those anywhere at the end of the lines nothing special about this and this is not required um this next one is kind of interesting it's another comment um if if you follow it uh your function name uh right after uh right after your function name on the first indent um you can generate what's called a doc doc string and you can basically give it a comment that uh describes what your function does and how to use it this can be multiple lines um I could I could easily add a new line to this um do something like this uh let's do 5,000 right um or and I can even uh end this on a new line this is all valid you can do things like this um but basically if as long as you're starting this thing on a line right after your function um you can you can write write a doc string here um it's a good habit to get into for both readability because it's right there but also there's Tools in Python that can pick these things up and write documentation for you so if you use this format um down the road uh and you have to write a lot of documentation uh you can point these tools at your file and as long as it's set up correctly it will harvest those and set those up correctly uh then we have blocks of code and again these are indented um this is just standard python code no need to go back into this um and then while Loops or any other control structures they get their own indents of course you can use nested things uh and and things like that um the last thing uh so uh this one's a print statement it's called basically a void statement or a headless statement um and what what that does is basically doing things on the side in this case printing but we can also do things where we can return values um so just just to put a bow on where we're at right now I can run this and then when I call this um when I when I pass the arguments to the parameters that's the word I was trying to find earlier these are arguments when you pass a value to the function and they fill in the place of the parameters um we'll cover that in the next unit or or maybe in two or not next video or two you can actually do a lot with these where you give default values multiple ones of these and things like that um but then when I I I can run this function and basically take its um uh take the value I passed to it and and it'll do its thing um so uh like I like I said earlier these things take these things uh take start off with the deaf keyword um followed by the name just a bit of explanation I left in here in the code for you everything I just lectured on it's important to know though um that these variables I mentioned it in the first video A and B in in this case um do not exist outside this function you can't call them outside this function um they're called local variables um and there's layers to this thing so and and this is actually a good thing there's um there's some uh tricks that you'll learn as we go um on how to get information in out of these things but um basically these things uh keep your keep your name space clean I can use a and b in other functions or even in my Global workspace because they don't exist there they only exist while um using it here so you don't have to get too creative with your names you can keep your names uh pertinent to what you're doing um and things like that but it's important to know that those only exist here so when you define a function and and and Python's looking for them it first looks in the local simple table that means it's looking within the functions table um and then it's then it looks um are there functions that are calling this function basically if I passed anything else around or things like that um and then it will look um basically for Global variables which um uh again we haven't really talked about those yet but you can Define uh variables AS Global um and get get at them that way bad practice in for most cases once in a while you'll want to do it um but uh you U it's an option and then finally the built-in name stable that's basically Python's uh names table it looks for things there as well you know math.pi would be a good example of that um I won't go too much into that but basically know that variables that you create um you know uh in in a function are are local to that to that uh the last thing that I haven't talked about um and and we'll we'll come back to parameters and arguments here I'll go and put it up on the screen is this return statement um basically uh you can uh create a function that returns a value um so um here I'm going to um I'm going to uh run this function and then I'm going to go ahead and do calculate area five and it does work uh let me go and clear this uh just just to demonstrate that um this does work uh only because that's the way python uh the The Notebook works but I could also do this I could do something like this where let's take calcul calculate area um five let's make it 15 instead well let's make it five just so we can see the difference I mean so um we'll get the same thing but I can do um I can assign this uh area I can assign this to a variable like so and then when I can do things with that like for example print my area plus five like so and in that way oops sorry I there we go like that so at this point I've taken this and it Returns the value basically gives me the value back out um and when I call this it can be assigned to a variable or anything else um and it can be more than just numbers of course it could be any any type um It Could Be Strings or integers or Floats or even complex types when we get to objectoriented program so you might recall that this was 78 before I added five um and I can do other operations on that after I get it out that's what return does it basically says um give it this give us this last value back out um here I did something like doing um the uh the the expression right on the return statement but there's nothing keeping me to do uh doing something like this and then returning a variable that's uh you only used so this exists in the uh function function uh but then I'm returning its value back out now I couldn't say you know give me my output but it would uh it would basically be returning my output and then I can I can continue on like I have before there so just a quick um uh rehash of of the anatomy of functions parameters of the variables listed inside the parentheses when you're defining the thing so uh in this case five is a parameter it basically is used to alter the value of the function it's the input of the function you can think of this like math you can have more than one of these um you can have you know any number of them you can also pass you know different things like lists and tles and um and anything else into the function and use it appropriately in there um arguments are uh are basically how we how we pass things to the parameters so again parameters are in the function definition um arguments are what we uh basically pass to it so here this this is basically a argument because we're passing it to an existing function and then the return statement is used to exit a function and give us that value back out here's another example basically squaring something where we take uh we use a parameter uh value of x we multiply it by itself and we return that um by calling its function and of course we get 25 so that's kind of the anatomy there we'd already talked about doc strings just a little bit ago but basically it's the functions that describe the purpose um they don't do anything by themselves so this function here uh will not say anything this fun about this function blah blah blah it basically does this uh void function Behavior where it's using the nef string to print out uh whatever we pass into it so if I run it here we'll basically get uh greet Jack uh because I'm passing Jack if I put my name in there oops didn't mean to delete my whole code there if I now um if I uh uh where' it go what happened lost my code oh I just I just left my code um if I passed sorry I just jumped around with a hotkey there um so again the whole point of a function is we're using a block of code here to repeat logic in this case greeting something um or uh repeting so um I can change this to whatever I want and of course we could Loop through names and reuse all of the code in here with very minimal change to our actual execution code um more on that later when we talk about abstraction though in in a future video uh that's a good stopping point for here um hopefully that makes sense let me know if you have any questions