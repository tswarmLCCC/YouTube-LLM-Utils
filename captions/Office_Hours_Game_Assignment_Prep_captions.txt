that looks like it should the f is start from zero or start from one the F yeah so if if um so if you want so you're you're asking if they basically oh from zero or one yeah so zero would give us the full L right Zer is the first position so we can see that Evelyn is the first one here okay and then one would be Lily right okay or Li I'm sorry not Lily yeah and then conversely we can do something like this where we could do uh if you wanted to just I'm not saying do this but you can what's going on here is it's uh going to the second from the end negative one goes back from the end so you don't actually have to know how long the list is because of otherwise we have to do like the length of it right yeah so you can just use like negative one if you wanted to now to do a range of course right that that's not too hard we could do something like this where we could go let's go from one you know from uh just to build on what we did this one of course is starting in the second one and it's going to the second to last one because of negative one but it's all about this syntax uh for this program though that's really I think the key to it I didn't realize my shirt was all messy by the way sorry about that I think I spilled yogurt on it this morning when I was eating so yeah uh does that make sense yeah Mak sense okay so from there it should be very similar to what you've done before right where you've already created the the structure of which one to use and you'll just be plugging in you know basically three of these to uh you know if it's from the start part you'll do be doing or uh from a number to the end you'll be doing a number and then nothing there and then the other way would be to go from the beginning to a number you would be leaving that one blank right so this two number is index number yeah so we want the rer to yeah inut some number yeah and so we could do something like this instead um right we could absolutely do something like this instead where we use variables for these things right so two here is going to start with Olivia 0 one two but since the computer number is from zero M St and real world number is from one so yeah you'd want to answer minus one yep exactly yep great great good job yep so your minus one yep and you just nailed something and if you're watching this on the recording something that I would be looking for is that you do that translation when I grade it so you won't lose a lot of points for that but you will lose some so conversely though what if they put zero in need to handle that too right because it would go negative one and then it'd be kind of backwards so yeah you might want to think about that too you know because users could put in whatever they want really right so uh anything else bie um aw okay what I might do then and and please feel free to work during it I might do a lecture on the midterm that's coming up in three weeks the Hangman game oh assignment about making hman yeah yeah I might might do a little bit about how we might set that up um so uh is that okay with you yeah okay let me bring up the code real quick it's not code about that because I can't just give you the code what I'm going to do is actually walk you through a hangman or a tic tac toe game I wrote last night um where we can maybe go through um a little bit of um what a game might look like and actually tic Taco is much more complicated than hangman in terms of actually how it's built because hangman you can just tell if the all the word is there or not uh but the structure of the program should be kind of the same so I'm GNA bring bring one up um so let me let me open that real quick like to like to at least cover that a little bit and let see here oh goodness one sec let me just find it all right what I have here um and I hope everybody can hear me okay from over here but I'm going to try to do this over here where I can kind of rebuild this as we go what we've got here is a tic TCT toe game I'll I'll demonstrate it um and there's a few cute things that this author did with it this is not my code I just grabbed it so we could illustrate they go through and uh do a bit of um uh some cute stuff where they um uh you know start and and talk about um the the the actual game setup and then they uh they actually have it sleep so you can read that that's what happened at the beginning and then they go into um a a game what's called a game load here and we'll we'll talk about all everything that's in here in just a sec um but the main two things I wanted to uh convey uh today at least uh is to kind of give you this and I'll put this I'll put this program on our shells um after I'm done posting this video uh so you can kind of reference it is basically how to do some like lightweight drawing um you might notice that we have this tic tac toe game V can you see my cursor yes okay okay um we have a Tic Tac to game we need to do a little drawing right to make this game kind of look look like it a game um and so as you you know this just takes one through nine uh for X and Y so it's player one it be like you know one oh sorry think did I break it last night might have uh yeah I did I was I was updating it but um actually it won't matter for what we're doing um thing I wish I hadn't I I was kind of messing with it late last night but it won't matter for what we're doing here the the fact that it doesn't actually run yet uh is not the point of the lecture um it's really some of the structure here um so one thing that you do a lot of times in games is you write an infinite Loop um so this main game Loop is set up here to true and what you do with it is you uh you Loop forever so basically this is going to evaluate while you know while true equals true and then what we do in here is we check for things um in this wild so this outer line is the wild that helps us uh eventually we will go through the U the check win function um and check uh to see if something happened that's useful and uh change that to false so the idea there is we just Loop through infinitely while while they're playing the game and we do basically three things we we read it read some sort of input we affect the game with the input whatever our logic is about the game um and draw it and then we check to see if somebody won um or the game should exit those those are the big three things of of our program here um so and you can see those structures uh uh very nicely here and um so we we have an infinite loop we're basically clearing the screen um so OS here is uh it's actually a library that we can call it's a built-in library of python uh it's from CIS it's from the system Library I'm sorry it's not it's it's its own um but what it does is basically gives us some access to uh the operating system that's behind the scenes here um and it's runting CLS CLS is a clear screen command and we can even see it down here if I if I type it down here in my console I just type CLS it clears the screen just like that which is something we need to do otherwise we just kind of draw over ourselves all the time so basically what we're going to do every time the loop happens is we're going to clear the screen and then we're going to draw basically what's going on on the board and you'll do the same thing with hangman and how we draw the board we're going to get to in just a little bit but the fact is we're basically making a clean slate for this thing and then we're going to draw something and we're drawing it with with keyboard characters asy characters we're not actually using graphics for this but we still need to clear it um we do the same thing in real game programming or similar things anyway where we kind of make a canvas and we we basically build the the graphics on the screen and then we push that it's called a frame um if you played video games you might have seen frames per second that's how many times it's drawing per second um our game won't be very high FPS because we make it way each time but that's what that's what frames per second means is is frames per second where it's drawing these things and and then pushing them from the screen so us so we can see that they just do it with pretty Graphics we're doing it with you know itty bitty text um and that's why you know uh as programs get more complex or the graphics get very intense and uh some Hardware might be slower and that's why your FPS goes down your computer can't quite keep up with drawing so many images so so fast because it's doing so much work and that's why we have things like graphics cards and things to speed that up uh but that's that's a little bit further down the line than where we are anyway what we're doing is we're cleaning the thing and then we're drawing the board we haven't studied functions yet we will do this in two weeks from now when I'm recording this it'll be the the unit before the week this is done but you can think of draw board as a little program uh that happens within our bigger program that's what functions kind of are in this case um its whole purpose is to actually draw the board it doesn't give us any uh variables back functions can also do that but in this case it's it's it's what's called a void function or a um it has side effects that that that are useful in this case it's going to draw the board and then we just take our input um hopefully this doesn't look too crazy um where we we're basically saying we're flipping back and forth um and I think this is what I broke last night but we're we're flipping back and forth on whose turn it is that's what player modulus 2 equals z so that's either always going to that's the remainder function you might recall um that'll either be zero or one in this case and um now you don't have to do this in your Hangman game by the way that's a one player game so because this is a two-player game you we have to do this we have to know what's going on with our players but you're going to play against the computer actually not even the computer you're just going to guess until you either win the game by guessing the word or your guy gets huged right so we won't we won't need this in our game in in in our in our um in our Hangman game but it's necessary for Tic-tac-toe because it's a two-player game and then I hope at this point of the course this doesn't look too foreign to us uh what we're doing here is just reading their choice and they enter one through nine for the nine positions on the Tic Tac Toe board so 0 one two I know you probably can't see me uh on the thing I hope maybe can 0 one2 3 4 5 6 seven8 uh so they uh but we um obviously add that add one to it to to offset the the um the uh the the um you know the the the computer to user input starting index zero or index one and we have this board um list actually it turns out um so let's go up here and see not there but further up we have this board and it's just a list that's all it is we we're just studying this this week um but they're just a list of blank characters right so this this user is inputting a number and it's telling us which one of these to make their mark on and what it does is each time it flips that's either going to be X or zero so we go so the the point there is the board is represented in memory um as a as essentially a nine character list or 3x3 which represents our board we'll do the same thing with our word and our hangman guy right we're going to have to represent that somewhere where um you might for example you know take the length of the word and represent it with the number of characters in there and as they fill it in uh you know fill in their guesses so you might have a guesses list which would be blank um and then they but as they fill in letters that are right from their word you can fill in the blanks right that that's one way you might handle that and our hangman guy he's going to have his head and his neck and his arms and his body and his legs so it's one two three four five six seven probably seven positions where you know each time you would add one more to that and then we would build the appropriate guy there so when it gets to the end of that you're dead so those are kind of things you might consider there and how you might represent you know some simple ideas with uh with with with lists you know something very simp that we can just use indexing for in creative ways anyway uh we keep going um that's what's going on with board here so it's oop sorry um we're basically the choice here remember is the the one through n that they give us the user gives us and it just puts their mark on the board in that spot and U it actually should check I don't think I wrote that part or this guy didn't write that part so it looks like you could actually overwrite your opponent you know put an x on top of a zero because we never checked to see if anything's there here might be something you'd want to do uh but the point being is you do something to affect your game World which is represented by arrays in this case or other things it doesn't have to be just array um and then finally it switches the player um from one to the other and it looks like that might be broken right now as well in this program so not a great program but it's a good one to illustrate what we're doing here um and then it checks win uh which is just another function um so you don't you could write all the code here to check for example if the person got the word right or if they've run out of of body parts in hangman um you could check that here and deal with it appropriately you could write that code or you could write a function like this guy did where it's basically doing all the stuff to see like hey if there's three in a row um so he's checking for equality here so like if if if uh position one and two were the same and two and three were the same um and that they're all not blank that's a win right because they'd be X you know in three different positions in a row um on the top and then we do the same thing for the next row so he just literally goes through all the different ways you can win Tic Tac Toe of having three in a row and seeing if there's three characters that all line up that's all he's doing here we would do the same thing here um and and so not necessary to work worry about the logic because we won't use this logic we'll use something else we'll check hey is the word has have has the guy guessed the word yet so we might have a guesses in a word and compare them right something like that um or has he run out of lives or or body parts that's what our check game or check win or check game might look like um or you sorry let's do this um where down here so you could write all that code here on line 81 if you wanted to or you could do it somewhere else where it's easier to understand um and and then just write the check win there as well there's a number of ways to do that and you can also return values for functions um you can return whether they won or not or who one or not um so you can you can have your your function give you something back into a variable or an object and do something with it if you want so there's there's a couple ways to handle that and then finally we draw the board again or we um after that and then we check to see if somebody won and if they did we we tell it to exit that happens actually in check when and it would happen to the end but you could also do it here so this is just handling to print based on how you know if somebody want or not uh things like that um the drawboard though is the other main thing I really wanted to talk to you about so we already talked about CLS cleaning clearing the thing um but uh drawboard up here uh is another function a little higher up and what it does here you might recall from our zybooks that this is another way to print things where you give it data and then you put in in this case characters it's a format string um that's all they're doing is giving a function of that and we can see that it's just literally printing our lines here um um and then and then the characters in each one so it's just going through our board array and it's printing what's there in there and then it's drawing the lines around that that that's all that's going on there with just a series of print statements uh very very simple so in our um Hangman game you know you might have a you know um you know a head might be like a small zero or something and a neck might be you know a vertical like the pipeline or an L either way you know and you know the arms might be are greater than or equal where they're like this you can draw it however you want um you know we could start to start to build something like that I'm just going to grab this print statement here you know where we might do something or actually I'll just scrap the prints themselves and make a new program real quick we might do something like this where uh we won't even use the board stuff for this we're just going to actually have prints and we're just going to try to draw the stinking thing and you can get creative with this um if you want just try to get rid of the indent here so we might do something like this instead where we might like draw with spaces you might draw like the head like this oops not like that like maybe like this right kind of looks like a head and then we use spaces to kind of control this and then maybe we use this for the neck something like this right yeah um and then maybe we do something like these for the arms and I'm making this up as I go I mean there's probably uh you guys are probably much more greater than I am or maybe we do something something like this maybe something like that for the arms and then of course I try to line it up make it pretty then we maybe use another one of these guys for the body so then maybe we do the exact opposite to the legs something that let's just see how that prints um see this see how that runs oops hey not too bad yeah this one got a little wonky so we'd want to take care of that but um so we could clean that up and then so basically what we could do then right is instead of just drawing this we could check to see if we should draw it and say if I should draw it I'm going to draw the zero and if I should not draw it I'm going to draw blank as as you build this so you could build variables into this just like we have with other R statements so that that that'd be a way to handle that um and things like that so from there you're just basically doing kind of what we talked about where you build your how to represent what's going on in the game the game state if you will you know the state of the game uh and that might involve you know what they've guessed and the word is and of course we need a mechanism in our game to read a word from somewhere right so we might have a list of words that we read in from a file and pick one randomly maybe um or I guess if you wanted to it wouldn't be much of a fun game but you could have to use or input the word and then try to guess it be kind of a boring game though so maybe we have a list of words either in a dictionary or in a file you could put it or I'm sorry in a list or a file and you can just pick one randomly we can use the random module that's built into python to do that um which uh you know please let me know if if if that's a challenge we can do something like that um and uh and then and then you just you know probably need to take the length of the word and maybe look at how many characters there are in there and build the number of dashes and we could do something very similar to this when we draw the guy we could either draw uh underscores for blank you know something that would look like this right let's say our word is Trevor you know we might we might draw something like this where it' be you know say they got the O in my name right there spaces in there just to make it a little B better and then itd be o here right so we could do that and do the exact same thing we did up above um where we check to see if they've guessed it yet in their in their guess you know list to see if if that's there so you could basically just go through the list in order and say hey um you know did they guess this thing right so from there you just basically need to read their guesses see if it's in the word and then put the guesses in the right place in their guest list guest list not guest list so um I just wanted to do a quick recording I hope it comes out okay I'll post this as part of the midterm uh lecture um thank you boui for giving me somebody to run this by as I did this um but I think this will help you guys um as well as maybe a brief explanation of the game of hangman uh for those that may maybe did don't quite understand that so really wanted to get this out there and give you a few things there and I'll try to clean up the hangman or the Tic Tac Toe program to be a little uh little bit better it run it'll run right um I was editing it last night but it was still good enough for what we're doing here where we have essentially the game Loop the drawing mechanism updating the game state it gives you a kind of a SK sket you I would not advise trying to alter the tic tac toe game to do this I'd use it as a way to generate hey I need to handle my game State somewhere I need to handle drawing an infinite Loop those kind of ideas that's really the point of that I would not try to alter tic Taco because for one it's a two-player game second it's represented completely differently than hangman will be and we're drawing it differently so probably not the best idea to try to alter it but definitely it hopefully will give you some ideas how to design it and build it so do you have any questions about that no okay yeah so hopefully this is useful for that I'm gonna I'm G to actually well I I don't need to stop the recording I guess but I might just for a sec to make it easier to edit and then I'll come back uh let's see here well actually I probably will stop the recording if we're just going to sit here because I don't think you have anything else right now do you yeah I don't know yeah so I'll go and stop this right now the recording and then if we get some else I'll just start a new one it's probably easiest