welcome back this week um we have one of those units like some of the other units that we've been doing where they don't have a place necessarily in the sequence of tools uh but they're great little utilities to have you know not unlike modules and things like that they're things that you don't necessarily need to use but they sure can make your life a lot easier um we're talking about exceptions this time or exception handling exceptions in exception handling um this should be a onewe unit uh towards the end of the course um I believe uh and uh likely it'll probably done when we're when we're also studying the module so I hope it's not too hard uh when you're going through it there is um a zybooks reading um on it but it's very short like it it took me probably 10 minutes to get through it myself even with the activities um and that's listed it's it's I think it's called guided learnings or I'm sorry guide learnings It's called exceptions or exception handling one of the two uh depending on how I name it in your unit um the uh the overall unit uh is is like I said very very simple we're going to uh have a bit of a um the zybooks we'll walk you through most of those I'll do a bit of a lecture here uh in PowerPoint just kind of highlight some of the main things there there's some other stuff in there that's useful so make sure you pay attention to it um but really this shouldn't take too long at all I don't think um I've even outlined the main aspects of exception handling right here in this uh in the in the unit overview um and we will have an assignment um it will basically be taking um some a simple mathematical uh program much like what we've done with some other conversions like the cylinder one we did like in week two and things like that we're going to just add some exception handling um to it uh but I'll cover that when we when when I get to that uh here in just a bit um let's see what else do I want to talk about oh there is a discussion post as well um and again I just kind of go over what exceptional handling is uh bring up a few different things you can use it for here and then down here's some some prompts you can talk about really it's just um you know how can you use this to um to make uh your programs a little easier to use maintain a little more bulletproof or hardened for lack of a better term um uh as opposed to some of the other discussions where we've kind of had them um tied uh to the final for example um and I just want to check one thing real quick let me bring up vs code here uh and see y okay that one's going to be fine some I've made the mistake before during of these videos to show the solution and I don't I don't want to do that here so let me switch to PowerPoint hopefully that comes up good it did and I'll switch over here here we'll go through just a bit of a lecture um so uh exceptions as you will know uh are are things that happen that aren't supposed to happen in code um you know not not things didn't go quite as intended I guess is a better way to say it um you've seen a lot of these as you've written programs like syntax errors name errors things like that um that when you use things incorrectly you'll get exceptions and you can capture some of those some of them you can't capture at all because your program simply won't won't uh be a valid program but there's other ones in there there's other ones in there that um are are much easier to deal are better to deal with um we've seen one in particular a lot whenever we've asked for numbers and we've tried to do addition on numbers or or math on numbers and you let it enter uh let the user enter a string it can show a uh a value err or I'm sorry a non-numeric err and we've gotten around that by either uh testing if the if the string we get from input is numeric or uh or um testing simply for a range of numbers that's another way to kind of do that uh but we do that with if statements and we can Loop that way Well turns out you can do that with exceptions as well and there's a lot of other kinds of exceptions we can we can do um uh and as a matter of fact here's an example of that exactly uh where we uh where we um try to use um uh a uh um a string as an in and it will try to basically say you're trying to add like the number 48 to the word go or something and it's like I don't know what to do with that um where uh or or even worse it does try to do it and it says go and then 48 so like go 48 as opposed to you know what you intended which was um a mathematical operation um and then so there's several kinds of errors that are really common um and that we have two of them here uh that we've talked about um but a value a the numeric air the type mismatch air um trying to see if it actually calls yeah it's a type air that sorry that's what I was trying to say earlier was typ air uh when you're trying to use two different kinds of objects uh uh or variables that don't have that kind of operation defined you often want to cast them so you can catch that it turns out or ex it's called catch in a lot of programming language and I might use that but really it's called Uh accept in Python um so a couple different uh different uh common exception types although there's many more and you can even make your own we have NF air where we open a file that's either not there or it's empty and you can't read from it you'll get uh a end file layer um when you're accessing a dictionary um and you look something up by its name by a key and it's not in there it'll throw a key air so you can catch that and handle it a little more elegantly divide by zero uh pretty self-explanatory one you literally try to divide by zero often H happens when we're doing um on the Fly Like averages for example and we haven't entered any data or the wrong variable was used to to uh you know for the denominator things like that um you'll you can catch that and say hey you need to enter some data silly uh value aors are a really interesting one they're very um they're very uh robust in the way and they're they're used by a lot of programmers to say you know for example if you wanted to have a menu system like we've done where we say you know press one to enter data and press two to display it and press three to update it like we've done a couple times and you only wanted to accept one two or three um you could test to see if one two or three was entered and you could throw a value a there and instead of saying if one or if2 or if you could throw a value air and have it handled in a nicer way and with a function and things like that and then finally index err is it's not dissimilar to the um the Kier it's basically saying if you're trying to index a uh like a list or a dictionary or things like that um or even an array uh some either built-in array something from numpy and you use something that's outside of its range it'll throw an index there and you can handle that a little more elegantly as well so the general syntax uh um of of of a uh of a of of a exception handling block is this try and accept try and accept um sometimes you'll hear that called try catch because that's they usually use the word catch like you're catching an air um before it gets out of hand um in other programming languages but here we use accept and you can either do accept without anything and you can catch all the errors and just say through an air loop back or something to that end or you can catch different kinds of errors and handle them handle them different that's what's going on here where we have one block that that's only for Value errors um and then we have another one that is for uh divided by zero and they give just messages in this case um so we can see here kind of the difference and how these things are a little easier to use um with with simple uh air handling um so in this case instead of writing if the weight is zero um which we still do and and printing and then doing an else and kind of more convoluted um you know Sub sub if statement uh underneath there because first we' need to check with weight and then if weight was okay then we'd go into height and we'd need to check white height separately and go to another level of a subblock you know we're kind of getting deep in there um and if uh you could instead just uh test those in the same code block so here we're at the highest level of educa of of uh execution here with our while loop right and here we go one deep which is what we're going to do anyway uh we could go one deep and say hey if um you know if the weight's not right uh we go another level deep then we come back but before we are actually doing what we want to do which is getting to this height we're already two levels deep here right and then we go another one to a third level uh to um to uh handle the the when height isn't what doing what we want well we can do that more elegantly of just raising errors and it basically gets us out of this whole Tri block whenever we raise an air um and then uh what we can do down later is catch those value errors so these are two different value errors um and it will print the exception where it'll print the in valid height or invalid weight still just like we wanted um and then a nice a little bit nicer message as well um so you could Loop through this uh while the user input things like that just like we've always done but it makes it a little more easier to read so this is actually raising an error um when we want to when we want to handle it you know create an error um uh to to get handled later uh when users do things we don't want them to do um and that's that's kind of the the upshot of it all um like I said there they you want to try you run this you know run that code in normal circumstances and then accept or accept with the error type when there's an exception there's other kinds though um we can here's an example of it um for example uh uh you know we could have name uh equal to Dave and if that variable hasn't been created say it's getting created somewhere else maybe or you're in a module um you know or a function um and and they pass on in something that's blank you can you can catch that and say Hey give them a nicer error than you know the all the up Arrow things that we get uh in in vs code when things go south on it so you can handle a little bit nicer especially when you kind of expect it for some reason or another right that's a good time to do do that um yeah so this one would work right but this would not this would actually throw our air is basically what I'm saying because that name was never created I think that's what I was going for there um now sometimes you can Cascade these things and you want to so this accept only will fire off when we have a name aor like we we had earlier um this is in fact a name aor where the very variable has not been assigned but then you can actually do um a another accept where anything else that goes wrong will H will will fire off an error there so you maybe if you want to handle specific things that you know about or you've seen you could you know handle those explicitly and then you maybe you want to catch something else later and and clean it up another way or loop back and try again one of the two um let's see here oh and then you get the else statement um so the else state stat basically says uh do this thing you know so this will it it's going to try to do this no matter what but sometimes this won't even go off right no matter what though this will go off one of these two will go off either one this air this air or or this this is kind of the default so if you want to make sure something happens um even if that you get an err here uh you you can or I'm sorry if you don't get an err here you can you can uh use this l as well um I don't have a lot of great use cases for that but I've seen them um you know here and there uh it's just good to know that you can do that so the way that works is basically if this if this did execute the print name did work um it's going to skip over the accepts because nothing went wrong and it'll come down here and do some more logic um it might be handy to do this like in a loop where you're you're like okay if I'm trying to input something and the these are catching the errors that might happen from user input um this this else might be where you create the VAR or update the variable to exit the loop for example if if this went well um that might be a way to to use that um and then finally is like else kind of except it always work it will always fire off no matter if it came from an except or an else um good for garbage clean up things like that reassigning variables reinitializing variables if you need to things like that finally is basically something that will always happen in a try accept block um if if it's defined both else and finally and even except are optional uh except with these um but if you do have a try you need at least you know one accept um so that's what I had in the slide deck um I'm going to go into vs code now real quick and we'll go over the homework and play with a few of these and just give us some examples like I said this is meant to be a very short unit um let me bring up V code here and hopefully that brings it up and let me resize this just a little bit to fit our window a little bit better uh like so okay so you'll have a couple examples and then a prim uh some Prim examples I'll go over those in just a sec but we'll start with the the examples I've got three here start with one we've seen uh quite a bit uh that's not the one I wanted to start with we'll start with this one so this is a very simple program uh from our zybooks um that I brought in so what this is doing is taking you know taking a number and um and uh or two numbers a numerator and a denominator and then just creating a result and um and uh it'll throw an error if we do a zero so if we fire this off and I do something let's go ahead and that a little smaller hope yeah it looks like you can see that okay so let's just put in like three and eight right we'll get we get zero because it's integer where're it's in these are this is integer division um and if I run it again we do it like eight and eight we should get one right um but if I do something like this let's just uh if I do six and zero we get a nicer air here that uh you can't uh that we don't you know it's talking about the the exception and it's giving us a little bit nicer nicer message than um if we didn't have that where it would just kind of blow up in our faces um so that's just a you know the the general uh flow of these things is basically you're trying a block of code so anything that happens in here that generates a zero Divi division error will it'll it'll Branch to here then immediately um and then if there's a value ER that gets thrown it'll Branch to here immediately and we can of course do this as well where uh we catch everything else and that's the way that works um we could just say you know print you know something else we could do this as well nothing wrong with this at all um where it will it will go in order try this one try this one and then if neither of those get fired but there's still an ER of some variety it it will handle with every every um every other kind of err now this as exception you can print the error itself or you could do this aliasing and you can actually get at the error itself and in this case we see that where uh we have this th this string this uh so the this part is actually just printing right uh we see that down here as well where it's just printing that um but the rest of this is actually coming from the air it's telling us hey you made a uh a division by air type of air and so we can get that as well so we we're using the nef string here and it's just treating that like a variable um so you could test for that as well or you could you could uh print that out as is going on here um this is a good example of a value error though um in this next one and this these are Under the examples you can you have these for your program as well if you want they might be useful in some cases so in this case I'm going to actually have it prompt here I kind of forgot to do that when I wrote it um clean this up down here real quick by the way if you see when I clean that up you don't have to delete this all the time you can just hit contrl l or you can hit this little uh usually a clear in here somewhere yeah clear terminal um but contrl L will usually do that as well um so you you can so you can clean that up if you ever need to in a hurry um anyway back back to the example uh we've got a a function here so we're doing two new things here we're using a we're raising a an error a value error in this case and then we're actually um we're raising the error in the function and then we're catching it in our main program right so when you when and you want to do that when you when you create you can create uh these kind of nicer errors in our functions we can certainly do that um uh but then you'll want to surround it with a try and catch so in this case it's a value error and this is a userdefined error in this case right there's nothing wrong with an age of 99 or 148 mathematically but maybe for our program there is um or you know an age of 12 or neg3 even those are all valid valid integers um and they would work under normal circumstances but we maybe want our program to not allow it so we raise an err there and then we can handle it quite nicely um in our program uh uh with this exception down here um and in this case we'll see it print in validate so I'm going to run this we'll run it as normal first so we'll enter you know 30 and it's saying you know here's your uh it does a little math based on the age and saying you you you know you want a fat burning heart rate of 133 for a 30y old um you know it's just a simple uh you know when do you when do you burn fat type of heart rate type of calculation that was given to us but let's say we enter 99 well here it's it's saying this r air here is not happening here what happens is it goes down here uh so it's raising the air here it's basically saying hey I don't this is not right um so it's raising it here it actually executes this and then it bailes on this so age is actually not set right now we can see that there's nothing in there because the air got thrown and then it's handling it down here right and we can see let's go ahead and do this as well let's do let's do like this and then just simple comma and I'll I'll run this again here the reason I did that is I want to show you uh let's go ahead and go 99 again um that it's not printing this here it's not printing this when it happens it's throwing the air and setting a message for it but it keeps going um and then it it's printing it a and that's why I wrote what so we could see that it's coming after um uh after you know in the air handler it's coming basically only when I C call it we'd never even see the air if we didn't want to I could just do something like this where I'd never see um the invalid age message it's carrying that with it though that's how that's going and what's going on there so a couple things here just to be aware of and and very useful things all of them uh you can you can raise erors within functions and if they fire off you can catch them in the main body so if you write fun function for example in another module uh in a file you know external file like we studied in the modules unit you can raise all kinds of errors and make sure that these things are being used like you'd want them to be used in the in the function and then if they're not um you know you you surround them in a tri catch so I want to test one other thing here with you guys what happens if we don't have Tri catch does it still work right let's find out so I'm going to just get rid of all this just make a regular program and I'll put this back you know when we're done here but let's see if this runs let's see what happens when I do this well it does but we don't catch it so you see we get an error still and it exits the program like it used to like we did like if we if we put in a you know an invalid thing in this case I put in 99 again that's a valid number that's a valid integer just like it was but in this case that exception was not caught so what happens is it exit exits the program inste and that's why what happens when you don't catch an exception that happens is it it it it exits the program and we've seen that every other time we've made an error right you've seen this certainly during your midterm probably right uh we made all kinds of Errors when we were building that thing out so what we can do is um we can we can craft these things in a way where we we we catch what we know in useful manners now you don't want to go out go through and just capture everything right um You Want to capture things that make sense for your program in this case agent value a a great one now the last thing I want to talk about with value a is that it's a very use uh programmer friendly construct where we're kind of creating an error that's not really a programming error it's a logic error right it's a it's an error of saying hey going outside of the age of 70 in this case or what was it 75 um doesn't make a lot of sense for what I'm trying to do here um so I'm gonna I'm gonna not allow that and so we create a kind of a customary and it gives us a level of sophistication in our program that's not otherwise possible really powerful stuff there let's see and I've got one more here and I can't quite remember what this one does um it was a long one from sidebooks and I copied it all here but let's see it's creating a class and oh this is testing um to see if there's a name in in this case a list um and then it'll raise a a customer so what's happening here I'm sorry the class is the new eror you're making a a new kind of error saying um and this is a very common Syntax for that but you're um for those of you that stud studied object Orient programming we're just basically making one and you probably have not seen this before where it's putting uh in in the parentheses um the a super class in this case so what's going on here in Python and I'm not going to jump too much into this you can certainly read about it is this object is in inheriting from a another another class so basically it takes the exception class and says this is a special kind of class that takes everything that's in the exception class and then builds a little bit more about it it's called it's called a parent child relationship so um the uh the exception that the student uh info error here the custom one we're making is an exception and we implement it by basically saying hey just take message so you need to do a few things uh sometimes to uh inherit like this it's inheritance is what it's called in objectoriented programming but basically you can do any kind of error like this where you you put the the exception class in in a uh in a bracket here and um and and you're inheriting the student info ER everything that happens with student info a all of its properties and usefulness useful functions and everything come with it um but then we get a new type of error so what we're doing here is basically saying hey we're going to give you a message here because um the in Constructor we're going to give you a message and you're going to you're going to know about that and what happens here is very simple it's just testing to see if in it's you're going to take a you're going to have a list and you're going to test for a name in that list and it's going to say if that name is in there um uh you're going to return it um if not so return will uh exit this this function and if it's if it doesn't get ra if it doesn't uh if this doesn't happen um this is going to continue so returnal exit you can almost read this like if then else um it will raise this um if it doesn't get this far so again if it if it does find it it returns and it never gets this far but if it does not find it it will keep going and it will find this and we see the same thing uh here as well so we we go down with find ID find name we've got the same thing again with the student info a um where this one's they're just getting different messages this one's checking name uh for the name and then it's checking for the ID um here uh and saying the ID is not found and we use it very simply we just create the we have a dictionary uh we take an input let's go and do this and it will try to find that name in in the student info dictionary um just just like we said um and we and then um and a simple user Choice uh which we should probably make a choice as well and uh and uh that we input a sorry I didn't quite finish the uh um an ID and we've done this a bunch of times we just handle invalid things a little bit nicer this way so let's go and run this uh so in this case let's enter a name and I did not see my name in there so let's add Trevor and sure enough it was not found so basically we go through here we went into here we input a name this uh gets gets Trevor in it and we could you know use break points and all this to test this as well we go into find ID here and it's saying was that name in here so it goes through its uh it's its list here says Trevor is not in here um and then it kicks out a nice air for us and much nicer air than would have H happened otherwise let's let's uh again you know it would have AED out of the program if if with a um a name error um from from the dictionary if if I hadn't done that so um some really neat examples that I want you to work through there um certainly let me know if you have problems uh all of this is covered in the zybooks as a matter of fact these are zybooks examples I brought in for this one um but these are great ones to study and kind of get familiar with of how these things kind of get put together um and in this case we can make make our own errors you could handle this with value errors for sure but sometimes it's handy to make your own errors and especially as you build more up okay finally let's get into the uh simple assignment um I hope it's simple anyway this one is one we've seen it's tried and true uh where um uh we catch uh a value a um uh where uh so basically it's it's uh I can't remember what El did because this actually work what happens here let's see so if I do this okay so value yeah a value so if I didn't have this it would have thrown a value there yeah that's right that that's that's the default there um so the name of the error when we we had this um when we put a string in here and it tries to convert it to an integer is a value eror um so this this is a great way to handle that right this is a lot easier than those IFL statements um so you know play with that and then in this one I want you to kind of go through um and follow along this um this try Tri accept and same thing with a value ER see what's going on here um and uh you know kind of answer these questions hopefully after the zybooks reading you should understand that um and and uh you know be able to answer these um I'm certainly happy to answer these for you um if you want to come to class after you've read this but uh this is kind of you know if you if you have if you struggle with these um and you can't you don't think you know the answer come see me great time to take a break and and come see Trev up in in in in in the classroom and uh we'll uh we'll talk about it and I can explain that I've really enjoyed doing that with you guys this semester modify is a little bit bigger um you can write this where basically you're doing what we just talked about uh let's add a little bit of spacing but you're going going to write a quick program you don't have to do this of course you don't want to but it's a nice one where you're modifying this program to handle some certain situations with index errors and things like that out of the list so like you're you're going to have a list of 10 names here and basically if they if they you know say enter enter an index and they enter 15 you want to handle it a little bit more elegantly so so that's that's what you'll try to do there it's a great exercise in both the construction of the tri Tri accept block but also using a different kind of uh of exception than what we normally see and then finally for your make assignment uh you are going to take um very similar to what we did with that um heart rate thing you're going to write a simple steps to miles function um that does this calculation basically for every 2,000 steps it's a mile you're going to take the number of steps in so it' be steps to miles with number of steps it you know as a parameter and you'll return the number of miles walks just simply by dividing by 2,000 um but you want to re uh you know do basically this um let's uh let me see if I can make that just a little bit bigger so we can read it let's actually sorry these things don't always format nicely on different screens let's just do this to make it a little more readable and then I'll zip this up and put it on the uh on the um on you know on the assignment but uh you will write the the a function and says that basically they can't be negative so you'll write a value a there right just like our age one earlier you're going to write a value error saying hey this can't be negative silly you can't write you know you can't walk backwards um like that um and then you'll do a simple you know read an input uh calls the step to Miles and outputs it from there and then I'll test it I'll put in a negative a negative value there and see if this thing handles you know if it it should be pretty nice by the time this comes out um so I'm looking forward to that time of year with you guys as well um anyway thanks uh and talk to you later bye