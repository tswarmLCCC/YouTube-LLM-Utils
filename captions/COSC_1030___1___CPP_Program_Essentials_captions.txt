okay so in this video we're going to talk about the basic structures of C++ programs um and how to get them basically doing work on a machine um as we've talked about previously I'm going to move my head just a sec here um we've talked about how we use higher level languages uh or or or or terminology I guess languages it's not quite like English but it it's it's kind of what you see on the screen here it's a programming language that that then gets trans transformed into machine code um but first let's talk about what we're looking at here there's there's quite a bit going on even here um so the main thing you'll see if you if you read this like normal it's a little out of order of what's important here we have this include statement um and this using namespace idea here both of these are uh they're helpers um the first one says Hey I want to go get information about input and output streams and use that in my program because what we're going to be doing is we're going to write hello world to the screen here and the program by itself interestingly enough has no idea how to do that how to write to a screen or take information in um even that needs to be built up from scratch well C++ uh modern C++ gives us gives us that and uh in behind the scenes we've got a program that can do that and when we put this include state statement in here this include IO stream uh we get access to that it's basically saying add that capability to my program make my program aware of that other part of C++ so I I can then use it um so you'll see that in a lot of programs this is why I bring it up now it's kind of a bit of a a jump in Concepts but a lot of people start reading at line one and all you need to know is this is helping my program do input and output We'll add other things up here eventually uh that will help us do other things um in in C+ plus it turns out that's a very powerful idea in programming is reusing code going out and getting things and using them uh over and over again once they're done once they're programmed correctly the next thing we're going to do is very similar to what we just talked about we're going to call this using namespace idea and there's there's some stuff built into C++ incl including the standard template uh documents or standard template Library um and that what STD stands for here and it's basically saying hey uh you're going to use some stuff from here um see out here the the the um character out uh oper uh operator here or method is what it actually is is part of STD so if you didn't have this you'd have to write STD see out here um but by adding this um to to to our program we can just put C out it's just shorthand so this is just allowing us to put shorthand you're almost always I can't think of I can't think of very many examples where you would not want these two lines of code to start your program but that's what they do but the main parts of the program are this idea of int Main and these brackets and then sometimes there's a a statement called return and we'll come back to that um but int main basically says I'm going to write up what's called a function here in this case it's called a main function and and you're going to use this function uh to do to do something so what happens is when we build this program um the operating system or anything else that's calling this thing says okay C++ we've we've we've got an agreement here you're going to give me something called Main and that's where I'm going to start running your code when you give it to me so that's why you need to have Main and they int here means that this program returns a number this int stands for integer um and it returns a program a number that tells us uh basically it returns zero if things went okay and it returns a number uh any number if something went South if things didn't go well um and by return I mean that the program basically kicks out an output of zero or another number you remember how we talked about input a process and an output well the process is this main program and the output would be that number and uh and most of the time time you won't see that number but if things uh don't work right then you will and then lastly we have a single line of of code here that's basically saying take this world or this uh this uh string um called hello world here uh and uh and and then the this n here this is basically saying put a new line after this this this sln it's a special code special uh computer code that says when you see this it means give me a new line that's that's what that means um and then it's basically we um so there's a key distinction that has to go on here everything else here is computer code this is doing something and this is telling us to do something and then this whole block is telling us to do something but inside these quotes this is actually literal text so to help help us change from uh you know like Main and namespace when we want to say okay I want you to actually just understand this is text I'm giving you to do something with then put it in double quotes here like this that's what that means and it's very important that you do that uh when you're when you're when you're writing messages it'll become second nature that's called a string and that's how we we put strings into a program directly it turns out there's other ways you can get them in you can read them from a keyboard things like that uh but this is how we do it when we want to do it directly um and then when we write what's called a statement you'll see another one up here um we put these semicolons at the end and that says this is this uh this is done now um uh you can go on to the next thing you can try to evaluate this code and do something that's what semicolon means and you'll put those at the be end of most lines you don't put them at the end of functions but when you're actually doing something within a function you you do that and then lastly we have this C out and these two less than signs um that's basically saying you're going to stream this this is called a stream operator and you're going to uh stream this to the standard output and in this case the standard output is the screen so what this statement reads like is take the word words hello world with the new line and then stream it to the output so this is a common way to write things to the screen we'll do it a lot we will do it a heck of a lot so get used to this as well and then we use a semicolon this says we're done that's kind of kind of the basic structure of all that and we'll examine that in a little bit uh let's see so just like what we talked about some Basics here um leave this on the screen this is straight from your texo none of this should be a program starts in Main and goes and writes runs the things within the uh the bra the braces there um each statement basically is one line at a time and ends with a semicolon um much like the way English words end with a period [Music] um uh okay I I grabbed this from the text but basically um we have to tell it uh we create variables sometimes we didn't do it in our our program just as an example but we basically have to tell it what kind of so wage here is a variable much memory location like we talked about in previous video um that contains an integer but if we wanted a string we'd have to say you know a string variable so we use int uh for integers and string for Strings things like that and then this equal 20 basically says give us the value of 20 and assign it to wage and that always goes from right to left so basically you you couldn't go 20 equals wage uh that wouldn't work so uh but you could do uh um so what you do this is literally the number 20 and we put it into the wage variable and then much like we talked about see out and return uh just a little bit more about how those things kind of kind of work again this is from your text but these are things I wanted to high out if these things don't make sense please come talk to me the these are crucial backbone parts of your program that you're going to have to have in every single program uh let's see so here we talk about basic input and output um so uh output we talked about uses that c out operator and we use the stream and then we have in in this case a uh a uh a string that we give it with a semicolon but we could also put a variable in here and it turns out we can put any kind of variable in there and that will take a number or a string in in this case and put that out to the screen much like that we can do we can read input from standard input standard input is usually the the keyboard the keyboard for most users and that's what you'll use in this class and here we can um we can use this C in operator as opposed to C out so C in basically reads input from the keyboard and streams it the other way that's coming in and putting it in a variable X this is one of the very few times you'll put the variable that you're assigning something to on the right side it doesn't happen very often almost always as a matter of fact I think that's my next slide um is you almost always put the uh the thing you're assigning to on the left and this reads assign the word Trev to the variable which is a string first name and so we have string and we have integers and things like that now string it turns out is not actually built in to C++ so we have to go out to the standard library and I mentioned this ear with STD and say okay you use this V this variable type called string from the standard uh Library uh standard template uh Library um uh so if you just put string there it wouldn't work now sometimes you will see see string there by itself though and when you do it's because we added that name space uh to our program like this so we can use namespace like this um and uh and use uh strings like that or or um Well here here's an example I did both here so we could write it if we didn't have this namespace on line three here we could write STD SE out like this with the two colons and that's basically saying in this air in this um name space is what they're called uh we've got STD and it's going to tell me how to use the out or I'm going to say using that for the entire program and then you don't have to write this the STD anymore that's all that's going out there so your input and output functions are great examples of that and the the is true of uh of your strings and that's the that's the STD one there's other ones like sorts and things like that that are built into that uh but that that's very good to know about as well um so this is uh basically how you input and output text we'll do a lot of examples of this in weeks one and two here uh but these are things that are very important for you to know how to do uh assignment from left yep so the uh only other you can do operations so in this case uh the first one we just assigning it the second one is we're taking two literal numbers that we give it um and assigning um two plus s so these are numbers the computer knows about um when you don't have uh uh your literals in quotes it tries to treat them as numbers so strings are are literally the text um but uh so like Trev was a string there and actually this should be a double quote you can't use single quotes that that that was just PowerPoint autoc correcting for me um but when you don't have quotes here um and you have numbers these are just these are actually numbers um so you could have the the string two uh up here and it would be just the just the just the the number two you might want to say like an address right or um uh uh what would be another example of using a number um you know like flavor number two or something like that right there there's there's nothing that you want to add to that you don't add things to to flavor number two but you could certainly add the number two to seven so if you put two in quotes this won't work but if you put two by itself you can add it to other numbers or other variables it turns out so if we have um an age that's a variable um and this would have to be a number otherwise it' throw an error um if you basically said if I've got an age say you know I'm 47 um and I say um that's an integer uh variable and I subtract 21 from it I'd get how many old how how long I've been able to to drink legally in the US right that that's what we could do and we can actually store it then remember assignment this this gets evaluated and it stores it here this gets evaluated stores it here you you you evaluate on the right and you store to the left and what do I mean by evaluate basically it does the operations on the right side of the equal sign um and and and processes that information and condenses it down to one variable um in the order in the case of mathematics it's just like what we did in math class where it goes through the order of operations pem dust and all that kind of stuff and it says evaluate that to a number or evaluate that to a value that I could store into the left we can also do that thing do that with what's called a Boolean variable and those are called Expressions um actually all these are called Expressions but Boolean expressions are very useful because we can take a lot of complex logic and say um you know basically do those evaluate to true or false and we can execute blocks of code based on that more on that in coming weeks though the point of this all though is that we execute on the right side and we store to the left very rarely do we do that the other way and then lastly I talk about comments and I do want to talk just a little bit about repet here um and and compiling uh but actually I think I'm going to do that in yet another video um uh now that I think about it uh we we've got a video for that I want to see how well that's done and if not I'll come back and touch this again so uh that's basically the structure of a C++ program but next time or in another video that we'll link right after this we're going to talk about taking this code and running it uh in and compiling it into ones and zeros which your machine code that the computer can run