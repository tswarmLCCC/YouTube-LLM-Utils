we are in the middle of a uh fi uh not file input output but input output unit in general as we uh continue uh studying the uh built-in features of python and deep diving on uh different features that we may have glossed over uh but maybe not examined all of their features so we're we're not trying to be comprehensive in that way but we are certainly trying to jump in and explore a few more options than maybe we were aware of um in this input output unit we've uh previous previously studied the standard input and output uh in in terms of key uh keyboard reading and then outputting to screens uh recently we studied string outputs um in this unit um and we're going to continue that study by instead uh changing our input and output methods from uh what we can visually see on the console or the python notebook to um essentially uh file input and output file input output of course uh involves writing um our input and output to a dis or from a dis um and it has the benefit of uh first of all giving us multiple targets we can certainly read and write from multiple files and we can also do a lot much quicker um than uh than what we can do with um what we could do with you know waiting for a user or printing things out and waiting for users to read them we can uh simply essentially dump output to a file or files um and people can get of them much faster so the basic syntax which we've probably seen before is this with open or just open uh uh um object so uh there's two versions of this of course we can assign um the uh the uh um handle that gets um uh output from the open uh the file open command to a uh a variable called file or we can use this width operation the width operation has a nice benefit of closing the file when it's done so basically this file will only be open uh why while uh we're in this with block once we get back past this writing uh bit here the this file will be closed so uh let's uh let's pop open my Explorer just for a sec and we'll see that there's not a or there is a work file here I'm going to delete it just for a sec it'll come right back I promise and when I run this we'll see that that indeed does get created we got a work file here that was just created with this block and uh and then on the next one we actually open that right back up so it was closed um and then we load the variable content from the file. read which reads which we'll see in just a sec uh reads all of the content and then it just prints it out and we get get a string output from there but we can of course see that in here we see the same stuff uh and with our new line character sln uh we see we we um we we basically created a new line this is um uh something that you have to put when you use right or you could use right lines uh right line to um put a a line character there as well uh we'll see that in a sec um we we'll explore the the width uh bits in just a sec but uh the uh the main thing though is that uh the the when you use this open of course you're giving it a file name the second is a is a essentially a small little string that tells you um the way the the file will be used um that can be R when you're wanting to read it w for writing um uh and uh of course that will blow away um an existing file so if I if I use this uh operation again let's go ahead and just demonstrate that let's uh let's go and put in just some junk down here and I'm going to save it real quick so this is a saved file just to demonstrate that I'm going to reopen it and see that we see all that if I rerun this block up here now we will see that uh that now is not there anymore because we used the W the W let me close others just because we'll be doing this just a bit go save that yeah um The W uh by default will uh overwrite the uh the files in there there's ways to append to it which we'll see in just a sec which is the a this opens a file and you can write to it uh for a pending um and that gets changed to the A r+ uh opens the file for reading and writing um uh the uh uh and then of course if you don't put a mode in at all it's it's read only um so ju just be aware when I say read only by the way it means that you can't write to it um it's it's basically uh examining the file letting you you extract information from it but you won't be changing it to do that you either need R Plus or W or a if you're adding on to the end let's see um there's an optional encoding block uh that you could type here without getting uh too too much into that uh what encoding means is it's basically the uh the um way that the ones and zeros that represent the strings uh are decoded from uh basically text um and in and and stored on disk um you'll you'll see different file formats out there in the in the wild um uh and sometimes you need to specify how to read those things uh certainly oops didn't mean to write that go away copilot don't want you right now um uh so you you could certainly uh do that um the one thing that uh that um uh you you should get in the habit of using is is closing the file um now you'll see here that uh that that this is indeed closed so you can use the closed method um or exact actually it's just a very variable it's a Boolean variable within the object um to to see if the file was closed um again uh when you use the width statement the file does get closed by default um so when we check it it is closed but if I did something like this instead let's go ahead and make a new block of code down here and let's do instead let's do the other way you can do this we could do um and let's say I want to let's just do the same exact thing I'm just reading it now we don't put this in a block right because it's not within the WID block um and then let's see if it's closed now um and actually I'm going to make work file two here I'm G to I'm going to open uh work file two uh and let's make it a writable file uh so let's just grab open this and we'll do instead of uh let's do this where we want a writable file oops and we don't need the encoding anymore because we're actually writing it and then we will do a simple f. right yeah just a test and then let's see let's not close it here and see what happens right so when I run this you might notice oops I don't want that right now um You might notice that we have a file getting created here called work File 2 but there's nothing in it right kind of interesting isn't it so if we do f. close here now and actually I'll even do it later we we'll do it let's put it down here so you can recreate this experiment let me get rid of this we don't need you um you'll see that when I run this block that file will then get uh get information put into it uh let's do this and then you and then when we go into work file here uh why is that not working file to right let's uh I guess maybe it doesn't persist over there uh let's let's instead do it this way and uh we should now see why is it let's reopen it see if it's in there now huh there's something going on there off to oh it's because I'm literally not closing it there we go that that should work much better now I didn't call the function there we go just a little typo there um and of course the uh point of closing functions so let's uh let's let's redeo that let's go and delete work File 2 sorry about the bad demo there yep just get rid of you it's locked because I have it open okay I get it okay let's uh now let's delete work file too yeah delete you oh my goodness stop opening let's all right let's try this one more time delete you oh you know why it's because I don't I think I I've got it open so let's let's make sure we file the it's got a lock on it so when you have when you're working let's just delete it now um when you're working with files and you've got them open um some reason it's really oh I think it's because I I messed up and and put the lock on it earlier um let's just restart our kernel that should let go of it now I should be able to delete you okay now when I run this we will see again work file nothing in it right close that down when we close it now and we go back to work file again then we get our text um and that's because the file wasn't closed essentially it's in memory and saying I can write write to it so that's how you can use that and hopefully doing in doing it that way yeah now we can delete the thing so just a little bit about file closing and an important one at that all right that's a good uh uh simple version of file IO uh let's uh let's let's step forward now um and talk about structure data in our next video um I'm going to stop this one here um one one other thing I'd like to add though because I'm I'm actually I'm running off uh to a conference right now um if I don't get back to it um we're not necessarily talking about how low how to load files from uh from files here just the operations themselves but there's a lot of and we'll see this in our data science unit and certainly other units there's built-in methods to these things but basically you can start to use string methodologies uh uh string Methods to to pull Fields out and things like that so um there's a reason we're not talking about those right here we're trying to segment those two operations to to keep the the uh so these are talking about file level operations how to read write and all that good stuff um and then we'll get into um essentially data science uh in the in that unit in that in that unit in particular so okay thank you um and let me know if you have any questions about this