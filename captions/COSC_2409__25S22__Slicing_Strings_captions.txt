strings are uh kind of an interesting Beast um in the way they have to be built um and this is true in any programming language they're they're not um the data type about the native data type of a string is actually just a character um a single character so think of one letter or one number uh represented as a character um much like numbers uh but then they're stacked on top of each other they're they're uh actually used uh and we're going to cover this in just a bit they uh in Python they're called a list a list which is like an array in other programming languages except there's some um benefits to it they're Dynamic for one there's some built-in features that make things really nice to work with them natively in Python that um are kind of hard to do in other programming languages and one of those uh features is what's called slicing and we'll see this again with lists uh when we study them uh both in the next unit and also in Earnest when we get to uh uh the iterative units uh in like week three or four I think is where where those are at um but the short version is here we're going to actually uh store a uh a word the word python so I'm just going to hit control enter you'll see that go down there oops um and I can just type oops ah dang it sorry uh if I actually just type word here you'll see that python isn't there well it turns out that I can get individual letters of that um I can use this subscript here so this bracket and the number are what's called a sub subscript of a list or in this case a string um where uh it basically gets things at the position or the index so this is the zero um remember in computers uh in in computers very often things start with zero instead of one when we're counting so the first position is zero so you always have to subtract one uh keep that in mind but if I run this one we'll see that it's just going to give me oops sorry I keep going down there um Let's do let's just do our let me clear this out real quick um you'll see here that when I run this we get just the p and what's basically saying is look in the the zeroth position the zeroth index and return what's there similarly when we run the fifth one we will get what's at the fifth position so that's p y t h right o n now remember that we started if you're if you're counting along with me there's six letters here right n is in that sixth position uh but we index that with five because we start at zero so that's zero 0 1 2 3 4 five right that's why you you you do that um because we start at zero um it turns out you can go backwards so if you use the negative index like so it will start at theend end uh which again has a lot of cool applications um we'll get into all of those here why you'd want to do that but you can start at the back too but here that you know in that way you don't have to know how long it is to maybe reverse the thing or things like that uh similarly going back to uh would be the O and you can see this of course in the comments of what I brought in from that tutorial the next thing you can do is you can use this colon to grab several of these at a time so the colon basically means go from here to here start position to end position so in this case it's going to go from zero to two which is going to be zero which is p and then Y and then it ends at two so it doesn't include the last one it goes until it if that makes sense um so let's go ahead and run that just to demonstrate that um so that's not saying go to it's go saying go until you hit the the second position so if we go four we'll get uh four characters of course um like so and uh you can also um do the same thing with your um with your your start so this is saying start with uh with basically the the the the third position zero so p y and then the third one will be two right um and and and then it will go from there on so we can get uh th there because we're going from the second position to the fifth um that's kind of hard to do in other programming languages I I don't think uh a lot of uh people that have only used python will appreciate that uh um convenience that that's built right into python until you go try to do it in other programming languages for now you're going to just have to take my word for that um extending on from what we already know well let's do two things here because I want to show you one thing before it starts to build things like this um you could actually omit the beginning and end um and still use that same syntax so here it's going to start at the very beginning you could think of it as zero here but uh you can actually just leave that off and it will grab the first two so basically it's saying start at the beginning when you leave it off you can do the same thing let's say I only want the last three or you know starting from the last three things instead of do a negative3 I could do this and it will say um go or I'm sorry this goes from the third position until the end so if I did like one here it would go from the second position till the very end so again I don't need to know how long the word python is here it will basically use this to say go to the end another super hard thing to do in other programming languages it's just built in um and then you you can of course uh do the same things we were doing earlier in the earlier string video where we add these things or we could do things like uh this where we use some of these mathematical multipliers to repeat them and things like that and and you can all uh you can also assign these to variables so if I wanted you know partial python equals this then I don't want the quote that's because it's part of the function it will assign just the uh just just what uh it returned to back out to a new string and I can use that appropriately as well there um let's see do I have anything else with these things I don't think so the one thing though that will uh that that's really nice let me just go back to one of these let's say I did something like this silly like I was doing maybe some programmatic math it actually handles that okay um it will basically grab all of them so if I referenc something out of range in another programming language it would explode in my face python handles that a little bit more gracefully here just something to be aware of that even though things like this might be working you might not be getting intended results there um as well oh one thing um and this this gets into a bigger subject uh but uh uh the uh lists and uh strings are what are called immutable so let's go back to python just just our our word here still in memory right um You can certainly you know do things like this we just studied this right where I can access things uh within their uh by their index but I cannot assign them they're IM immutable uh what immutable means basically that they cannot be changed um I cannot assign like the I couldn't do something like this where I say I want the character let's say Z instead I assign the character Z to the the fourth position in this case in word it gives me an air it's immutable and that's what when you see the word immutable that's what that means or it does not support item assignment now I can of course just blow the whole thing away and reassign word this is okay I can do something like this where it uh well if I would use the right quotes I could do this I can reassign it but I cannot re I cannot mess with that word once it's created um uh in the native uh string data type it's called immutable um there's several immutable objects and they they need to be that way for for where we are in the class right now uh without explanation I know that's not great teaching uh but they they need to be that way for other operations to work properly but just know that you can't do things like there there's functions to do that though you can basically use replace which in turn U uh string replace and things of that ilk which what they do is they take the word and they make a copy of it change it there at during its assignment and then return that as opposed but you can't do it negatively um uh uh of course um it'd be akin to doing something like this um so say I wanted to so let's say we got word here um and I wanted to get the the third character I could do something like this where I could do an operation where I'd say give me up through the third character like so and then I could add the Z right and then I could add uh plus word uh let's say the uh fifth character to the end I can do something like this because What's Happening Here is it's uh grabbing the first three and then basically tacking that character in there and then grabbing the last one and I can actually assign that back to word if I wanted to at that point which would be the same operation but you can't do it directly if that makes sense what I just did so um just just a preview though this isn't everything you can do with strings it won certainly hit other things but things to look up that you can look up um if you're interested there's Tech sequence types uh which is the Str data type um they they support uh you know things like um you know what's the third word fourth word things like that um there's a bunch of string Methods like I was talking about where you can replace upper lowercase things like that those are built into into python um f strings which are a way to format strings much more elegantly than doing them by hand um and a few other things like that we'll we'll cover those probably in Earnest uh down the road but right now just in this intro like building blocks of python unit I think this is sufficient so I'm going to stop here and we will go to lists which we briefly introduced already