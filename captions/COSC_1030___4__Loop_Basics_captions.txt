hello we're continuing our uh conversation and study of computer science tools uh this week with um we're going to start talking about using repetition um and um repeating patterns of data uh uh both in isolation and then together to really do what computer science is known for which is processing a large amount of information quite quickly and efficiently um the uh the um the two um types of collections we're going to talk about in C++ are called arrays and vectors and then we're going to study a couple kinds of Loops that that uh work with them and go along with them we we'll start with our our discussion of Loops here um and then we'll go into arrays and and vectors uh you know kind of um jointly known as condition or um sorry not conditions um collections um uh and and uh and and see how they kind of inter interweave with each other so just a little bit about loops if you haven't studied them before or if you have uh we maybe go a little bit deeper here a loop is a is a basically a control statement in in a program that repeatedly executes um the the block of a code so if you think about an if statement how it has a block that conditionally executes um when when the the if statement uh the conditional statement the if is true the same is same thing is true uh with a loop uh basically there's a condition to that and um and the block will execute uh when that that condition is true in in the the loop conditional statement the only difference or a big difference between an if and a while statement is when the or a loop uh in in in general is when a Loops uh program executes and finishes it will go back and revisit the um the the conditional statement the uh loop uh you know um the the loop uh execution uh will proceed and and repeat if if that condition remains true when it goes back and revisits it otherwise it kind of moves on so I ifs and WS are kind of kind of similar they both have um an expression that is checked a Boolean expression that's checked and if that's true a block of code is run um whereas an if statement will then exit and move on it'll exit and move on a loop will go back and and run again or check at least check again and if that if that Boolean condition remains true it will it will uh kind of keep going uh and repeating that same task over and over again until that condition eventually becomes false um if it's false when it gets there it just it just skips over it just like an if statement would um another big difference between ifs and while ifs statements or conditional statements and Loops are that uh Loops don't have an else statement equivalent they either execute um once or repeatedly or uh or they move on where an if statement might conditionally make a secondary or third or fourth block of code execute depending on how those evaluate so that's a little bit different um let's see Loops are like I said earlier um a primary reason that computers can do a lot of things fast they they basically uh um are are kind of known for either iterating over a collection of data where it takes the data and provides different inputs with a similar block of code and produces outputs that are based on the input but the same code is executed or at least similar code depending on the block of of the loop um so U the other thing that can happen is is sometimes you just to iterate over a loop a certain number of times for example if we wanted to count to 1 to 10 uh your your uh conditional statement might be check if this variable is greater than 10 and um uh or less than 10 so the the loop will execute while uh the um the the the Boolean statement evaluates to true so if the variable is less than 10 it will keep going and what it will usually happen there in that kind of loop statement is you'll increment that variable or change that variable in some way during the execution block uh that you know the conditional block that gets executed and that will update the uh the statement that it eventually becomes a Boolean statement um and uh and then it will eventually uh uh leave so you'll either go through a list of data or you'll go through um you know some sort of uh logic that that sets the conditional statement to true or false um if that does not happen for some reason if if you enter into a loop um so the the Boolean statement is true when you go in um and then it never updates you'll be what's called stuck in what's called an infinite Loop where the loop keeps continuing forever and you never leave sometimes that's what you want but most of the time it's not so you'll most often uh either update the variable as part of the logic of the loop or as we'll see with four statements you'll update it uh in a controlled manner as part of the loop statement itself um once in a while though you kind of want things to repeat indefinitely um this video is a great example of that this video is a program that you're watching of it's taking different input which is just data I've recorded via my webcam and and on disk here but your program is just grabbing the next frame and processing it and putting it to your computer monitor and your speakers or your headphones just just like I'm W so um anyway enough about the theory um we're going to St study Loops a little bit by talking about uh first talking about um what's called a while loop and it's kind of the most common structure in C+ plus and it's it follows this this syntax up here uh where we have an expression and while this is true the the um the body uh executes um we have an example here of that where we have uh essentially a program that's uh taking a years per generation and some user in input a user year and uh a a year under consideration and approximate ancestors in that considered year so it's basically going back and saying okay 20 years ago I had two ancestors my parents and if I go back two more um I might have four and then if I go back 20 more I might have those four become eight because they each had parents right so the idea is that we keep compounding this number well we do that by basically saying while the year under consideration is greater than or equal to the user year um which is how many years ago we're going back we're basically going to do some math here and keep keep this continuing until this this year under consideration um uh uh the uh it basically while the year under considerations um in um greater than or equal to the the uh year that was entered sorry I'm stumbling over the program here um it keeps outputting but eventually this year under consideration um is it gets decremented each time so this will fall under this level and then it will exit and move on um so that's the key thing though right is this this is updating and it's affecting one of the key uh the values in the expression here um often uh we'll see um this pattern where we uh we set up the uh the variables outside of the while loop um in this case we take the user year and we have a constant year which is the year under consideration um those are set up beforehand and then we enter into the loop and we manipulate them further uh so we have the general sense of that and then a strip down version of that so in this case uh we are um basically taking a number and reading it in and while that user number is greater than zero we keep uh using the modular modulus um uh operator here and we keep we we're basically dividing it by 10 uh at the end and then printing the remainder so this prints the remainder each time so say we had a thousand right so the user number is greater than a th it's going to go in or say it's a th4 right um so what we're going to do is we're going to go in and we're going to get the modulus of that and it's going to be four and then we're going to divide that number and update it divided by 10 so we'd go to 100 and then 10 and then finally zero um and that's where this would exit so basically is going to produce four each time is how to read that but the idea though just to just to reiterate one more time is here and here and here we're setting up the uh the condition that we want to examine beforehand we're doing something useful with it in this case printing in this case doing some ancestor uh uh forecasting I guess based on some some kind of back of the napkin math and uh and here we're printing the remainder and then we're updating those conditions in all or well two this one omits it but um uh but this one could is a very good example of do you want to continue that kind of loop for example um where we might have say you know do you want to continue up here or we'd say say while why this person says continue and while they keep saying yes it continues but then they might you might see in user Char here and if they say no then you exit the loop right that that's kind of how that works uh let's see here oops there we go um as opposed to a um while loop a four Loop um does all of that all of those three things in one one place so what you have here is very let's see yep I can scroll up here so here you might consider the fact that we have let's use this one we'll use this as an example here we have an initial condition where the the user number is greater than zero and then uh and then at the end we're updating that right well we can do the same thing where we have an initial expression and a condition expression so basically this is saying um um you know we'll start out something well here's a better example we'll start out a variable called I at zero and this will continue while this is the while part the conditional expression here is the while part oop I need to move my picture sorry about that oops had it up there from something else and then the update expression is what happens at the end so um here's a great example every time we go through this Loop it says or I'm sorry the first time it says set I to zero right and you can actually shorthand that and put into I equal to zero and then you wouldn't even need this but you can also do this and then you're going to continue this block why I is less than n and then you're going to increment I uh at the end of each Loop that that's all that means so again start I at zero keep doing this Loop why I is less than n in this case um and N would be known somewhere that's just that's uh you know that might be up here might be written from the data things like that and then we're going to increment I so basically I at the end of this will get updated to one and then two and then three and say n is five well once it gets to four it's going to increment and then it's going to leave it's going to leave um the plus plus I uh is basically um a shorthand for IAL I + 1 um and it's a very common thing so you're able to to but you could absolutely WR put I equals I + 1 or you could put anything else here you don't have to just increment them you could say you know uh you know uh given our previous example like exit Loop equals no uh you know and then exit Loop uh uh equals no again equals equals no so this is the assignment you could say equals equals no the assignment or the equality operator and then you could just say input uh input or CN uh user input you could do that there too as well um anyway the uh i++ though increments I just by one each time and or i++ I that does it before it's evaluated i++ it doeses it after it's evaluated and the book likes to use Plus+ I I don't know why I've hardly ever seen it used in practice um i++ is much more common uh and it's of often a little bit safer so just a little bit about for Loops so um the big trade-off and I like this slide a lot of four versus Wild Loops they both do the same thing they both have a an initial condition they both evaluate that condition and see if things should be ex continued and then they have a way to update themselves one way or the other um a for Loop basically does all that in one line and you have just a little bit of control over that um and it's very useful when you know how many times you want to run through something like you know for uh reading a number of records from a file or counting to 10 or um continuing to a game you know runs out of uh lives or something like that where you know how many times or at least have an idea how many times you want to go through that and you can absolutely affect those variables um as you're doing it a while loop uh is more useful if you have a lot of custom logic that might might uh monkey with your your um your Boolean statement your conditional statement that is controlling the loop uh games are a good example of that um sentence values uh much like we talked about earlier or well I guess I skipped over it earlier um are useful for that as well um let's see where was that yeah so the Sentinel values are basically saying when I when you run into this leave all right so you just check to see if the incoming value of a list of values is for in this case Zero but it could be anything it' be like end of line or things like that that's how uh file reading is actually done quite a bit anyway um while Loops basically give you a lot of control over how things work where you want you have flexibility or you need to evaluate some complex things and you need to build a lot of logic to it and then perhaps update a value that's controlling it so you might have you know like a remain in Loop type of of um a Boolean operation controlling the whole thing um and then you just go while remain in Loop and then during your logic you might check like five different things and if any one of them pass you could say exit Loop or while loop uh you know while remain in Loop and you just remain in Loop equal to false and then it'll exit and move on so that's kind of the basics of Loops I wanted to talk about those to begin with um but I'm going to stop the video here before we move on to to nested Loops here uh and then um with a a short jump into um dictionaries and or I'm sorry not dictionaries sorry I recorded at python video just a little bit ago um before we jump into other things like uh our our vectors and list and things like that so um that's where we'll leave this one and we'll pick up on the other one in just a bit