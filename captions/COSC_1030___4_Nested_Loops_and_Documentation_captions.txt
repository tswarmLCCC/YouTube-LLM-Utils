okay oops sorry jumped down a little bit um picking up after we talked about four wor four the two kinds of Loops um you can you do a lot of things with loops U let me move my picture again sorry about that dang it sorry grab you move you up here there we go there um you can put if statements inside of loops and you can also put other Loops within Loops when you put Loops within another loop that's called a nest Loop um you'll often hear the the two Loops called Inner Loop and outer loop so in our example here we have a a need to basically put two letters together um so we have basically for every letter in the alphabet we have every letter of the alphabet put next to a and then B and then C we repeat through the alphabet and then we we basically tack on every letter of the alphabet to each one of those which is a great illustration of of how these loops work so the idea here is that we um we have a loop an outer loop here and we're saying while this letter is less than or equal to a or Z I'm sorry we started off at a we basically uh write the same Loop inside so this is going to set this first letter to a for this first iteration so you're going to come in here and it's basically going to say um while uh the the first letter the letter in that First Column is not Z keep doing this thing right well then what we do in there is the same thing but with it while that letter one is set to a we Loop through a and b and c and d and e um uh and Tack that on right so the idea though is that like the outer loop um acts kind of acts as the environment for the inner loop while that's going on and then when you get through the inner loop it increments the outer loop so um we go a a a AA and you can just see what we do here we're incrementing both of them um they they look very similar right uh the the uh important thing though is to make sure that you keep your variable straight especially your control variables so if like for example we put letter one here uh we'd never leave right there's there's ways we could really mess this up so you could think of this Loop if I got rid of this while loop of doing just something and then within that you can actually spiral off of that and say while I'm in that mode of having a or J or whatever I need to go through all of them um here's another example um of essentially taking numbers graphically so this is um this is basically saying uh we're going to uh have the number of uh asterisks and we're going to use the outer loop as a control Loop so this whole thing only executes if um if the person um uh enters uh the number of asteris um greater than or equal to zero um which is kind of like a menu system right you could also say do you want to continue yes or no but this while loop will keep going while this is true and while it's in there uh basically you'll read that number in you'll read that number in here and it will just simply spit out the number of asterisks and we do that with the inner loop um but we use the outer loop to control the thing and then we use a different Loop inter inside to uh to it R and um and and do do the actual drawing and you can see here that you can combine for example while loops and for Loops which is also quite convenient you could put anything in there as a matter of fact we actually have an if statement in here as well in this more complex example this is a fun one to play with play play in your book with um as well uh break and continue uh are also uh the a lot of great examples in your book so I didn't give any iterations here I just wanted to talk about them a bit um a break will immediately execute the loop that you're in um it can be super handy uh to basically handle complex logic and say you know if any of like five things are true break right that way you don't have to control the variable that is controlling the loop directly based on those although you can but it can make your wall statements um a lot easier you see this a lot in menu systems where it's basically while somebody keeps continuing uh to uh to enter you know a valid menu item they'll they'll get one one or three options and your your program will execute whatever function that that that uh that um that menu item represents and then when it's time to leave they might choose like an exit item or like the last item and then they'll break and leave that um where they don't have to uh they they don't have to write a complex uh statement that uh you know only tests for that that last item because you know say it's a menu item uh of one or two initially where one is do something useful and two is leave um uh you know you could say well if the uh user item is two then leave you could write that in into your Boolean statement but what happens if you add a item number two and you still want the last item to be well then you need to update everything where as opposed to saying your last item you could just say break continue is very similar um where it doesn't necessarily exit the um the the it doesn't exit the the loop but it will stop execution of the current iteration and go back to the beginning um and that's useful in a lot of ways too um there's a lot of great examples in the book and we'll study them again in the code uh but uh these uh can make things very readable uh in your code and easier to uh Implement and extend you can often avoid them though by using um you know kind of control variables to begin with like you could our our previous example where we wrote something like remain in Loop equals true and then um you know the the while loop could say you know while remain in Loop which evaluates to true because it's set to true and then in the loop if something happens it makes you want to leave it you could just set that to false as opposed to use to continue and break um so that's perfectly fine too let's see I think I got one more oh just a little notes on documentation um is that uh a while loop you so we have you know sequences uh we studied this a little bit with if statements and certainly in Python we did as well and then we have conditionals right where we go left or right uh based on like true or false well a while loop uh it looks a lot like a conditional the true statement basically goes um and this is so this is usually your true arm over here and then it executes that and then it comes back to before the if statement that's how you can diagram that so they look the same the loops look the same or the the shapes look the same the idea though is the arrow goes back to where you were before and then when this continue executes the false you move on um what not and we talked about this uh a couple times already but the idea with loops and especially nested Loops is to start small and make sure that um every part of your program is doing what you want and you can do this like we talked about in the if if unit you can do it by uh printing things out you can um set variables explicitly and make sure that the the um inputs to your Loop are behaving like you expect before you add more complex if statements and inner statements and things like that um kind of a key po point of of that whole thing too so small start Small Program incrementally I'm going to even oops I'm going to even I'm going to even update this to say that because I it's just a key key thing just going to make this as bold let's let's let's H The Bold and the underline and the yellow all because it's a very important thing I really hope that you write small bits of Code test them run your program print them out things like that test them and then move on don't try to do too much at once um it's a common mistake a lot of a lot of beginning programmers make and I I certainly don't wish that for you let's see do I have anything else on Loops oh oh certainly yes scope um so the idea of scope is that uh um program variables um they they don't live everywhere those are called Global variables um let's let's actually go back to an example here um so if we if we're talking about like this letter example we talked about earlier um within these variables in letter in this inner loop they only are allowed to be used within this block within this block because they're declared there so um you couldn't use letter two for example down here unless you could create it outside so you're the the the variables will they they you can use them inside blocks that um let's say we're in our main program our main program going try to do this backwards because I'm backwards on the um as you go into an if statement or something like that you can use things from the outer World the Main statement in the F block or the while loop but you couldn't use things from the while loop that were declared there outside of there it doesn't go the other way so they only go down um so for example you could not use letter two right before this return statement you could not use letter one be before this return statement but you could use letter one in letter two as a matter of fact we do that here um just a key thing that will help keep your program straight um and and you might understand not understand why you can't get things so the uh the book has a whole page on this but I wanted to talk about it directly um that basically when you when you start to put blocks of execution together like this as you go into subblocks you do not those variables only exist there the same is true of um of functions as well when we get to functional programming down the road so uh just a bit on those um yep and that's where we're going to stop this video uh and uh and then we'll we'll go into uh Collections and we'll talk about arrays and vectors uh very soon which turns out play very very nicely with our conditional statements that we just talked about