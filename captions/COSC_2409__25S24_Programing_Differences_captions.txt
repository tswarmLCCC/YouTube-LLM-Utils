I want to talk about one more thing in our intro uh to python Basics unit here and it's the idea of putting together a program so far I've been very deliberate in showing Singleton lines just one line at a time and what they do and how they execute now sometimes they've been a little complex and we combin some things but um it uh you know obviously we want to do more with python than just that so um and I want to talk about a few features in Python that you might not see in other simple programs um so we're going to use this simple example and again this is all from the Python tutorial it's in the online documentation um if you want to reference it and and get better explanations than what I give quickly here but uh there's quite a bit going on here um That You Don't See in other programming languages uh so let's let's study this program line by line even though it's a four-line statement there's a heck of a lot going on here the first line it contains um a multiple assignment this a comma B right uh well all it's doing is basically saying a is going to map to zero and B is going to map to one um A and B Sim simultaneously get their values uh from the sequence that follows this is not something that's very common in other programming languages uh but you'll see it quite a bit in Python um as a matter of fact in functions in Python you can return multiple values um and and and get multiple things out which is super useful if you've ever tried to do that in other programming languages usually you have to Define and and uh and uh and and pass around uh an an advanced data type where you don't have to do that in Python um so the main thing to know is that these are evaluated in the same order that they're evaluated um in the order that you give them um the uh the other thing I really wanted to introduce early and we're going to study this a lot next week when we get into control structures is this idea of expressions in Python and then the control structure so uh the uh the while loop if you've studied Loops at all um basically while B evaluates to anything less than 10 this is a constant and B is a variable of course that we defined up here well basically this whole thing is going to uh evalu uh continue while this this part of the code is remains true so it'll go through here and it'll initially check to say is B less than 10 of course it is because it's a one right now um and if it's less than 10 it's going to go into its control Block in other programming languages you might have seen braces around these things uh around this control block um but here it's indented um this is Python's way of grouping statements uh you have to type a tab uh before each line that you want and you to uh go down further if you had an if statement or a well statement you'd go another tab in here um and basically it's over and I'm going to even build a statement here I'm just going to print like done here yep uh thanks AI for helping me out there but the idea though is these get will continue while this this remains true this is its sub routine um and that always follows a colon um so uh you'll basically have uh the the colon there um and it will go in into its sub routin and do these lines as long as this remains true the same thing's true with if statements switch statements and and functions and a lot of other things in Python that's the main difference that a lot of people really stumble one when um when they move from a c style language like Java C++ or C into python um is that and it's another reason uh that you have to be careful with what you um with how you indent these because this indent and that so see I did something like that th that's broken because those indents are not the same it doesn't have a control statement controlling this one um it figured out this one it so those have to be consistent is the short version of it all um in your control statement you want the same ones here in this case it's usually four spaces uh let's see so I'm going to actually run this and all it all this program does is it basically Loops over this and continues to update the Fibonacci sequence with the logic and I I'll I'll end the video with walking through the logic but you'll see here that basically basically done is only it only spits that out one time when I'm down here if I instead had indented that you'll see it on each line you see the difference there let me go over that again so um here when I run this it basically prints a and that's what we're seeing here and then it prints the word done because within this control block again within the while loop it's hitting done but if it's outside of that right it's only going to use that one time because it's not going doing this every time in the wild block and that's why we only get the the one here big difference just a simple tab can make all the difference in the world um let's see uh the other thing that I wanted to talk about is this reassignment here um again we're using the same syntax here here we're creating it creating or ex instantiating I can't ever say that word but basically initializing our variables to zero and one down here we're updating them same syntax we're using the equal um so basically we're saying a becomes B right so this is interpreted right to left so B is the previous value of B and then a is updated it and then B again is the prev is the values of a plus b and of course we're just doing this the fibon Fibonacci sequence math here where the second one is the sum of the previous two and and we go down that uh then uh the other thing that we can do with this is uh we can update our print statement instead of printing on new lines print by the way uh always outputs a default new line after each line and that's what we're getting why we see 0 one2 but I can override that and I could say the end line instead is a comma and I can do that by over writing or changing the print function to take a different version of itself and saying hey I'm going to give you um an end line here so we're printing a here the variable a um and then I'm instead of saying the end uh is the new line character which again would be this right um if I run this we'll see that it's kind of the same thing but if I go back to what I just had it's going to change instead of doing a new line character um it's going to put them all on one line pretty slick huh and of course the done here is just cuz I added that we can get rid of that now um and it would just PR print out the Fibonacci sequence um so just a simple uh segue I guess to kind of build upon uh our early intro units and talk about like the the core tenants of python which um I know this has been a lot um and we'll jump into each of these individually visually um more as we go through other other structures but um hopefully you've seen a lot of departure from other programming languages and maybe learned about some things that you'd seen in maybe 1010 uh the intro to Python Programming class that we teach here at lle C and starting to see that there's a lot of options and built-in things to all of this stuff so uh anyway that's probably the end of These intro units uh and then we'll get into um a a little bit more uh down the road um just a bit of a preview I guess of where we might be going um and I'm not entirely sure I haven't written the entire outline yet uh but we'll probably get into control flows next uh we'll talk about you know these if statements for statements and a few things to that end and functions uh in the in the upcoming units um and then we'll probably double back and hit some things like lists sets and dictionaries more in earnest but uh I think you can do a lot with this and and we'll have some fun examples here um as as I build out the assignments but this is the core tenants of it um there will probably be a lot of reference to reading without uh without um whole uh really dumping Jumping In Too Deep so anyway enough of that um let me know if you have any questions we covered a lot of dense stuff here uh but hopefully we set the groundwork uh of what python can do for us that other languages can't with these units thanks