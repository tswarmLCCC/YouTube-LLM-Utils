welcome back to our series of uh python um um you know kind of building blocks fundamentals built-in features uh uh in our continuing series um in in studying python just a little bit more comprehensively than we have in other classes um we've been studying uh lists uh in several different ways uh certainly going through a lot of different design patterns um and uh things like that um one of the uh really cool but kind of cryptic fun uh functionalities uh concerning lists uh in in Python are called list comprehensions which is kind of funny because a lot of people fail to comprehend these when they first see them um but they're pretty simple uh in their own right what they are is basically shorthand uh for a design sequence like this um they uh essentially Loop over uh a an iterable in this case X in range 10 so this you know simply you know count from zero to 10 or nine in this case because it stops at 10 um and then it does something to that um in this case it's um uh essentially pending um this um X squ so if we had a bunch of numbers uh we would we would Square them and we would get those out and that's what we see here um we can do this um with in shorthand so what it what it ends up looking like is is this this pattern right here I'm G to kind of let let's see if I can scrunch this down just a bit I might even kill one of these this one um there there's an intermediate version where we use Lambda functions uh that we talked about just a bit at the end of the functions unit uh in a previous unit um essentially we are taking um everything in the range of 10 as an argument passing it as an argument to this Anonymous function a Lambda function um uh as X squaring it so basically this is the uh parameter for this Anonymous function then it squares it and returns it um and it iterates over this range um and it's mapping that to a list uh mapping basically just says apply this function to everything that you're given in a list or other sequence or iterable I'm sorry not sequence um that that's what that means and how to read that um that's a way to do it but uh they shorten it even more um so let's see here let's uh you know I'm just going to copy this just for a sec uh just down here so we can get it on one screen so I'll just put a code block right here like so just to dis U discuss not there I didn't want it there let's just move you down there like so and then we can actually uh compare these two things um so um let's just rerun this just so we kind of have an idea of what we're talking about um and of course uh let's start with the idea of this range right this range and this range this is a list or an iterable coming in uh in this case it's coerced from a list to or arrange to list excuse me let me take a drink kind of starting off a little dry this morning but the idea is we're iterating over this list much in the way of uh so you'll see the same pattern here this for Loop and this for Loop are identical it's basically pulling out each one of these as it iterates through the range or anything else doesn't have to be that um and then it's applying um it's applying this syntax and returning it as a list um so uh the the long hand we we we create a list up front an empty list and we're appending it this basically uh when you put put this in um in Brackets ahead of time um the for Loop goes after the expression and it depends automatically as it works through that th those are the two big differences so just just one more time we've got three parts to the uh the list comprehension syntax we've got brackets that surround the whole thing and that'll be more important later because you can actually chain these things together we have a for Loop that basically is giving us an element uh for any uh it iterable um coming out of that thing and then we have expression or Expressions um and then there's an optional if statement out here that or series of if statements that we can use for filters that we'll see in a bit um uh so hopefully that kind of makes sense in how you can trans translate those but the short version is um this is a very common syntax so when you're looping over something you'll just do you know 4X in blah and this could be another list this could be a lot of different things it could be a generator function even um and then you've got the expression So you you're basically getting rid of the append the initialization and the uh multiple lines for the for Loop is how to read that and then uh you'll get a new list out um so um and you can of course assign that or you can use it right in line this using it right in line This is a straightup expression that will return a list as a matter of fact well I can't do it in in markdown I can't just run it unfortunately in this syntax but we could we could demonstrate that well actually you know what I can let's let's let's just do that let's uh let's do one more code block probably down let's make it down here if I can get this thing to cooperate so if I just do this we'll see that that actually returns it just fine this this will work even though it's red here uh it's I think it's because I have a space Maybe did I get a space in there yeah I think that's the reason it's yelling at me there we go so you can just do this like I could print it I could stick that about anywhere I want um you don't have to assign it to a variable like that um hopefully all that makes sense so again iteration uh the expression or the uh the you know the control structure that we're building U and then the the expression in the append uh there um you can use these things as filters as well so this is really cool this this is the exact same syntax right so we have instead of range 10 to 20 um but it basically builds uh it it builds in an if statement as well saying if range is uh or if x is in this case even right if x modulus 2 is zero we've seen that before when we studied the modulus operator uh basically the saying if the remainder of dividing by two is zero then return true if not false so if this returns true then it will it will append that to it otherwise it doesn't and we can see the equiv syntax here so this part should look very similar to what we saw above but instead we have this if statement tacked on and that that maps to this so you can build essentially a filter in there as well um which uh again all these are super useful once you you know they're there and they become part of your your toolkit that you're always going to um the first couple times you'll use them you're like where's that go how's that work um uh but uh just kind of you know go through these play with them muck them up um in the notebook if you can or copy them into whatever IDE you're using um and get used to them a little bit uh um but we'll go through a few more patterns here that are quite useful um it turns out that you don't have to even go one at a time here you can use a tupple tuple Tuple Tuple where you can multip uh do two things so this is basically returning x and x squ uh forx and range 10 and we get those back as uh tles which we covered basic a little bit in data structures and we'll cover them a little bit more but essentially we get the first number as the first item and the second number is the second item in each one and those are of course stored in a list coming out remember you can have non you can have items that are more complex than the the The Primitives you know uh uh basically uh integers and characters um you can have those in list as well and you can even mix them um so this is uh doing that in this syntax where we put a comma around this is the Tuple syntax uh we can do this and we could even we can even extend this we could do you know um something like this by you know 3.0 right we could this would add a third thing there where we would get the division so you could do a lot of math right in there in a sequence uh forx or or you know we could also you know x uh by the way does not have to be just X it could be you know one two three four five right it doesn't have or 45 in this case this will work uh why didn't that work oh sorry X that's not where I would want to do that I would want to do that um I would want to do that here I'd want to put it here that's how I'd want to do that sorry about that um uh where I can control what goes in explicitly or you know this could be of course and we'll see this a little bit more in a bit but um I could certainly do this as well all of these are perfectly valid syntax and work great in different scenarios so I'm going to undo this but uh just you know trying to kind of reinforce you know the syntax as we go let's go there we go that's the way it was um so uh the other thing we can do is we can um basically um uh use uh we can we can chain these together I talked about it a little bit ago so um the first thing that happens here is it iterates over um it pulls out item so basically it reads left or right it'll pull out item um from lists of lists so um it's it's kind of um it can get a kind of make your head um excuse me it can kind of make your head spin a little bit but the the short version is first we're dealing with a loop over sublists right sublist in sublist that's this for Loop and basically it's pulling out item and then it's dealing with that in this part um so that's how you very cryptic to write up front but if you start with a for Loop you can you can do that and often um what I usually do is just look these things up and and say how do I use um unpack a list of lists and things like that and start to plug in the list in the right place um but you you can see how these map right so we've got the the four list four sub list of lists um and essentially what's happening here let's go ahead and let me U let let's print list of lists here just to kind of illustrate what we're doing here so we start off with this this sort of list where we've got a list three different lists inside of a bigger list right this would be a 3X3 essentially Matrix within a list there's better ways to do matrices but um for this example we have a three different lists within a list you remember you can you can do that so this outer list is a three element list even though it looks like there's nine in there um those three elements are each lists of three elements each right so that's what's Happening Here is we're pulling those three lists out that's what happens um in the subl list of lists part dang it sorry I'm dragging as I I speak too much in the in the uh so each sublist of list of lists gets pulled out as item so this would be one of these things as it iterates the second one would be this thing as it iterates subl list and the third one would be that gets returned as item and then that get gets returned to this um so you can think of this um as basically saying item over so this could be um you know X or something like that um this part goes with these and then this part goes with the top part um a little bit cryptic but uh hopefully you can kind of understand that and certainly compare that to the for Loop down below um as you go through this yourself it's hard to describe and really do this um asynchronously unfortunately uh but the idea is we we could uh certainly uh break these out into two parts where we pull out first the uh um item where each item is one of these and then demonstrate that we go into it but uh you can chain those together and you can go multi-dimensional this is a two-dimensional uh uh you know uh list of lists but you can certainly go deeper than that as well okay hopefully that makes sense that's the most uh complex thing we will cover today um there's some common list patterns I just tacked on at the end here that we can get get through very quickly um you know I think I'll keep going just really quickly because honestly this doesn't take too long and we're almost done uh and I can get it into one video then um the first one is of course our filtering pattern that we saw earlier um and the key thing here uh or I'm sorry we start off just mapping this is straight up what we saw earlier where we're mapping Expressions uh essentially X squ over a list pattern right and it will kick out the the square the the you know um and we can do multiple operations on there as we saw earlier this is kind of the base case right the second one of course is uh where's our if one I had an if one in here somewhere oh there it is down there um we can we can add these things up so a very simple pattern here is um is uh that you can you you can sum these up uh by um where did my code go I lost some code there um hold on once well I I lost that uh I'll have to rewrite that and I'll put an addendum into the notebook here when I'm done um but essentially you can write a list comprehension I'm not going to do it live because the video is getting long already but I I'll I'll add an addendum down here I'll make a note to myself right here list comprehension um and I'll come back to that but essentially you can uh continually add to add these things up you can also just sum over these things by the way um so uh you can you can certainly do this as well so let's go and run this where it's 55 right but you can uh you can actually just do this with list which is pretty cool uh where it will do the list comprehension for you um uh so a lot of native math will will work on iterables natively you know if we wanted to do instead if we wanted to do the cumulative product uh we could uh uh we could do that as well but I'm not going to bother with that right this second just because I'm kind of babbling now oh looks like I came back to that already in the code here um the uh the filtering pattern again you can tack on an if statement basically this is a simple filtering pattern it's only returning them if the if the list item is greater than 20 so we're only getting the items over 20 in here um because of because of this it's iterating over these it returns them temporarily comparing them and if this is true it it appends them um and then the last pattern I wanted to describe really quickly is converting these things to string and also demonstrating how you can get at each item uh and and so on so this is returning a list of strings number one number blah blah blah as as we go through these things it's just basically using the FST string functionality that we covered way back in unit one um to tack on the uh the the word number the colon a space and then formatting the string in there of course we could do other operations on that uh but the same pattern holds so some common operations there and I'll come back and add the math one in just a sec so hopefully that made sense um and this is kind of a complex topic certainly let me know if these things especially that the compound the the the two-dimensional list comprehension um bit uh trips you up uh you know it's it's one to unpack and it after you get get used to them they're super handy because you can write them right in line when you need them um and avoid a lot of redundant code um and uh if nothing else I just hope that when you see these things when you see that for uh you know that that um you know that syntax um uh essentially you know uh the the the uh you know um 4X in my list and then it's preceded by an expression and and surrounded by these brackets you'll understand what's going on there if nothing else that that's essentially a for Loop that's mapping things to a new list for you so okay I think that sums up list we'll continue on data structures and get into dictionaries and sets here in a bit um but uh again please let me know if you have any problems with this and and refer to the updated version of let me pop this out of list comprehensions notebook for that some piece that I I kind of messed up before I started lecturing this morning thanks