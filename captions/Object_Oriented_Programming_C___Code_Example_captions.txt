hello this is the second video I'm recording on our assignment about objectoriented program the first one I got uh a little theoretical and I I wanted to use some code to illustrate um kind of what you'll be doing in the assignment I thought I'd start with the assignment itself so I wrote a couple programs here and thought I'd go through a few uh things I'll probably post both videos though so if you want to go uh go uh I'll probably post this one first and there will be another one that's uh presented without code um and I was just kind of talking about some theory on objectoriented programming and went over a slide deck that we have um but I'll do the same here you don't need to look at both you don't even need to look at any of them if you're if the if you're familiar with what's going on or feeling good about the reading but I I just wanted to supplement things here um so I'm going to start with just the assignment um or at least the current assignment that I'm using for object orientative programming here um and thought uh thought we'd start with that and then go over a few examples so you're going to write a new kind of program uh that'll have two parts um you'll write a class um and it can be in the same file and as a matter of fact I kind of recommend you do start by using the same file um um uh for your class and your execution um and you're going to basically make a um a program that um will read um some employees so they'll have a name an ID number um and a pay rate and a and a base pay um and uh what it'll do is you're going to create those in a class and uh you'll you'll ultimately um uh uh read in or enter 25 employees um you'll do this by creating um accessor and and mutator methods or get and set functions um as I as I more uh I I usually call them um and uh you can and then you'll create Constructors for the class giving kind of a bass name and then a uh um and then the ability to overload that uh by defining a function that actually accepts a name and base pay um and things like that um um to uh to kind of get the class started and then but you can also use your Getters and Setters probably good idea to maybe do a few uh instantiations of the class with your uh your um Constructors and then a few more with your uh Getters and Setters um and then you'll just kind of work through those and um uh work through those the uh work through populating those and then um you'll uh disregard this last part um oh no this this is actually updated too so you'll use this replic to turn it in so I I put together two examples um really to kind of illustrate what we do with the objectoriented programing I mean um in in a nutshell um so let me go back to my shell here so this first one's very very simple it's um a student record and uh here you'll see uh that we're actually using a struct a structure uh like we did um in previous weeks to hold the student information but you don't have to these could also be private methods and as a matter of fact you'll see here that we do hold the the vector for these things uh um uh using that exact that exact struct type here within the private area of our of our class definition and then we access that through our public stuff here um but you could also put in ID name and grades um in here um just just a different way to do it um and then so in our public section uh or or the publicly exposed part we have um uh an ad student function here uh that takes the name and the grades and then it creates a new Vector for that and then or creates it um well yeah I mean a new Vector with its uh you know shorthand syntax that that it uses and it just pushes it back to the end of the student Vector um I'm sorry it take it creates a a uh a struct a structure sorry on some medication today had a bit of a thing with my mouth this morning um where it takes the ID name and and grades um as a student structure and hence the shorthand takes that structure called student so again this is a struct this this is a structure not not a vector at this point but it's pushing it to the back of the student's structure which is our private member so this is kind of the safe the things that we can't access directly but we use a function here to do the Dirty Work of getting it in there and and and and working with that as opposed to doing that like in our code down here and then lastly we just we have our summary print statement um pretty simple stuff here um I I'll go ahead and run it here uh let's see this is the student class example uh oops I didn't want to do that I don't didn't want to run that guy I want just typ oops there we go uh I'll just just kill that run this do that should give me an a do out here and we should just get basically John do yep there they are so we we U again we're using the ad student public method to abstract away the details of how we collect it and this is the essence of objectoriented programming right where we're we're hiding away the information in a class as a matter of fact this whole bit and this all of this could be in another file so your whole main program could be this and all you would want to do then is just import that when you're ready to use it very handy uh in C++ obviously you would need to use a header file to do that um but that's kind of the essence of it um so let's go ahead and jump to a little more uh Illustrated example so this one uh we Define three functions uh deposit with withrawal and transfer that simulate corresponding operations on a bank account um then we have some structures that do kind of the similar things what we're doing um to hold that information in a bank account um and then lastly we kind of do what we did s before right in main here um but you can see this all gets kind of convoluted and we're very tied to the data structure uh of it um not not too dissimilar from what we were doing uh but a little more uh convoluted in that all of these are exposed then to the user um and they could mess you know they could put things right in there um and and do what they wanted um the objectoriented version of this looks on its face to be quite similar but the the the good thing about that is again you could hide the class and the structure um away from the user and then again the main program would be very very tight um and documented and frankly a lot more human rle when all the you just have to document your code say you know this is how you add it or delete it and then the nice thing about that is if you're using this in multiple places you might move this this all this information into a supplement or a supporting file create the header file like we talked about before and then you're altering the code uh to to do things like um say you wanted to adjust an interest rate or something like that um you could you could change the code one place and it would update in multiple places so lots of advantages there for for using this kind of stuff um sorry I didn't realize my monitor here was cutting off the bottom of the code so I'll go back to the the previous one here um and do a little that as well and just kind of show that anyway um that's kind of everything I wanted to recover on this I'll CL both but again this is a big transition for us um I really just wanted to cover about why we kind of start to hide things away in classes um and abstract and encapsulate our code um but the big three takeaways are it makes it more readable at the end right we're starting to hide all the details of of like procedural code like this that would need to be in the same file um as our main but also it gives us one place to change it um as others that it makes it a lot more readable the other nice thing about objectoriented programming is that we'll cover um going down down the the pike here is that these are extendable right we can extend a bank account into like a savings account or a checking account and add different methods that do different things by overloading those methods um so that's that's kind of everything I think that I'd like to cover for this week but please let me know I know this is a big transition this week let me know if you run into any issues with any this thank you