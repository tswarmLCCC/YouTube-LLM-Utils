okay popping in just to finish up our um our study of operations on lists before we get into list comprehensions which will be the final unit on lists um we have a few more methods here that aren't necessarily direct access or slicing operations uh but they're um actually uh they're actually um they do operations on the whole thing so the big one is sorting um uh you can sort uh a list uh let's go and run this uh so we you know what let's let's actually um a dang I should I should have run it first so you see it unsorted this is doing it in descending order that's what reverse true uh means so if I actually just sorted this it will flip that list uh because it's going to uh put them in ascending order right so but that doesn't necessarily mean let's go and see if we can find a place where we we butchered one of these lists I think I built that way up here something like this uh let's just do this so we have a list it's out of order and then let's go back down to sort here sorry about the junky demo here uh where it's sort go there it is so let's just add our code here and let's print our list right so here we have this big old list and some of these things are out of order right well we can sort it we can basically uh do it before let's just add that uh here and then we can do this and then we can do this to show it after right it's all we're doing and then we will get a nice demo of what it looked like before where they're out of order and now they're in a nice clean order and of course these things do not have to be all numbers you could put letters now one thing to be aware of though they will order by their type value um including objects so however they are evaluate to their string function is how they'll evaluate numbers will evaluate of course to integers but strings will evaluate to Strings so you'll get some um wonky results if you're if you're mixing numbers and strings together just be aware of that and of course we have the reverse equals true if we want it so that would do it in descending order um so you see we had it in ascending order here and we reversed it and then desending order so there's a nice sort built in you can give it a method as well on how to sort it especially if you're dealing with objects uh but that's a little bit beyond the scope of what we do just know that you can do that so if you're dealing with a complex object you can say hey go into this part of the object and sort based on that we'll see that with Lambda functions in a little bit um of course the same operation we were just doing we can keep doing uh this where we reverse it we just keep reversing it and that has nothing to do with sorting it so let's go ahead and butcher our our our thing back up like uh wherever I did that think it was here right now if I go down here to reverse we will see that we have um oh Oh I thought I hit it let I'm just going to grab yeah so let's make sure this is running there now we have a thing that's not in order because we don't necessarily need to be in order for this we'll just reverse it so we'll see here when I oh it was already done I just didn't pay attention um you'll see here that here we stting with 10 and we go down to 249 um and or 234 and then we'll see 234 and uh 20 pop to the top we're just flipping that list back and forth very handy operation when you need it um and then the last thing I want to talk about with list operations I think before we get into oh yeah queing and deqing um we might be able to get through both of those here um is that uh there's a difference between copying and assigning lists um so a copy of a list will make a new list that is essentially separate it's separate but when you assign a list to another variable that that's not the case let me demo that to to I think the demonstration will show better so first I'm going to run this so we got a new um my list too which is a a copy of the list we were just dealing with this guy um let's make a shorter one do I have a shorter one here yeah let's grab let's grab like list one here and we will call we will call this let's add code just just to recreate this right and this is because I'm building on code right so let's just do list one or let's just do my list let's call this my list um so now when I um when I run this we of course just get a copy of one two three right um but let's just H that's just mark down so we're good there um when I append so again we have two lists we have my list and my list two I'm going to append an item to my list two and we'll take a look at that we'll see that it's there right 1 two 3 howdy right mix type list but we'll see that the and we'll see that the first list is is unaltered and that's because we used copy because we made copy we're now dealing with two separate lists this operation did not affect my first list is the short version of what I'm trying to say but here we'll see um I'm going to essentially assign not copy it's new variable and I can reference it I'm going to go back to that original list and you'll see here that I append uh should I be there to my uh not copy list this is all expected right this is exact this would happen again on my list too if I appended to that that's exactly what we solve it for but if I go back to my list the original one you'll see that it's there as well that's the big thing right up here when we created when we did all this work uh when I after I got done you'll notice that my list did not have the new element right that was a that was appended to my list too but down here when I use this assignment operator as opposed to copy then of course you get you get uh it affects both so that's kind of kind of the the Bugaboo there um and we'll see of course here that um uh when I when I uh you know I oh and then the last thing is you can clear a list with the clear command I I don't think I talked about that so if you wanted to just start over a list you can use the clear command that's all I was doing there all right one last little bit uh here uh and again this is kind of a throwaway thing but uh you can use um a pend and and pop uh to basically uh build a stack a stack is a last in first out uh type of operation where basically we've got an element and then we put something on it and then we put something else on it and then we put something else on it and what we want to do is take that first thing back off there's a lot of sorting oper and game game operations and things like that where this is something you want to do and this is a very simple way to do it in Python so here we have a stack um or a list and we're calling it stack and we're pending five and six uh or six and seven so we're basically tacking on six and seven and then I can pop the end of that of course as we saw earlier and give me just uh seven uh it which would have uh well actually let's just do it here uh which is what I was meaning to do it shows us popping off six so we can deal with six and then our remaining list is five so on and so forth where it goes from uh four and you know five's popped off and then Four's popped off and then we'd get an index there if if we were going to continue with that so um we could basically tack things on and then take them off using pop and aend very nicely this is called a stack um and as you study more computer science we do this in our 2030 class where we study these data structure rures and their uses this is a way you can Implement that quite easily in Python uh you can also use Q's so a q is a first and first out so basically think like a line right bank teller line or a voting line as I write you know this the day after the election you know the first one there is the first one serves the last one in moves forward we can do that um as well by using pop left uh which is part of the DQ so uh uh basically DQ is essentially a list with a few other things so we can pop from the left uh and the right so here we're going to set up set that up and we'll see we've got Eric John Michael Terry and Graham and if I pop left we're going to see that that's Eric and if I do it again we'll see John because these were the first ones in they pop from the left and out they go that's because we're um essentially uh using this this guy which again you could do this a couple different ways but DQ does it for you um and it's just an example of uh building um building things out um from a list and using those as a uh as a Quee in this case so a line uh lots of uses for simulations and things like that with cues um it's it's pretty fun stuff but uh just some kind of tie-ins to more advanced uh computer uh science Concepts uh certainly that you'll study here in abroad or abroad being outside of el C in this case uh but um just a few other uses built right in um there so um we have one more unit list comprehensions which is the the control structures and things like that that we're starting to talk about when we talk about lists themselves so I will jump into that in uh in the next video