so yep the recording's going now um and I'll post this uh to um both python classes as um as well as the C++ class it's also doing the basketball final just in a different language um or I'm sorry uh the poker hand final um let's see uh we have one student here um do do you have any questions that you'd like me to answer at the beginning here or um I've got a couple things prepared but um we can do that either way um let's uh start with what you have prepared and then I'll figure out if they I have any questions from there certainly um so uh Ryan here's uh in one of the classes with the uh poker hand final as opposed to the basketball one so I'll start with that um since he's here um and then I'll go to the poker hand information a little bit later but let's see let me me move this move a few things here and uh so get set up to share my other screen here I'm on a humongous monitor so it doesn't help so let's see if I can share the screen or the windows what I'm after actually with just that and hopefully it's not too terribly big uh let's go with some size like maybe like this ran how's that look on your screen does that look reasonable oh yeah that looks fine okay well the first thing I want to do other than let me go to one of those sections give me just a sec go to I'll just go to 2409 um the first couple things I want to make sure everybody's aware of um is just the information about the final that's available already online uh see where is I think I moved it in here on the final it might be in week one here's certainly part of it uh and then I did I think a little bit about the there's a brief project description in week 16 yeah I can't remember remember if that's exactly what I was after down here yeah oh yeah this is it thank you thank you R um yeah and these two I want to say are the same um but the the main thing about the poker hand simulation is what we're going to and really both both both kinds of finals is we're going to build what's called a mon Carlo simulation um and you can think of this as basically um taking a a situation that happens in real life that's kind of hard to get statistical information about and what we do is we model it using um this process called simulation um by abstracting the the key bits out of the process and programming them to the extent that we can um you know kind of run through a computer program that sort of mimics what the process is like um and that's that's fine and good um by itself um in an interesting um an interesting process in its own right but where it really gains its power is when there's um this idea of uncertainty involved and in the poker hand simulation that uncertainty comes from the fact that we are drawing cards randomly from a deck and um that's what I'll spend most of my time um in this lecture uh kind of describing is is what we mean by cards and poker hands and a deck um just in case folks uh haven't covered that um before um I know I've got a few students that have never never played or heard of the game poker and and AR aren't quite familiar with the rules so we'll certainly go over that um and then we'll start to talk about the program itself I'm really hoping that as we gain uh get as we move towards the um the final itself that we get more and more participation in the class and maybe we can design some of the uh programs uh Key Parts together um at least uh to some extent um it it puts me as an instructor in a tough situation to just give you a lot of this information because a good part of what I want to see on the final is actually our thinking as a group um you know struggling with that thinking and and then you know seeing a worked solution uh will great you'll be a lot better off if we can get to that point with these um as as opposed to if if I just kind of give you a lot of information about it like I did for the midterm um in the two classes so um that's a little bit about what we're doing here um let's see I just want to see if there's any key Parts here um this this is the key part right here um as I highlight this ryy can you see when I highlight like that yep okay great thank you we're going to model properties of cards a deck and a poker hand and this week in 2409 and pre in in previous years even in in uh 2030 you'll have uh um encountered this idea of object-oriented programming and that's what that'll be a key feature of of both Python and C++ that we'll use to implement Implement all of this um so essentially we'll make an object for a card uh uh or a class R card that will have you know 52 objects of those cards there's 52 cards in a standard deck um and we'll describe the deck in a little bit and then that deck will have its own kind of properties um and and methods um and then uh lastly it will have the ability to produce what's called a poker hand um which there there's there's one key distinction that I think we need to make right away this isn't like a game of like Texas hold them or anything like that this is literally just drawing five cards randomly we're not doing anything with like you returning cards or drawing again or this idea of the Flop or the river where there's Community cards nothing like that this is just straight up we're randomly drawing five cards without replacement um and and seeing uh what that hand looks like and and modeling the statistics of that of those different kinds of hands um occurring naturally um and um drawing with without replacement what I mean by that is we don't draw we can't draw the same card twice it's it's a statistical concept so if we have 52 cards we're drawing one and we don't put it back so if I draw for example the Ace of clubs the first time I draw a card um I can't draw it again and now there's 51 cards uh to um to draw not 52 anymore and we'll do that five times so that's a key thing to to understand about that um so that's just a little information about the overall Final on things um and then one thing I did do uh about a month ago was I built this this um this page and uh that is way down here I guess it's called week 16 I'm going to actually update this I think I already have in the other other other unit I'm going just call this final project information or something to that end update that that shouldn't be called week 16 anymore um and I'll add other information including probably this video here um into this uh module as well um but anyway the support uh Pages here if you need to refer to it and uh it describes what a deck is there's 52 cards and these cards uh have two characteristics the first they have what are called suits which are basically um kind of images or um a family of cards and they're denoted by a picture of what's called a club a diamond a heart and a spade um and I think we even have some pictures so like this is a heart this is a spade um looks like this is this is an example of clubs and uh and then diamonds so there's two kinds of red cards and two kinds of of of black faced cards but they don't that doesn't really matter I'm sorry um suited cards not not faces um that those colors don't matter but the fact that they're Hearts clubs diamonds or Spades does matter uh for some of the different hands and those are all described here um for you um and you can use either the Wikipedia page that I grabbed these images for um and or you can kind of see what they are here um but really there's not too much to it um if we draw five random cards I'm going to try to make this just little a little bit bigger so we can kind of see the examples as I go through this H that's not going to work very good okay um well the point being here hopefully you can read this okay is there's two c kinds of cards here or there's five cards here and none of them have the same face value and the face value is the number or the letter um here that goes along with them um uh and that's the lowest uh kind of deck or hand you can get and it turns out that um statistically should happen about 50% of the time if you just randomly draw five cards you should get that kind of hand 50% of the time where none of these other things happen and then in order going up um we can go to one pair and one pair here is basically when any of the uh face values match at least once so in here in this example we have two fives um we have the five of hearts and the five of of Spades and that makes this hand a one pair if nothing else happens so if other things happen like two pair for example um then they then that that kind of hand label takes over from this one um and it's no longer a one pair hand it's a two pair hand or three of a kind or some other examples we'll see in just a bit but um if if you only have if the highest thing you can claim about the deck is that there's um two of the same uh face value then you have what's called one pair and that'll occur about 42% of the time um naturally uh two pair is very similar to one pair but instead of just one one set of um two values you have two sets now they they they shouldn't be the same number that's a different kind we'll see called four of a kind but for example here we have two fives and two sixes so we have two different kinds of pairs and then we have a random King here um that that's what's called two pair and uh that call that happens about 4.7% of the time the next most infrequent kind is three of a kind so instead of two pair we have three kind oh we have boui so Hi boui how are you let me bring up people here so I can see our our friend looks like he's muted he probably just needs to unmute himself um anyway baji we're starting to record here so you can go back and see what we started with hi boui hi okay y I see so I'm just going through the rules of Poker right now um but this is recorded so you can catch up later okay okay I I'll record it later um so anyway moving on from I think where we were which was two pair three of a kind is when we have three of the same face Val here um much like a two pair or a pair we just have three instead of two um it turns out that's a little more um uncommon than two pair but just barely um well actually about half but in relative terms that's pretty close um and that happens about 2.1% of the time and then we get into some interest some different kinds of hands instead of um looking at pairs where the faces match we can have what's called a straight and that that's when the um numeric values um and the faces um line up in a certain order or you have them in a certain order the in this case the um the uh suit of the which is you know Spades Hearts all that they don't matter for this this one but we have like in order 7 8 n 10 and then Jack which is basically an 11 and those orders are spelled out again in that Wikipedia article at the top but in general um they go Ace to or Deuce 3 4 5 6 7 891 um Jack king queen and then sometimes Ace is also at the top and in this case it is Jack queen king what's that you said Jack king queen it's Jack queen king oh thank you yes yes the queen comes is lower than the king um sorry I got going a little too fast there thanks Ryan um but the the point being though is that there if you have five cards that in are in order and you have to have all five then that's called a straight um and that happens with only the kind of rare frequency and you can see from you know going from 50% here we're already down to 4 t0 of a percent um here uh for this kind of hand um and then you can have um as opposed to when the colors don't matter at all or the suits don't matter at all um you have what's called a flush and in this case um we want all of the suits so that's hearts diamonds clubs or Spades all five of the cards have to be that same kind and that's called a flush and that happens about 2% of the time um and then we have a really unique hand which is basically it's called a full house and it is basically a pair and a three of a kind um um and you're going to really have an interesting Dilemma on your hands when you come to modeling this one um figuring out which cards make this up this is probably the most unique programming uh one of them all where you have a pair and a three of a kind but you don't want to identify either of those it's actually a full house so when you have both it needs to be called a full house um and that's when there's three of a kind and again two pair very infrequent um there and then lastly we have four of a kind uh or lastly uh you know we're kind of getting to the top of the Rarity here four of a kind which is much like a pair and three of a kind we just have four of the same face so in this case there's four aces here and then a four but you can't have five of them because there's only four suits so you can at best you can have four of a kind um and that's just four of the same face value um and then a straight flush combines the a aspects of a straight and a flush so basically you have five cards in that in that order we talked about earlier and they're the same suit and then finally you have this idea of what's called a royal flesh which is the highest uh valued hand you can have and also the most rare bya long shot we're talking about basically 2 th000 of a percent chance of naturally happening um and these have to have specific values with the 10 the Jack the Queen the king and then the ace in the same suit specifically those four card or five cards uh of the same suit and there's exactly four kind four ways that can happen which is one of the same suit so those are the kind of things you're going to model um by uh by drawing these five things and then the idea is we're going to figure out how close over a bunch of runs that these frequencies actually occur you know when we when we run this thing so we'll we'll basically run it write a program that will um have a full deck and you'll basically do what's called shuffling it which randomly puts them in a random order and then you're going to draw the top five of those or conversely you could just randomly um pull five cards either way but the idea is Randomness there and that comes back to the idea of simulation by doing this thing with Randomness and doing it many many many many times we get what's called a sampling distribution and statistics back out of kind of a a hard thing to understand here and um that's what our project is is going to be designed to do is to run this thing you know not 10 times not a 100 maybe a thousand but I mean I'd probably get it to at least a th000 or 10,000 or maybe even 100,000 so you might start seeing these these kind of Royal flushes and things occur sometimes but even if you run this thing a million times you're not guaranteed to see a roal flush um you know it's that rare that it might not pop up naturally on one run of a million times but because we have a program and computers can be fast we can start to play with many many repetitions of this experiment so that's kind of what we'll do um for the poker program um and we'll do this by modeling um a card and then the um a deck of 52 cards and then a hand of five cards and we'll start to model what a card what information from like strings and integers we need to model about a card and what data native data types like dictionaries and lists and things like that make sense for different parts of that into into what's called a class and then using that class we'll create objects of that in this case 52 of them that all have the the unique properties of the unique cards of the deck um so that's kind of what we'll be doing there and then we'll build methods within those classes to do things like doing the drawing or doing the identification of the hand and things like that and then finally we'll write an overall program to do the the drawing and the counting and and the statistics and we've kind of done some of that last part a little bit so hopefully once you get to that part it should be pretty easy um but the real challenge lies in getting the that class uh defined prop those classes defined properly and testing them and making sure they work so that's kind of the the big idea with the uh poker hand final do you guys have any questions about that the folks we have here no okay yes okay well again um the uh this page is is one that I I wrote just kind of and oh but and I do kind of go over everything I just read to you by the way and it looks like so the one thing that I want you to be aware of I I put the ace here Ace stands for one but often it is the most valuable card um and I do talk about here so you can I think you can have a straight I'll have to look it up um I think you can have a straight that goes Ace 2 three four five I don't know if that's the case I won't ding you either way but the main thing is to know is that the ace is also part of the Royal the Royal straight or the royal flush as well um that's the only thing about this little top part of the page so um that's kind of all I have for this other than the fact that we'll need to get into defining some classes as we already talked about um and I even you know kind of give you the three classes that you need to consider a card a deck and and a poker hand and uh and we'll start to kind of pull those things apart and make this all come together it's a really fun uh thing to see come together at the end of it it's a lot of hard work in the middle but it's pretty neat to see it kind of come together I really I've done this project several times in different languages and it's always a fun one so um I guess if we don't have any other questions about um about the poker hand stuff um I might jump into the basketball simulation one um if you guys don't mind and you don't have any other questions about that I'll at least cover the basics there uh for folks that don't um understand that final so let me go into 1010 for a sec and let me go to the modules go down to the final there as well so we've got a final project here as well um so the idea here is we're playing the game of basketball um it's a great time actually to study the game of basketball if you're interested there's plenty of it on TV right now including the legit uh National Tournament which um right today's the uh 2nd of April and the National Championship uh round the final two rounds will be this weekend um so you can watch some of this but the idea of basketball is that you dribble uh you move a ball up and down a court and um that that part's not all that important and you shoot at a basket and um depending on where you shoot from on the court you can either make two or three points um the the three-point shot is a little further out um from the basket uh than the two-point shot the two-point shot is anywhere near the basket and then there's a line um some I don't know exactly how many feet away from the basket is but it's out there ways and it's a harder shot to make um so the idea is that you're you're in a basketball game and you've come down to the last 30 seconds and you're you're down three points um if you if you shoot the three um basically you could tie it up right um and and that's a strategy some people do so basically they they kind of wait till right to the end of the game and then they try to shoot the three-point shot and uh and tie it up tie the game up to go into what's called overtime which is an extra period but at least you're you're still playing you haven't lost yet right um the other strategy that could be employed is to shoot what's called a two-point shot closer to the basket with higher odds of making the thing so both of these will have some some sort of Randomness and a chance of missing or making the shot um the three-point scenario is pretty easy you just wait wait till the time runs down and basically the chance you have of making that three-point shot is kind of the roughly the amount of time that the simulation will have the thing go in but the two-point shots a different situation um so on the two-point shot uh what you might want to do is take a little bit of time and take a two-point shot shot and then um and then we get into a really interesting situation and basically what'll happen here is we'll we'll use what are a bunch of if statements and in a while loop to model what's what amounts to the the rest of the game of basketball um where uh you could you can take this two-point shot and if you either make it or miss it you're still going to be down you're either going to still be down uh three points if you miss it and you'll only be down one point if you if you make it um and at that point the other team could just run out the clock and win unless you basically unless you do this thing called fouling them and a foul is typically an infraction of the rules where the other team gets to shoot um an uncontested shot call a free throw um or two of them in this case is what we're going to assume for this basketball game so they stand at a line in front of the basket and they shoot with with no no nobody in their face nobody opposing them and they if they make it they get one point each time and they get two shots um but the the the key thing there though is that when you foul somebody they um the time stops on the game so if you foul them the the the time stops and you have a chance to get the ball back and score again so one way this might play out is if we took a two-point scenario is I I go down let's say with a 25% chance of making it too and I go down uh with 30 seconds left and 2 seconds run off and I take a a two-point shot and I make it so I'm now down one and I foul immediately so now there's 28 seconds left and then we go down to the other end of the court and the other team makes one of the two free throws so there's still 28 seconds left um but they've they've increased their lead by one point um so now they have a two-point lead in and we might go down and then wait till the end and take a two to tie it up all of these have probabilities associated with them um and this if statement is what we're going to model out is of of you know essentially you know what happens if we make the two don't make the two um the time that uh needs to be um that we need to take off of the clock to maybe Advance it down um you know the chances of making a two-point shot a three-point shot and each free throw are all things that we can mod you know bake into this thing um and then we use Randomness and try to figure out which strategy is best you know uh shooting the three or taking the two and fouling over and over again um and giving ourselves more chances to score ourselves so that's kind of what we're doing with this one um as well and I did write a little bit more about that with the uh some information about the objective of basketball the scoring what fouls are what free throws are in this case and then some time you a little bit about the time to advance the ball um so one thing I'd like us to do as a class over this NE over this next month is kind of work through the flowchart of this thing which should make it a lot easier for you guys to finally code the code up the simulation and then we'll just Loop over that much like we were describing with the poker hand um final for the the other two class we we'll Loop over this many times and say when we took the two-point shot you know we won X amount of games and when we took a three-point or a two-point shot uh sorry I can't remember which one I said first but um he said two point first yeah so two. three yeah so three points the simple one um but the two. one will play out and we'll we we we'll basically run through the the different probabilities and let that uh that let those events play out um and they'll play differently each time you know one time we might make the first two and the next time we might not make the next two and sometimes they'll make the free throw sometimes they won't sometimes we'll win outright in regulation sometimes we'll go to overtime all of these things are TR going to happen um and we're just going to count the number of wins and losses that happen for our team based on these very simple this kind of abstraction of a basketball game and and try to get an idea and what what it's going to come down to you'll find after you get the program running is it all comes down to the probabilities that you assign these different shots but it's a lot of fun to play with that kind of program and I might even run it um or write it here so I can demo it without showing you the source code um I have one in in another language but I might write it in Python and make a command line just so you can kind of see how it it kind of plays out it's a lot of fun um so maybe that's something we can do in a future session as well but um anyway uh that's kind of what I wanted to go over lecture wise um and hopefully you know as we go we'll pick up a few more students um and maybe design this as a class um I certainly every time I've done that basketball or the well the first time was in my C++ class 20 25 years ago and I it really benefited me to talk about this with my classmates but as we're in an asynchronous class I'd really I'm really struggling not to just without just giving you the answer to to to facilitate that I've tried to do it with the discussion boards and I'm very proud of how we've done there um but it's time to put a little design work into that and um short of just straight up writing the code or writing pseudo code for the thing I think this is maybe a nice middle ground that we can come together on so hopefully this picks up in the near future so that's kind of what I had for tonight lecture wise um so uh I guess um you know we can kind of talk about it a little bit now either one with the the we have two students now in um which I'm happy to do or we can call it for the night and I can post these and maybe get some reactions over the next week I plan on doing these each week for at least April here um and probably that well that first week in May is getting already close to when it's done so really starting this this whole next month is kind of what I'm thinking um so anyway do you guys have do you guys oh uh Hey Maxwell how are you I haven't quite tuned in yet that's fine um don't worry we'll record it um or it is this is recorded you'll be able to watch the lecture um so do you guys have any questions about what what I've kind of presented tonight uh no questions at this point I was under the slightly mistaken impression that this we'd be talking about actual design and discussing the classes well we certainly can we can start ah yeah I have no problem with that all right then no really really whatever you guys want um yeah and that'd be the other thing right is what would we need to do um but I we can start you know kind of doing some high level OB you know um object design there for the the the poker hand uh final if you'd like I mean I I I slotted you know an hour but I don't want to take more time if you guys you know have other things to do oh we'll see what Maxwell and boui have to say would you guys like to go into that this week um Char um go to go over again the first part of the poker game programming well it's not a game boui um what it is is it's essentially um it's essentially what you're going to do is we're going to um model um model a deck of cards and we're going to draw um or or Shu or or we um deal five cards of those um from that which is similar to last week The Bu yeah a little bit yep a little bit um let me go back to this and then depending on what we draw you know which cards we draw we're g to basically have to design a a program to identify what kind of these things we've we've randomly drawn you know all the way from nothing to uh royal flush and we're going to count how many times that happened um out out of you know a whole bunch of iterations and we can certainly start to get into that right now I'm I'm happy to do that you know we can let me bring up notepad here uh and we we can start um oops uh don't know what I clicked there I hope I didn't mess up the recording doesn't it looks like it's still recording to me anyway um let me just make a new text I don't have a great um uml program on this computer but we can just do it right here in textpad let me just share a different part of my screen instead and we'll just do a little design and I I'll save this as well uh let's see let me stop sharing for a sec and then I will share again and this time it should be window text do you guys see a text editor now yes okay so as we've talked about before we're going to have a card right and we're going to have we're gonna have a deck and we're going to have a hand right so this is a let's go and put a a you know a uh I Ryan do you know if there's an this is like an American Deck or a poker deck a card um is there a name for that Imperial I believe oh okay so it is the uh Wikipedia calls it the standard 52 52 card deck but it is the French suited deck well well so the clubs Spades hearts and diamonds are French suits you'll see different you'll see different suits with it Ian or Spanish or German decks okay well we'll leave it like this I think we've kind of beat that one to death um and then this is a right and then a hand so can you enlarge the screen please yeah the the the text is a little small oh yeah I can I think what I if I do something let me just do this is that better yes yes yeah yeah it's it's just the resolution changing on me like I said this is a gigantic monitor this will probably help too and I don't need this for that's a compiler so that so we have three kinds of objects right of these things um so um with with the three of you here um what what kind of uh what kind of data does the card need to store do you guys think the number and the the diagram that's exactly right yep so um so I'm just going to indent here and I'm just going to use a dash like this so uh will have a face face oh yep face and a suit right the face is the number boui um so this would be basically the uh so how do we represent the Jack queen and king well there's a couple ways you can do that oh that's okay yeah go ahead Max oh he's already gone um so one way uh I'll see see if we can catch him I'll just wait just for a sec see if we can catch him when he comes back in So B how do you think we might do that we can use 11 12 and 1 yeah exactly great idea hey hi can you hear me you can hear me yes yes I think my mic see I got speakers too I don't have a key bind for the mic so I'm gonna mute myself till I can set that up um well there I'm not getting any feedback right now but um and there's not too many of us so hopefully that's not an issue um but bow uh while you're gone uh suggested that we use a numeric representation and basically use 1 through 13 right yeah I think that's a great idea at least to start with and what we can iterate on this and see if that doesn't if that gives us you know problems um what about the suit how might we represent that I was generally thinking string values although we could also technically use a dictionary and then assign our cards in integer value that is the key to the dictionary value for the actual string that's a really interesting idea isn't it um I might come back to that but I don't think it's necessary for the suit um be because there's no real reason to do that for the suit in that there's not much point to the order of the suits agreed yeah and uh the the one thing about suits that um are that does matter is that we can compare two cards and make sure they have the same suit or not right but we can do that with strings right we can't yep so like en or something or even just a just a string you know just a string we could say you know does does this card when it says clubs equals that card and it says clubs that's perfectly fine I think don't you it certainly makes it more readable and less Cod I think um let's start with a string hearts clubs diamonds and Spades I always forget Spades so those are pretty good uh representations of the thing um do we think that a card the card needs to have any methods to it does a card actually do anything um not that I'm aware of it just exists yeah it's kind of kind of a kind of a thing that has value but not not not by itself I I I would agree with Ryan there I can't think of anything um that you'd want to explicitly do there well I take that back there there's something you could do which is you could write a method of a card that takes another card and says is this a pair or it takes two more cards and it says is this a three of a kind but I'd argue that that's kind of convoluted um and and kind of a backwards way to do it and I think um handling that as a hand would be it'd be better handled as a hand because all of our logic would be in the same place that's what I would argue what do you guys think of that yeah my my initial idea on representing a card didn't even involve using classes at all it was just a tupal with a string for the suit and an integer for the face value well a tupo is in fact a type of class but yes um it's just one that doesn't have methods and the same is true uh Maxwell the same is true of um of of strs in C++ isn't it we can uh except we can have methods there they're just a little little wonky um that the same is true there though okay well let's move on to a deck then so now we've got this idea of a card so we're not talking about like strings and numbers anymore we've actually got this thing called a card well what would a deck have I think I just give it away right what deck would have cards and you could store them in a vector or some other structure yep yep we I'm going to use the term array here but we're not using an array either in python or in C++ are we let's actually use collection how about collection yep a collection of 50 two unique cards is a collection of 52 cards yeah yeah yeah let let's do it like this you're absolutely right uh let's go vector or list of cards and I'm going to use big big card here right yes and that's typically true when you're when you're talking about an object um you usually oops sorry I don't want to save this actually I will save this I'm just I'll put it on my desktop real quick uh right there and let's just put this let's call this poker notes so I don't lose it on you guys um so yeah the idea is we we have these and they need to be unique so what I'll do is um you know uh let's go Ace through King and I don't know if this is actually notation and then for each of we'll just use the set here of Spades clubs hearts and diamonds which I think we are all on the same page there but basically what I'm saying there is each one each one of those suits will get each one of those faces right so what else can a deck do can Shuff deck can be shuffled it can be shed you can move a card from the top of the deck and do a hand or move a card to the bottom of the deck and I don't really know the rules of Poker yeah you're right all that can be had true but for what we're doing um I think we're just going to simplify uh the movements of the collection of cards to be random and that'll just be shuffling it but moving it from a uh deck to a hand seems very interesting let's call that a draw so we're going to draw one card certainly that can be a thing um and this is this is done again without replacement right so once that's gone it removes it and so you know we go from 52 cards to 51 cards right yep that that's a key thing here otherwise we could get like five aces of Spades we don't want that that's an illegal thing that's not a true thing what else can a deck do I know some of you were just introduced to objectoriented programming this week and this might be a bit of a hard one well that's not it it's just I don't know like much about what happens in the poker game sure yeah what about being created oh yeah yeah of course yeah so creating an instance of a deack yeah so so we'll we'll call this we'll call this it's Constructor right yep and we'll use our programming term and uh populate the deck with 52 unique cards according to the rules of what you call it uh English Deck French deck uh French suit deck something like that right so the idea then is we can create one of these things it gets populated with the cards which we basically tell it how to get created um and then uh and then we we can Shuffle it then we can draw draw our hand right yes that's pretty good it's pretty good start um that makes me think of something that we might want for the card what uh what what what now with this last thing we just added to deck what's one thing we might want to add to the the card cards repertoire well we have to create a card I guess there you go yep yep this one will be a little bit different though right this is a Constructor as well but in this case we want to be able to it wants to be able to take a hand or a suit and a a suit and a uh a face right yes because as we go through this we're going to basically Loop through and say hey make an ace of Spates make a you know five of Hearts um and we can use its Constructor to do that the alternatively though we could use uh uh access or mutators right we could make a blank card and then manually set each one but we could also just use the Constructor as opposed to getting and setting the thing that's pretty good it's pretty good start I think well what about the hand what's a hand have well a hand has five cards yeah it's a lot like this one isn't it yep just more restricted version of the deck yeah but instead of this that it's it's a deck of five cards but we don't have we don't shuffle them because that doesn't do anything meaningful maybe something like that right yes Co what's it what do you think its Constructor looks like well it needs to initiate some a a vector or list to store the cards in well that's what that that's what it has already I mean it's got space for this already and I'm gonna actually put the because we only have there's five we already know that instead of 52 there's five it's got to call some method of the deck maybe to grab the cards to fill its Vector array or whatever yeah that's perfect there we go how many times does it do that five times five times yep there you go or we could just make one method of the deck that returns five cards but yeah you could yeah you could um it's a little more natural to do it this way um uh because if we wanted to extend this to like have other players and things like that um you might loop around or something to that end right where draw only gets called the one time each time um so it'd be something like something like that right yes yep and that'll give us five cards what else does a a hand need to have it needs to have the logic to evaluate what hand state you have you know is it is it a high card hand is it a pair is it two pairs yep exactly and I might even make an argument this is a little nutty but you could have this return a string right I might argue that uh you'd want to store the hand label as a member as well so this is a variable right that this populates H yeah what would be in hand label is that just like good bad like whether you have a good hand or a bad hand what is that it'd be like Full House or flush or straight flush things like that Royal Flush clubs things like that yeah so the idea is perhaps you you could um basically Loop through run the thing run a Val hand even as part of the Constructor after the Constructor might even run evaluate hand after it's populated and and produce the label and then you could just access the label right and then that would determine what the player does basically or got got on that hand yes yep yeah but anyway uh but Ryan's exactly right the main thing here is evaluate the cards to generate a label for the hand I be like two pair kind yeah that's a really good start guys all right what you think of that it's kind of fun isn't it yeah TR do we need to do multiple hands for the 52 cards we will but only one at a time bgi so each time we run through the main program we will start we'll make a we'll make a a new deck every time we'll make a new deck and we'll Shuffle it every time and we'll draw five cards and then we'll evaluate the hand and we'll count that hand um to see what kind it was and then we'll move on so yep start over just like what we did with um kind of hangman where you looped through each time but in this case we're starting over with the whole thing so we're not actually playing a game here it's not like the the um Hangman game what we're doing here instead is um calculate yeah we're basically figuring out what the label of the hand is and then we're doing a simple statistical analysis of it which is just the distribution and I'll try to write that um um well actually I have one hold on because I did I did write it already this one let me go grab a repet real quick um and I can show you what the output of this thing might look like the goal of the project is not to make a game like that or is it just at this point in the project we're not the goal of the final is only to get to the STA statistical analysis rather than actually coding an entire game of poker yeah that's exactly right let me I I've got it here let me a lot easier doesn't it yes well yeah but the the the modeling is not trivial um let me go find give me just a sec [Music] um and I'll run it I'll show you what the outfit will look like which maybe I should have posted that earlier on that's probably a good idea uh let's see I wrote that in Python I think NOP that's not it where' I put that stupid thing I hate when I lose things oh no it's a C++ I wrote it C++ first no I didn't I'm losing my mind guys oh I know where it is if you've ever come to my office hours this is exactly what they're like I lose things and fret around for a while then we actually get something done all right uh there it is all right let me just run this real quick I don't want to actually show this because it's literally the code to do it yeah that makes sense it's much fun it would be very instructive but not very useful for you guys well it' be very useful but not very useful for your learning so the the idea then see how yeah this is running a a 100,000 times so give it just a sec yeah so what it kind of looks like when you get done out of 100,000 runs and I didn't order this or anything but it it looks something like this is all if you guys are still looking do you guys still have the notepad on there still show oh yep okay yeah yeah Bas and like I said those aren't in order they're I think alphabetical order basically generating a deck a bunch of times and then forming a hand and then determining what kind of hand it is and then we're summarizing at the end what the uh overall tally was of different kinds of hands that's what the project should look like pretty much yeah okay yep so well that turned into very productive unit I wish we would have had a few more people but that's okay we've got a good lecture and I'm happy to go back over the same stuff again um yeah I think this is pretty good stuff though a good start oops sorry I didn't mean to make that too smaller or get rid of that there we go um well I we're getting pretty close to an hour here which is what I I told you I'd take um I think the key part of this all is this method right here this um evaluate hand method and maybe in the near future maybe next week or something if you guys would like we can maybe start to build that out right um or build maybe build card and then hand run a bunch of tests determining exactly whichever turns true first would be the one that we use right so if it finds a full house then it's like okay you got a full house I don't know if any are those mutually exclusive they are they are so yeah so basically um if you have a two pair or a pair um or if you have a full house you do not have pair right so a full house figure out what each one of those means and then try one out of time pretty much yeah in the right order though yes the right order I guess some of them are more likely than others no no doubt but like you if you um if you have a full house you also have a three of a kind in a pair so you want to make sure it's labeled as a full house and that's where some of the the more important ones first right the the less the higher value better than three of kind yeah got it and uh we did we did cover that a little bit at the be very beginning of this video which is being recorded by the way is do you prefer Max or Maxwell I don't have a preference which okay sorry I got yeah I don't think I've actually spoken to you yet this year in person just just on online so it's easier um or you know in notes but yeah we recorded basically uh a few clarifying points of both the the 1010 final which is different than this one and then this poker hand one for the the C++ and the 2409 class it's just the different languages there talking about other class the 101 final that's a different class right yeah it is I so yeah you don't have to it it's about basketball so you can I'm in that class I don't have to worry about that yeah so well um yep um unless you guys have any other questions I think this is a good place to call it for tonight this is a lot of good work um and I will try to get this posted to both the relevant boards uh here uh maybe tomorrow morning um I think um but and then teams takes a little bit to to process the video anyway so I'll have to wait for that anyway but we'll get both of these things posted unless you guys have anything else you want to talk about trouble I'm good thanks for having this oh yeah you bet yeah I I've wanted to for a while honestly CH I have one question yeah go ahead bie in the bottom you can see one pair has 47,000 times right and this mean our program need to run over 100,000 time well it runs a lot anyway um I ran this one 100,000 times I actually let let the user input the the number of times um the way I wrote it in Python when I run it 100,000 times it takes about 7 Seconds to run on my computer so this mean our program need to be automatically runed yeah it'll Loop through a bunch of times and that's how you're going to so the first time bow you're going to go through and all these will be zero right like Royal fles still is and let's say you got a royal flush the first time you just increment this by one and then you go to the next oh okay yeah just like yeah you and I just did this the other day right yes yeah is very similar to that hly so okay well I'm going to stop the recording here anyway um so do we still have the meeting like tonight next week say that again I'm sorry do we have the meeting just like tonight start at 6 PM in the next week um I don't know yet I want to be able to get um I know Xander wants to participate and he has class I might move how do you did you guys like this time is it a good time is it a bad time I'll put it whenever you want really it f for me I just couldn't get into the meeting because technical difficulties sure yeah yeah um I I teach at Northwestern on Wednesday and Thursday nights um on different weeks like I could go tomorrow night this week but not next week and then Thursday I couldn't I can't do this week but I could do next week so you know the day doesn't matter uh to me very much except for you know one night and the time um this week today was bad because I had to um work with the uh with Intel on the AI program a little bit uh until 5 so I was a little but usually even the afternoons aren't that bad you know we had regular office hours until 4 today so really it doesn't matter to me but um I I'll definitely post it before the weekend each week uh based on feedback I guess right now let's plan on maybe five o'clock next week maybe I don't know you or seven Works a little bit better for me seven does I mean six or seven Works a little better for me I'm usually cooking dinner at 5 okay well I don't want to yeah I mean yeah and and I do record it honestly um you know we might just start programming um a little bit here as a group or at least you know I'd really like to probably it you know next week what I think I what we'll do is we'll go ahead and you know both in C++ and in uh python we can get the the class set up for card and then we can start playing with deck I'm sorry with hand uh deck's pretty easy that you know uh honestly uh it's really hand I'm worried about where we'd get the Constructor set up maybe a test case or two um and I can show you a few tricks there one thing I do when I when I started writing this thing is um I would literally have it instead of output um I would literally just have it spit to a file out of C++ when I wrote it the first time um so I just keep runting the code changing it and running it you know just hitting literally play and looking at the file until it gave me the results I wanted as I was working on the logic and it's kind of a fun way to to do some test test driven development um as well so test cases and things like that might be somewhere where we go next week so okay well um I haven't heard any questions in a little bit one last chance before I stop the recording I'm good I'm good okay I'm gonna stop the recording at least uh here and uh and then I'll get it posted uh