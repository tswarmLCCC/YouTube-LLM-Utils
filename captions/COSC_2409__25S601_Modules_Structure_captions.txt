welcome back to our continuing lecture series on uh essentially abstraction but um what we're talking about right now is is uh mod the use of modules or external files to store our logic in Python um this is of course part of uh our deeper dive into all of the core uh python functionality um that has been built for us and makes our life a lot easier once we understand all of the tools at our disposal um in the in the intro module uh to this unit um we we kind of showed uh the reason why we want to do this where we we might go from a file like this uh uh where we have to rewrite a menu system in all of our files where we might do something like this where we start to put these things in functions right uh where we move our logic to a function and then tuck it away where we can reuse it of course we've got options for overloading um and we call it with one line then and we can even often call it with different kinds of modes of operation with one line um we've talked about that part of of our work uh in the files unit itself um but we're taking that just a bit uh a step further where instead of storing our files in um uh or our functions in our our working files where we have to maintain them every time we want to use them um and we copy and paste and and have versioning problems and all the other issues associated with that we move them to their own file um a file that looks something like this and then we call that uh we call that uh let me come back here we call that uh and make it accessible by doing this this type of operation here um we can do it a couple different ways we can and I'll go over those um in in the Nam Space video but we this is one version of it basically what we're doing here is say go to the menu file and import these two functions these two uh these two names and know go there and know those are functions and of course then we can use them right away um in our functions and you know the big virtue there of course is that when we do that uh we only have to maintain it in here so we can maintain this somewhere um you know Central and accessible to a lot of people and when they need to write a menu they can use this very uh this code that's kind of intended to be reused in a lot of different ways in their program um much like we're doing here and as such even so uh you know this isn't a great example of a real program we might write um but we we actually do five different uh or four different menus uh or five different menus right in this program um just doing um you know and we're getting all that functionality from here you might imagine just how how nasty it would be to you know write all of that code every time you needed a menu um uh and it certainly cleans up our code and makes this much more readable right um so what's going on here well the first thing we're doing is using this from menu this from keyword which is basically saying we are going to access a module and um uh let's take a back just a quick step back and talk about what modules are in general right um they are uh um well you might recall that you know when we first started uh working with python we were doing things like this where oops uh sorry let's just do what's going on here why don't you work there we go uh we did something like this I must have had a typo where we did you know print hello world right things like this or we could do 2 plus two then we moved on to you know saying you know and then we did two plus you know that variable hopefully this all looks very familiar right we did this in the in the python interpreter that's what the three lines here um are standing for um the problem of course is that when we exit this all of that work is lost right all of that work is lost so um and this is uh how we often start with Python Programming what we do there is we basically move those kind of commands into a file and what happens is we run uh python against those files to get their commands and and and do uh and do our work from there and that way we can um not have to retype things all the time for one um right uh so that that's a huge upside but uh what once we do that uh we we're already kind of moving away from immediate uh code execution and moving towards files well files are actually modules all of these are are modules every file you write with Python scripts in it our modules um and uh we just uh it the default behavior is to just start running but when we do things like um you know called the main uh things like that we um we start to uh get away uh from just straight up code execution and we start to um we start to uh reuse our code right and that that's kind of um you know the next step for moving into files um the idea so what we can do from there of course is to start to move our our our reusable code into other files and pull it away uh pull it away and reuse it um and when we do that you can import those files and that's what's going on here um basically we're accessing that and then we're importing these as names and then using them so um you could in theory I could um access code from any of these files by doing from and then the file name without py so that's the only thing that's going on here there's nothing special about python uh that uh is saying you know this file is a module there's nothing in here um other than uh a few things like that let me get rid of that I don't even know why that's there um oh well it was just an auto auto annotation that I was playing with earlier um there's nothing in here other than this menu is just called menu.py and when I when I say from menu it looks looks in the current directory um and uh and and looks for something called menu and then says give me these these things from there um and that's kind of it um there's one other thing um within a module the module's name is available uh as as a value um of the global variable name um and I'll come back to that but essentially what we can do here is when we're we're executing the thing it will um you can you can get get get at uh the file's name uh um when you're executing it now when it's called Uh when you're executing the code uh directly from a file that gets replaced with main so if we're running this from the the head or you know Python's kicking off the code here um um our our name 1 Arun menu.py this variable gets renamed to domain and that's why this code works that you may have seen this in other places but essentially if this was coming in if done something well I actually did do it in here where um if if I'm executing this code um you'll notice that this is not happening um when I import it and that's because when I import it the name here would be menu.py um so that's just something else to be aware of um this syntax is one you'll see a lot and all it essentially means is basically if you're running if the user is running this directly this is going to be called main if it's not it's going to be the file name in there and we use this little trick here and uh certainly here to say U kick off the main program um if if this is the entry point we'll talk about that more in a bit as well um so that's kind of what modules are uh we'll talk about a little bit about their construction here as we go but th those are the main two points uh let me know if you have any questions about that in in the in the uh in the ins and outs of that