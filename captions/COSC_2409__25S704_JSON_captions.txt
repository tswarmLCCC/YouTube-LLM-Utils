um so we've been talking about a lot of different file operations uh mainly dealing with text files that look a lot like this where we've got you know just simple lines of text at a time or you know we're doing some things with new lines uh we could also you know do things like with comma separated values where we use some string functions to tear those apart and write manually write a program to Loop through them we don't cover that in here because it's not a very common operation in Python turns out there's much easier ways to deal with with data like that um in in um some of our data science libraries like pandas um and uh and uh numpy things like that um but there is another version of uh writing files that's very useful um and it's basically uh saving structured data with Json uh Json um if you are not aware is um the JavaScript um object notation uh uh uh um well it's JavaScript object notation the idea there is that we can take data so here we have a dictionary a name value pair um and when we run this um we can we're going to store it in data. Json here so let me let me go and fire this off we you do this exactly the same way we do it we're just creating a right file as Json file but in case in this case we're doing a dump and this basically explicitly uh just it doesn't do any formatting at all um The Dump Dump uh uh method of of of a file it basically says just take what I give you no matter what and put it in there and in this case close it right after but that's really not even the interesting part the interesting part is that we are structuring data in a way that you can see um because we've got given it a dictionary uh as such we can um we we get a name value pair in here so we basically capture every little bit of information that we have in that data structure um that dictionary right we've got a name of course the name Pairs and they look just like a dictionary um in in as a matter of fact that's what the the uh the um RL the uh or I'm sorry um not rapl uh the um r r uh I can't remember it's the representative data format I can't remember the exact method off the top of my head that's what that did uh that we were talking to um but of course then so let's let's let's actually just just for um complete demonstrative purposes let's restart our kernel so basically this uh this uh python notebook now has no idea about data so just uh let me let me just demo that just for a sec I'm just going to run this and we see that we it does not have any idea what data is so this is gone from memory uh and then when I load it and we run this uh why didn't that work oh I need to reimport Json here one sec uh it's because I restarted the colel um let's re we we'll see that we actually get a dictionary back in and that's because it's loading it as Json um and and it's basically decoding uh this name value pair and giving us the the proper data structure back in this case a dictionary um uh so you can see uh hopefully how that kind of starts out to be very useful and we can build up uh let me clear this out just because I don't want to see it anymore uh data it was here there we go just do this I just don't want to see the err anymore um when we have a structure like this or any data structure looks like I repeated myself here um uh you can use the dump command to basically uh uh um oh I see what happened so the the I'm sorry the the dump was actually a Json uh method not a not a file uh method um I'm sorry I slipped up there I've just recorded too many of these back to back back um uh dump is a Json method where it's writing a file for us uh but they it does use explicit notation and it and it does absolutely have ways to um understand the underlying uh data structure and convert it to Json but that this Json is a built-in library and that's why I had to reload it here um as such um so if if uh we re reload these of course we get our dictionary back out you can see though that this gets U quite quite interesting when we start to build more complex data types so here we have basically an object in this object we we call this you know a person right where the person has a name and an age right and we have name value pairs in our dictionary but then we have another dictionary that has address which has Street city state and then you know um a list of phone numbers uh so we've got a phone number uh name and then the value is of course a list right well it turns out all of this is handled just fine with Json so basically almost any data structure that you can come up with in including a crazy one like this uh can be written to and then retrieved with Json so we're just simply uh writing a complex data uh Json file here um with your Json file we're just dumping it in and giving it an indent uh structure just to make it a little more readable um and we can see it here um that it captures everything we want um it's it looks almost exactly like python um but it turns out that these all have meaning that we are indeed getting a a dictionary out of this name value pairs within that first dictionary here um we're using the name for our second dictionary here um and conveying uh that this is the contents of our uh of that dictionary where we get name value pairs for each one in there um and then of course we have our list of pH pH numbers and just to close that Loop we can see quite nicely that if we if we load that then uh we if we load it as Json file uh or loaded complex data it's loading that in um we get everything we would want and of course we can we can access these things as just like we could in any other any other context so just to let's just just do a couple demos of that let's go ahead and grab our our name let's just do name like so and we'll see that we get Bob uh and then let's grab our address like so we'll see we that we it's going to return another a sub dictionary right get a dictionary within there and of course we could do something like this if we wanted to grab the ZIP code from there is the zip code in there no it's not uh let's grab this let's grab the city just to be explicit we can of course you know call things within our uh within our address we can call the the sub components there where we get any Town out of there um or we could grab the list of phone numbers uh let's just go and do that real quick sorry I want code let's just do this and instead of address we're going to grab phone numbers which is a list and let's grab this let's grab the second one which is of course subscript one and we we should get this this last phone number right there so we can get it at this just like we would in any list complex data types and all of this is very neatly stored in um in in a in a in a data file that we can retrieve now of course you know we always use the person uh method here but uh there's all kinds of uses for this right you could if you're writing a game like there's nothing saying you know this is you know this this player's name is Bob and his class is a fighter and his attributes are like strength and dexterity where he's got different different attributes there like in a role playing game or maybe it's a a sports statistics so you know we might have you know name bow Knicks position quarterback you know pass you know stats and then passing yards you know 300 and you know uh interceptions zero so on and so forth we could we could build all of that out like this and save this thing um as files and retrieve them as we needed and of course we can have collections of these things as well um which is a great segue frankly uh into our next topic which is object-oriented programming which we'll see a lot more of this but this is a great way to do what we call serialization serialization is basically taking a data structure and finding a way to to represent it in just straight text store that on a file and then retrieve it later without having to manually recreate it um we can do this with databases as well um but flat files are a great inory to that so U just a really cool way uh with files alone to be able to store and retrieve almost any data structure you can come up with and then of course maybe you can see some of the um some of the um reasons we use complex data structures in this example so anyway I think that's enough about files for now let me know if you have any questions about all of this um I I I hope this was enlightening and hopefully you'll find more uses for files um we have one more unit uh which uh I haven't talked about logging yet uh because it turns out there's another way to do it but all of this could be used to for print statements or file IO to basically say Hey you know this is the current value of my Loop or hey here's an error or something that I want to examine while I'm debugging it turns out that that's not the best way to do that there's a built-in mechanism for that which we'll cover in the next unit called logging so look for that in just a sec