okay so a little bit of a departure from where we were um there's just some ideas of strings that are expanded upon early in the book um that um you'll read this week um if I don't if I don't move things around a little bit um and it's it's how to operate on characters and strings um to give us some ideas of um of some some thoughts that we could uh we we can use these operations to not only manipulate strings and change strings like we want but sometimes these things are useful to see to use with if statements and conditional logic to test for equality and things like that the big one is um is is the lowercase uh operation um it's very common when you read um read input with CN to want to compare What's Done uh uh to another value and do something about it right so we might read like what is the user's age and we could read the string 21 as opposed to the number 21 um and then we could say hey is that a digit and if it is uh then we or is it numeric if it is then we might want to for example convert it to a number so we could do math on it or if we wanted to say um what's your name and I put in Trev um we might want to for example uh make sure that the case uh is changed so everything's lowercase for a comparison now you don't actually change it you know for display or anything we still use the capital T in my name uh but if we if we want to compare things um I could I could write it you know I can write in my code I could write capital T I could write uh lowercase t i could write all caps I could write all lowers but if we make everything lowercase before we compare them or uppercase lowercase is usually uh a more common example and we compare them it it allows us to get around some variants that are common in language um and there's some other things we have here but these are uh very uh very common things that we can use uh to do some comparisons or operations where we have two lower and upper like we just talked about we can check things if a character is alpha numeric or um Alpha or a numeric or if it's a space uh if it's a white space um um now this isn't space like the keyboard space bar it's it's checking if it's whites space so for example uh you might recall when we talked about uh the CN operator it reachs to the next whites space but it does take for example a tab as a white space or a new line um that will those will all evaluate to true as well um a few other uh functions that are useful um is the at uh part so these the the character functions and what they do are are kind of Illustrated down here but there's a few things that that work on strings as well um You Might Recall string is a sequence of characters um and they they have what's called an index so the very first position is position zero and and then one and two so on and so forth so for example in my name position zero would be a t and then position one would be R uh so on and so forth well we can get um what's at what's at each position so in in my name which we we'll use Trevor here um we would say what's at position three you know if this is name at position three it would be not it'd be V right because it starts at zero so it be t r oops I don't have my C camera on I just realized forgot to turn that back on earlier it'd be turn that back on it'd be TR r v which is the fourth position but um but it starts at zero so 0 1 two three 0 one two three which is the fourth position uh would be the V so just remember you have to subtract one that's that's the main thing there and you could see you know is that V or whatever so you can use the at statement there um the size function uh Returns the the String's length so in Trevor uh it would return six and in v in Trev it would return four you don't subtract one there and then lastly there's an append function that's very useful if I had uh string one uh set to S1 there and I had Trev um and then I had S2 set to swarm uh S1 append S2 would say Trev swarm it would evaluate s swarm and that assign that out to a string variable again plenty of examples in your book I just want to highlight some of the big ones that you'll probably be using quite a bit in your projects and then I think I just have one more slide uh yep so a few more functions that I wanted to call out of the book uh find will return a number um so basically it takes a string and it looks for a smaller string within there um if I put say I had Trev swarm in a Trev space swarm in a in a string and I put and I put find swarm it would return position six because it' be zero for Trev or t r v and then space and then sixth would be where the S would start right it returns a number um and then um and Returns the index of the first item so that's a function um substring Returns the first time uh or the um the uh the substring basically returns um a part of a string that uh it's how you can get an inside part of the string so you you could do something like if I wanted to say substring two and and then I gave it a length of two on my name it would be 0 one two which would be the third position so it' be TR e and if I said like length two it'd be e and V it basically says go in so far and that's the index and then it says give me the next blank characters and that's the the length uh push back uh is basically um what what looks like um uh it basically takes a character and it puts it back to the end of the string that that's all there is to it it just tacks it on you can go one character at the time and keep building out strings that way um and then insert kind of works like substring but instead of uh giving me the string that's there it actually puts the string there and bumps everything else to the back um replace Works kind of s similar to insert uh but it basically says finds the first copy of a uh of a of a string and puts it in there and then finally there's another way to add to append to two strings that we saw in the last you can use the plus operator if both are strings or characters you can hit plus and that will combine those two together I think that's about all there is to that um just some to some to be aware of that I wanted to call out separately um and uh we'll go into some examples here normally I'd go into code here but I want to keep these uh videos a little separate from that um but strings are there no the main thing to know about strings and and characters is there's there's a lot of oh man it can make your head spin about how many different kinds of ways you can get at things U but there's usually a way um often this is a great time to use uh Google and uh and like stack Overflow even AI these days to say hey I need to do this on a string and give an example can you help me write some code to it because sometimes the the things really need to go together like you need to find the index of a character and then you need to Pat it out and all all these things um but those are the building blocks those are the main building blocks that we're going to introduce early on uh for your awareness and we'll do some simple operations but there's a lot that programmers do with strings it's it's it's both one of the most powerful parts of of of fast processing with computers and pattern matching and also one of the most head scratching could just make your head spin writing these things sometimes so um not my favorite Topic in terms of how fun it is to talk about but it's very important and very useful in your tool kit so uh I think that's all I have on strings that are just lecture um we'll get into some examples here uh in a bit uh from both your reading and for your assignment as well so thanks