starting right back up in our tupal uh apparently Trilogy I meant to only do this in two videos actually I thought it was going to be one um i i t tend to get going and I do apologize if I go a little fast here please uh use these videos as reference and and let me know if you have any questions or if you'd like me to Deep dive um into these asynchronous is stuff like that not to be apologetic about it but um you know what what you know instantly resonates with you guys and What needs deeper explanation is hard to read when I'm literally lecturing on these things months in advance so um please as you're watching this and like okay that didn't quite stick come see me during office hours I love seeing students live um and I don't reiterate that enough um I wish I wish we could always be live frankly but I know some of you are off campus so anyway uh just a little uh side side uh sidebar there as we continue down tupes um so we're going to set up a uh tupal here just to have uh do some operations uh one thing we can do is of course we can count uh for values uh we did this uh previously so we're counting how many twos are in this so we see one here one here and one here so we get three so you can you can certainly count how many times we see a value with in tupal with the count method so again this is not an index in this case this is actually a value that we're looking for that's the main thing to remember with the count method of tupal we can get of course the uh the the the uh we can do um the the opposite type of lookup uh where we say what is the index you know I don't like this demo let's grab let's put four somewhere else let's put let's change this to 14 and let's put just because of where it is uh and that's not a great example so let's let's put four like out here a little bit more like so so let's just rerun that to overwrite this remember I'm not changing these values I'm overwriting it and now it's creating a new demo tupo so that's why it's immutable right I couldn't have just changed 4 to 14 programmatically up there just to reiterate that the point being though is I didn't want this to be the fourth index I want it to be the seventh index it's basically taking the value of four and saying hey where does that occur what at what index does that occur and of course it's the eighth element so it returns this the index of seven remember they start with zero um so just a couple quick look uh uh uh methods that we can use to get in and out of these things outside of the indexing themselves of course just to um uh uh to prove that I guess we could use demo T Tuple of of seven here right like so to uh show us that that is indeed the value of four and as a matter of fact if we really wanted to be redundant about it we could grab this and we could put it in here which is silly I don't know why you'd want to do this but this is going to return seven right and then that will get plugged back into our slicer uh or our uh our index uh operation and it will return of course the value of four which is where it found it uh but um you hopefully you can kind of see how that's working that this Returns the first uh time it sees four it returns its index and then that index is of course getting passed back to this with our slicer uh or our our indexing um syntax with the brackets to the tupal and it's returning the value there which of of course is four because that's exactly what it just looked up all right the last thing I want to cover is this idea of dictionary Keys um and and why these things are used we'll cover dictionaries um in the next uh unit um as we study data structures but what dictionaries are if you've never seen them before are a key value pair basically we get a a key which is a name for an item in there and they have to be unique and then you get values with them and they those values could be anything they can be a string a number or any object um and they can be nested just like like lists and and in this case tupal scan um but often you might want several um several different values to be the key so here we have location data saying New York is at a latitude and a longitude and we can use those com in combination to look up what that value is so we'll we'll see that here let's uh did I provide a demo uh I did have one let's let's just go ahead and demo this I think I deleted it as I was adding the next one so let's just do uh let's just do location data like so and then we can um use this as the name uh and umh did I get that all right no got a space in there that's so let's load location data here and then of course we can look up based on that what the value of the data at this is now this is handy because there might be something else on the same um is it latitude first I can't ever remember I think it is uh there might be something at the same latitude as New York but it might be you know 170 or you know 74 or something like that where we we need both values to to distinguish New York from something else that's on that same longitude right um so we might need more values we could put a full address in here and say who lives at this per address just one simpler example um let's actually change this where we have me as a a teacher then we have a different one as a student and we want to say hey what's the value of this so we load it and of course when we look up that uh Joe Trevor as a student um it it returns you know the the the string of student here and of course if we change this to the version that of me that uh would be a teacher um it Returns the value of teacher where Trevor uh is not enough to distinguish between these so in these ways we can um make make unique Keys uh if you're if you're um you know perhaps a a data database person uh we can write you know a primary key or unique key to look things up um and we can get more elements in there as as as necessary to build essentially the equivalent of a primary key all right U there there's a little bit of of stuff that will raise errors here essentially trying to do some things with IM IM immutability again um what I keep losing my stinking code here uh on why we would want to uh unpack these things I'll just write it from scratch let's say let's go defa uh and then I don't know I kept keep losing this so um this would be a simple function uh it looks like it saved it for me but um get location here so we'd have a function uh what I'm trying to get out here sorry I'm jumping ahead because I lost my code is the the idea that we can return more than one value out of a function which is quite uh quite often useful to pack a bunch of things together again they're they're meant to be together um so you might recall that uh functions can only return one value most of the time but that one value can be a tupal and you can pack items within tupal uh this is a a similar trick that we do in objectoriented programming where we build an object within a function and then return the object but within that object or class we have a whole bunch of other other bits of data so we could process many things um so uh you know we could certainly unpack just the uh the longitude here and let's go do print let's just do well let's first well this is good enough demo um where we separate out latitude and longitude um uh you know uh in this way so um the idea though is that we're essentially from a function we're able to return more than one value and then unpack them after the fact and and get them back out out of I've written this code like four times oh I skipped right over it sorry oh I get lecturing sometimes I get going oh man well well whatever well no wonder the AI figured it out because I literally wrote it right above apologies for me being silly yet again okay uh that's kind of everything on tupes uh I know I kind of went full blast mode on this I think they're pretty simple structures um especially uh in in the sequence that we're talking about them they're similar to um lists of course in in that you know you can index them and you got methods to work with them and things like that but the only difference is they're not changeable or they're immutable um and as such we can use them in spaces like passing them in and out of functions to do do some operations that you couldn't do with lists um there's ways to do that with lists of course but the traditional way of doing it from a a a function is a tuple and then of course you assign that out and use the uh the unpacking methodology that we talked about up here um the unpacking methodology that we talked about up here way up here uh to get them back out and deal with each of those individually if you need to so okay I think that's it for tupal we'll move on to dictionaries uh next um let me know if you have any questions um I'm I'm going fast and furious over all of these data structures um because they're meant to be similar but there are differences hopefully the the differences are resonating with you and if they're not please let me know and we can spend more time on them thanks