welcome to the unit on if statements and expressions this week we're going to start to build our toolkit out from just doing line by line code where we can kind of limit what we're doing and we're going to really start getting into some of the uh powers of computing using a concept called branching uh uh based on uh either either just straight uh values or even uh looking at variables themselves building on what we did last week and um considering them and and doing different things based on what they what they store it's one of the uh real core things we do in Computing uh pretty powerful concept um I've got a few slides here um just to kind of illustrate it they're not great slides I apologize for that if you recall kind of our model where we take an input and we do something with it and produce an output from our previous weeks uh where we did something for example maybe with a print function and we we have the uh user put hello into like a variable and then we print that variable and it prints it to the screen we can do similar things with um what are called expressions and uh branching statements the main branching statement in um in in Python is called the if statement um and what it does is it evaluates what's called an expression and I'll get into this in code in just a little bit but what an expression does is it basically evaluates if something is true or false what are examples of this um well we might take two values and two numbers let's say let's say the numbers two and four so let's say the value one here in my little slide deck is four and we might say the value uh you uh the value uh two is contains three and what we might do is say let me go and get rid of this for just for a sec here just move it down here what we might say is um does the expression let me grab another text box here sorry I'm not doing very good job in PowerPoint here but we'll get we'll get through this uh little bad text snafu here uh what it will do what we can do is we can write what's called an expression we can say um if value one is greater than value two right uh what and what this will do this if statement basically says take the these things in this logical operator and and tell me if this thing is true and this reads just just like it does in math it's saying is four the value held by value one is is four greater than three and in this case it would be true right because four is a bit greater than three um or if we flip them around we could do something like this and then it would evaluate to false that's the essence of of uh Expressions uh really in a nutshell I'm going to actually duplicate the slide because I kind of like what I just did there and I'll do do a different thing with the end statement down here so I'm just going to clean this up as I go apologize for doing that in real time here so the idea of an and statement then let's go ahead and put this back up here is that we can um also combine these things so like we might do something in Python let's just grab a text box uh text box I'll just copy this one I guess and we might say instead of value one being four um we might say something like um this is today's temperature might say let's say got a little chilly out today let's say today's temperature is 50 I'm going to rename this let's call it let's call it Temp and let's say the uh the the hour hour is let's say it's 8:00 outside p.m. 8:00 p.m. and we wouldn't do this in code because we'd have to deal with strings and stuff but for illustration purposes we're going to we're going to use this example so what we might want to do is write something to the extent to to say something if again we could use if the temperature I'm going to try to capitalize it here is less than let's say 60 and the hour is past 8:00 p.m. or let's call it 7 p.m. just to illustrate here we can say if this is true and so basically it does it twice it says is this true and is this true and if both are true if both are true then it will evaluate to True right um and if one of them is false let's say we change this to 70 and we say if temperature is less than SE six if if the temperature which is set at 70 is less than 60 this is now false so this whole thing would evaluate to false so what we do with and is we we combine things and there's different operators like this I'm just introducing the topic here you'll get into this in your reading but I kind of want to show you the the power of these things in a lecture format and we'll get into just a little code here in in a second I think that's all of the slides I have but I also did want to point out one other thing that you have available to you which is this uh where did I put that sucker oh let's just turn that on right now sorry I'm still kind of setting up this as the course as we go um I wrote uh this this guy which kind of goes through the different ANS and ores and things like that um and tells you how they they they evaluate these are called true tables these will be covered in your readings and just like what we just did um it it it discusses several different options uh for for combining this kind of logic I'm not going to jump into this too much in the lecture here because I want to keep it brief and I think it'll be covered but do let me know if you have questions about that uh getting back to the assignment though and some a little more uh lecture material uh we we will have this homework this week you might have seen this when I did the uh homework overview outright uh you will basically be doing the prim model again where we predict and run basically play with some code and I'll go over that in just a hot second uh investigate where we take a look at things and kind of figure out uh what might break and might not might not break it's building on it and modify some code to do a few um a few uh uh experimental tasks in in the code environment and then finally we'll do this kind of thing where you're going to take some input and basically figure out the hour and then display an appropriate message and we'll get into an example that just does a very similar thing to this um in our example um and lastly uh just because we've moved away from repet I just want to remind if I if I've left traces of repet in there make sure that you do do turn in the code and for the assignment down here you could call this um if statement assignment or week three whatever you want it doesn't really matter to me as long as long as I know it's you and which assignment you're working on um so let's see if there's anything else I wanted to hit on these pages I don't think so actually that's not even y okay so I'm going to give a few more examples here and then we'll go through the assignment stuff uh just clear this out and um and I I actually want to introduce a feature in Visual Studio code as well this is just a bunch of different uh bits of python code I've written to illustrate here but what you can do uh in Python is you can actually not run the whole file like we do when we do this like this actually won't make a lot of sense because all of these things are little files that I just wanted to put into one place um but like so you'd get probably an err somewhere right because I I I've left a lot of junk in here uh in this example but what you can do is uh for example this uh this is going to import What's called the math library and we we need this so we can do square roots in Python is the reason I've done that so the idea is it takes the number nine or a number and assigns it to a variable called my number and it figures the square root the way I can do execute just this code is highlight it and I can either rightclick and I can go uh run current file or current selection line in interactive window like this um oops ah sorry let's cancel out of that I I hate when that thing does that uh let's uh let's just cancel that all that out oh uh you can or you can hit control enter and uh so let's let's make sure that just works with with the maybe I hit the wrong thing or shift enter I'm sorry shift enter I don't know why that's wanted to launch over there there okay let's just use shift enter for today I'll figure out why that's doing that in my window another time but shift enter will basically send your command to a python prompt and if there's not you can just close this if you want and if there's not one it will it will launch one for you like that and then if you're getting tired of the redundancy you can actually drop this down right here not that one you can drop this one right down here and you can clear the terminal as well which is quite nice um for this kind of stuff and I'll be doing that while I'm illustrating just wanted to let you know what I'm doing I'm hitting shift enter when I do this to run different kinds of code and it's a nice way to play with some code and experiment in the upcoming assignment so why do we use if statements at all well one is to extend a calculation right let's say we either had a user input this number we basically want to write a calculator um well uh this works just fine we we import our math statement run the thing and we can see it Imports math it feeds the assignment of the variable nine or the value nine to the variable my number and then it prints that out and then finally um we get the output this is the output by the way these are these three um these three uh greater than signs are basically telling you this is what was input when you when you operate in this interactive mode like this but as we know uh we can't take square roots of of negative numbers so let's go ahead and try that let's go a and run that and we see we get a value eror from the math library and it says you can't do that it says a little more cryptically than that as computers often do so what we can do instead is we can use the the if statement and let's go and introduce the syntax here we can basically write an expression this number and this value are compared with a greater than or equal to assignment operator and you can look we have all those in the book and you'll you should go through those either in that page I just showed you from um from canvas or or you can the book or any python lines there's several of these you know greater than greater than or equals all of the things you would think would be there are there um so we what we can do here is we can write this expression and then what if we'll do here is it will say if this thing is true do this next thing now this is a weird syntax that we we're introducing right here when when we do uh branching or blocks what we do in Python is we we uh we write a colon to say okay there's going to be a part of this code that executes based on this thing and we'll see this in different syntaxes as we go but for now we need to write a a colon and then we need this indent this indent is very important it's usually four spaces but they have to be the same in Python um in other languages you'll use braces and things like that to tell tell the uh interpreter what where things start and stop but in Python we don't in Python we use this in Dent so when I run this um I'm going to run it just to kind of show you the difference uh we'll we'll demonstrate the code and then we'll we'll break down the code a little bit more so when I run this you can see we feed this thing through and it runs it basically says because we're negative one here it it does this part it says this is not true you know because we're we're negative one right now so the number is not this is not true the number is not greater than zero so it go it fails this or it fails this and it says okay this is the true part and this is the false part so it goes down here and it explains it does a nice userfriendly thing says hey silly you can't do that now if I change this back to nine we'll see the opposite happen where we can fire this off and and it does exactly what we would think where we get three back out um so that that's one like the first justification is is to basically do something based on what's going on in the program uh and in this case we get unexpected values and we can uh we can do different things based on how we want to handle this condition right here one thing I want you to be aware of let's pretend we were rewriting this to say I want to know if it's exactly the same this syntax right here you might recall from our um variable assignment is the assignment operator this equal sign is saying if the or I'm not I'm sorry it's saying assign the number nine to the variable number if I wanted to actually compare these things I would write it like this this is important so this means means are these things equal this means assign this to this I'm going to say that again because it's crucial and somebody's going to make an error and then if I if I call it out now I can point to this video and say this is what you need to study a little bit more this um equal sign the single equal sign assigns the number nine in this case to the variable number the double equal sign compares the value in in number in this case to zero and this is a test so let's go ahead and and and try this I'm going to change this actually I'll just copy it because I want to use this code later let's go and do this and uh let's say print let's just make this a lot lot more simple so right now uh we're going to um first take the number nine assign it to the the number variable and we're going to compare number to zero what what do you expect happens exactly what we would think not equal change this to zero guess what equal pretty straightforward I know little pedantic but I really wanted to emphasize this is what's called an expression and it's being evaluated by this if statement if this passes it's going to do this block of code and we can actually have more than one line of code what's a block of code great I'm glad I kind of stumbled into that I didn't think about it till this now print you can do a lot so the reason we indent this is because this basically becomes a little subprogram if you will that executes only if this happens and it'll keep going until we we come back out to the indent so the indent says do this stuff when this happens and same thing can happen with the else statement um so we can we can see that and we can see that both of those lines execute um some other cases for if let's say we have an age variable we do something like this uh we might have a I don't know a thing that says you need to be 18 to use this program for some reason probably not the best example for a college setting uh now that I think about it out loud but uh let's say we we we've read this variable we know it's a number and we want to say okay if they're 18 or over access granted otherwise don't well we can run that and as might might suspect by now that this will pass until we change this to like 15 and then we say the same thing so similar to the the math thing where we're handling different kinds of uses but this is be more of a logic thing that we want our program to do something based on what we're seeing in the programing variables and then really nice like you could absolutely do this right um something like you know make that comparison to constants um there's nothing wrong with that but the nice thing about computers is we can use variables to change this out and start to modularize our code where we make it more reusable by having a placeholder for the age and plugging values into it from other places this is a theme we we'll expand upon as we study programming more and more is this again this idea of uh taking an input doing something with it and producing an output well it turns out that's all we're doing here really is we're taking an input to the if statement uh which is this expression and then the output is either this or this depending on what this is so it's it's our first kind of concept where we expand that um just a couple more examples I wrote up here I'm going to skip this one it's kind of boring actually where we have a greeting like that might happen to at the beginning of a program but uh what we can do is for example we might have this little function it's called you can read it just like a program you can actually I'll just get rid of that we we don't really need that uh so I'm just going to unindent things just back to normal because of the way I wrote it quickly we'll get to functions later we'll explain what what was going on there another time uh and I'll just make this we'll just make print sorry I left the code like that that was a a little much to read in week three probably so what this is doing is it's taking um from a part of python called the datetime library don't need to really know what that is but it gives us access to what what the hour is right now this is that's what this all comes back out to and assigns it to the a variable called the current hour that's the upside of what we're we're doing here and if I run this whole thing we can see that because it is now 5:40 in the afternoon it's basically saying is this thing uh less than six and this is on a 24-hour clock and it's saying nope it's not so we don't say good morning and it's saying is it less than 12 um but also or greater than greater than 12 but also less than 18 and it it will say no that's not true either so we're not saying good afternoon and then it does this else statement and the else statement basically um catches everything that doesn't happen and it will do something by default so in this case we get the good afternoon uh bit of code here um the L if is new to this block and what this is doing is saying first try this and we have our expression here saying um if the current hour is greater than six and less than 12 that's how to read that it's shorthand you could also write that like this if you wanted to make a the use our and statement we could write it like that probably probably a little clear and I I'll go and do that here as well that's that's a shorthand those are the same thing um it's saying try this and this and again going back to our truth tables both of these have to be true for this to to be true um and then it says that that failed same thing here um because it's actually nope it's actually uh this would pass we're not quite evening if I lecture for a little more longer and I hope I don't for your sake um then we'll get into good evening here uh just as you would expect so just a couple ways to move from a general greeting to something a little more user friendly and dynamic so you can see where we can start to implement some of our ideas in computers in in if statements so um this week in the assignment um I actually have done this in the same file this will be under support files um when I repackage it here um I'll go save that actually is okay we don't need that um so you me might remember Prim uh preview uh uh so let's go and look at that there's the preview instructions uh which is basically telling us what we're going to do longterm uh and then we'll get into the um pred part so basically you're going to kind of go through what we think will happen here um and this is a great time to use that trick I just taught you so you can go through this and I won't uncomment this uh yet but you can actually say okay I'm reading this as number equal s thought of it what's this going to do well it's a guessing game isn't it right so we we can kind of play with that um H looks like I messed up an indent in there to take a look look at that the other way you can of course do that is run our our play uh let's go and clear this out let's just kill that and run this what did I do how did I break it I'll take a look at that and clean up the code um apologies for that um there's something going going on uh with my VSS code here I don't know exactly what I did this should work by my eye but um it's also late in the day um so uh but uh examine this code and um and kind of try to figure out in your head what it's going to do and then run it and see if it does does the things that you would expect um and then what you can do if you want to run this other code is you can uncomment this so what do I mean by comment when uh there's two ways to write uh basically notes to yourself that's why they're called comments in code the first is this pound sign anything on a line that follows this pound sign will not execute so you can write my name I could write example code whatever I want in there the other way to do it to block out a bunch of code at once is to put it put three of these uh uh quotation marks around it and I've done that here to disable this code which is another handy byproduct of of uh coding uh you can basically say I don't want to run this thing anymore so what we can do to get this other part to run is we you can actually just move this like that and you can see it it kind of makes it red like that that's basically telling us this isn't going to run anymore that that's a hint that it's telling us it's basically considering this whole thing a string um in this case and it's saying ignore this let's see if this this other one runs I don't know what I'm doing wrong here I apologize for that there's something that happened here tell you what let me relaunch let's close everything let's close all close everything O Let's close close all and this is a good good opportunity of course to uh let just exit and um if you might recall from our earlier video uh if you've downloaded the uh files as instructed and and expanded them out somewhere into a folder you can rightclick on this and do show more options and launch the whole workspace with open with code which is quite handy let's see if that cleaned up our code here under predict let's go and try that um so let's just try that I do not know what's going on I wonder if my interpreter got messed up um anyway uh we'll get that squared away in the code I'll make sure that works before I send it out proper but that that's what you'll be doing here um and then we will go into the investigate where you'll answer some questions about the code um and again this is just kind of you know in your own head you don't have to submit this or anything uh do let me know though if you have questions this is this is part of what we're introducing to kind of make it a little more interactive even though I'm not sitting there with you while we're doing this I'd like love to be but uh that's not what we're doing with this class and then um and there's instructions for all this by the way where you can go into the uh investigate instructions the the predict instructions so on and so forth and then finally we'll play this will give you some instructions to modify this to actually take two numbers or a third number a third number and add another if statement here and then finally we'll get to our assignment itself where you will basically be doing the instructions for the overall assignment um which again you can use preview for to make it a little prettier and you'll be fulfilling this requirement which is also of course in the assignment itself here um so that's what you'll be doing is writing if statements to basically do this and then you'll um go ahead and name it appropriately something like this where we might call it assignment 3 and then you'll button that up and and submit it to to Canvas and I'll grade it and and we'll all learn some great things together um so I apologies for the code demo there try to get that squared away and figure out what that is I might post a little supplement video later tonight uh when I figure out what's going on with Visual Studio code my computer's been a little finicky here this worked at home this morning but not here so uh anyway that's that's the if and expression lecture uh for this week let me know uh if there's any questions use the discussion boards we'll have one both for the weekly assignment and how this adds into the final and then also a general support one let me know what's going on there and we'll uh we'll get to it thanks