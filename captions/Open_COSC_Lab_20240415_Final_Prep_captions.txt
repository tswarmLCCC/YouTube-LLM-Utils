um kind of how did you start out then and and I guess uh What uh what's what's kind of troubling you just no idea where to start or I mean I know I'm supposed to like make that basketball game but I have no idea how really sure sure it's a great question it's uh it's it's kind of um it's kind of um nebulous uh to start um and and that's true of a lot of a lot of programming um problems have you watched the previous videos when I kind of went over some of the requirements or should I go back over that a little bit do you think I've only like skimmed over one so we might need a I might need help with that okay let's go and do that um I'm gonna go ahead and uh gonna go ahead and share my screen here with some note a little my notepad here um just to give me some some sort of whiteboard to write on right hi Jaylen how are you hi I'm not I'm not on my computer I'm just on my phone okay no big deal um trying to figure out how I can there we go um so uh let's see so let's let's just start with with the big broad Strokes here um you know we're in a basketball game right and we're down three right and we have the ball um just some assumptions so um often what we do when we we try to model situations like this or write a program that kind of mimics something in reality is we start to write down our assumptions or things we're leaving out intentionally um to simplify to simplify the uh the process a little bit so one thing that um the one big one that I I want to um share with everybody if you haven't watched any of the videos um is that we're not going to be modeling like a basketball game like each individual player or dribbling the ball or passing the ball or anything like that we're only going to be modeling the very Basics here um and and uh even that'll get a little bit complex does that kind of make sense all right does that make sense Hunter oh yeah not looking at that yet I was trying to do that oh good good I'm glad I brought brought that up gonna just take see where I can I save this sucker at where it's let's get that in here and I'm just GNA I just don't want to lose this so let me do basketball mods so essentially um what we're going to end up doing is um we're going to model based on probabilities uh what happens when we shoot a ball um and either we make it make it or miss it um and then what happens when the other team we will want to foul them right we're not going to leave them to foul uh or to just to run down the the uh the clock so um basically the idea is if we take a three-point shot we're just going to run down the clock and we're going to take a three-point shot with some with no time left right if we take a two-point shot the strategy there is to take take that shot and then try to get the ball back um and and make another basket to either tie it up or win it um and that'll be based on um on our our ability to make a two-point shot and then the opponent's ability to make free throws right do like that kind I'll jive with um you know what what you understand about basketball I I barely know anything about basketball to be real okay that's fair um let me um I did produce a uh page for that very reason I'll bring it up here try I I have a gigantic monitor here um so I need to resize the the monitor or the the um browser window let me just a sec to do that oops sorry it's taking me just a little bit to get that get the corners grabbed and things like that there we go it should be better so let me just switch over to Chrome again okay and then in 10:30 or in 1010 sorry 10:30 down here in the basketball in the final information uh um I wrote this just a little bit of information about the game of basketball and things like that and and um what uh what matters for us the big ones are that we can take a two-point shot or a three-point shot um and um and when the opponent has the ball so if we miss a if we miss the uh the two-point shot um the opponent's going to get the ball back right um and we need to stop the clock otherwise they'll just run out the clock and win because they'd be ahead and they can just run down the time left in the game and uh not shoot and win right so we can foul them a foul is uh essentially a penalty um and it has to do with like you know basically you made contact with with an opposing player in a way that like inhibited their movement or altered a shot things like that uh but the point is um there's a lot of different kind of fouls um they all stop the clock sometimes you just get the ball um out of bounds and and and you continue play sometimes you go um to What's called the free throw line um and you take shots at the basket and um for each shot that you make you get one point so it's the idea is that it's an uncontested shot right so you you know your your oppon opponent um made a penalty and you're getting a bit of an advantage by taking free shots for one point each and in in the real game of basketball there's three kinds of those things uh or well really two there's one where um you have to make one shot to get another and then there's another kind where you get two shots no matter what we're just going to always assume though that you always get two shots so um the idea there is you'd shoot one one shot at the at the basket and then you you shoot another one and then after that second one um you'd get the the the uh the te that was originally down uh the team we're representing would get the ball back again right so the idea is instead of letting the clock run down we're going to foul and hope that they miss it get the ball back and try to score more points does that kind of all make sense that actually really helps thank you yep you bet I'm GNA go and write that down I'll come back to our notes um I'm just going to write that down real quick sorry it's taking me just a bit to right and I know you guys can't see it okay I got at least enough of that so I can post some notes for later um uh for the for the rest of the class and I I'll post this video too by the way so you can certainly refer back to that um so what we're building is called a mon Carlos simulation Hunter um and the idea there is we use um we use a a computer and um random number generation or the the chances of probability to um to to study a situation and figure out um which of two or or multiple strategies is better so in our case um we could take a three-point shot and uh let's say we have a 60% chance there of making that thing or I'm sorry a lower chance let's say let's call it 30% chance right um so we model that and we say you know we've got a three chance of making that um and and uh so if we let the clock go all the way down to zero and take a three-point shot at the be at the end um it would either tie the game up right or we would just lose by three points agreed yeah yep so um and then if we make that three-point shot we're going to go into overtime um which is just an extra period in basketball and we're just going to say that's a 50/50 chance to win so just simple math tells us that we probably should have about a 15% chance to win that game right where we'd have a 30% chance to to make the first three-point shot and then a 15 and then and then half of that uh to win in overtime so 50/50 right um the two-point shots much more complicated though um and that's why we're going to write a program to steady it um basically we're going to have a probability of making a two-point shot it's going to be much higher than three-point shot though right uh because it's an easier shot so the idea is we go down there and we shoot maybe with a 60% chance of making it but we're still down one and then the other team gets the ball back and like IAL like what we talked about just a little bit ago we try to foul them and hope they miss and let's say they got I don't know a 60% chance of making each free throw right um so they might make one and miss one or make both or they might miss both but the point is there's random numbers generated for these we're going to CH take take chances of of that probability not working out um and then we'll get the ball back and shoot another two um so on and so forth until we're within kind of what what what we'll call Striking Distance um and the idea there is we'd either be down two or one and then we'll uh just let the clock go down much like we would have done with the three-point shot and then take a a shot at the very end to either win or or uh or tie it up and then we' go to overtime again um but that's a pretty complicated scenario right the math there would be hard to figure out how that would happen so what we're going to do is write a little bit of a a loop uh to to kind of go through those different scenarios to say you know if we take a two and we make it we're down one and all these kind of things and we'll track all these things with variables and then we'll use what's called random number Generation Um to to work with the probabilities and each time we run this program um that it'll play out differently um so it's what's called um SK Scot SC it has it has to do with Randomness it's St sastic sorry I can't ever say the word um as opposed to deterministic deterministic means it always plays out the same um Scot stasic I'll have to spell it for you um it uh it means that there's Randomness involved and each time you run the program it's going to run or at least has a chance to run differently so the idea then is we take a program like that and we run it like a thousand times or 10,000 times and over the course of all those Runnings we we tally up whether we won Tire or won or lost on each scenario and we we start to figure out which way we should uh which which strategy we should take that that's kind of the the the gist of it does that kind of make sense yeah at least on at least on paper right I mean from here I should hopefully be able to do it sure yeah um but I I'm you know I'm certainly willing to help a little bit more um it it can be quite a bit to start to think about all of this um and the one thing I wanted to kind of give everybody was just a little bit of help um where basically we're going to have 30 seconds right so I'm not doing this just for you now I'm kind of doing it for everybody in 1010 I just want to I'm just using you as a guinea pig since you're my only 1010 person here right now I hope you're willing um so we're going to have a variable we'll just call it time remaining right yeah we do something like this and then like much more like what I talked about we might have like a twoo shot percentage and let's call that 60% and a thre point that might be like three% and or3 and just represented decimal form and opponent uh free throw per and that might be something let's call that 65 it's a little bit easier of a shot okay so um and there's going to be other ones up here but these are just the ones that I can kind of extract from this right just just things like that that matter for us so let's pretend we're not going to deal with a three-point shot right now we're going to just deal with the two-point shot the three-point shot's much easier I think you'll find so what what we're going to do is we're going to basically have a while loop and it's while there's time remaining so this is the big big thing that I really want you to base this whole program um remain um something like this and then while you're doing that basically um we're going to um handle scenarios where we have possession and where we don't have possession um so um maybe maybe you and I can kind of talk through that but um if while if we have possession uh what are we going to do we're gonna try and make the ball yeah yep that's exactly it we're gonna try to take shot so we're gonna just try to take shot so if if let's let's go and make a variable for this right possession sorry and we're just going to make that true for now right yeah so if we if we have possession oops don't know what that was I I had on my clipboard um we're gonna try twoo shot and we we can come back in Future weeks to kind of talk about that but essentially what you'll do is um you're going to do um uh I'll just put it in parenthesis here you're going to make a random number and that turns out it can come from the random uh there there's a library we can import called random and then there's a random um fun uh function in there I think it's uppercase and that's going to give us um a number from 0 to one uh a floating point and if that is less than uh our our 2o% uh two-point shot here then it's true oh false something like that and this is pseudo code I'm not actually writing python code um but the idea though is that this is going to give us a number like something like you know 432 you know something like that so it randomly assigned to this and because that's less than this number because we you know we want it to be lower than that to because we want everything um under that 60% uh to be um a good thing for our team um then our two-point shot made it right um and otherwise it doesn't so um if we make it then um what happens to the game then we when I'm guessing uh not quite yet not quite yet there there there's more to it because we're down three right and if we made two points we're only down we're still down one right so we got a little more work to do so that gives rise to another variable right what what might we need to keep track of our score over theirs y pretty much let's call it Point difference also making sure uh we see the canvas page oh you do I'm sorry I'm sitting here typing uh thanks for letting me know you never yeah that's let me stop sharing this this will make a lot more sense here in just a sec then thanks for letting me know though uh let's see that and that how about that that is definitely a bit more helpful yeah so I wrote this out while we we're talking and and I gave us a couple of the variables and I started to write this point difference so our Point difference isg -3 right if we made it then our Point difference it does something different right yeah it we're not just GNA yep that's right it uh it decreases is by actually we're going to add to it because we're negative right um something like that right yep yep and then if we missed not much to do uh everything kind of stays the same just going to write that so you don't even need to write that but I'm just going to write it for here regardless though one other thing happens at this point the thing that happens that's right yep which brings up this right something like that and then one other thing happens that's kind of important here we're going to have a variable or something let's start with a variable anyway this says it says time to shoot the idea there is it takes some amount of time to do this right so so we'll go ahead and uh do like this um where our time remaining Ben of it okay so now what happens when we don't have the possession then the other team tries to make a score or at least hold the ball yeah they' probably want to hold the ball because they're up we're we're going to assume they're not going to try to score but instead we're going to foul them right to stop the clock yeah yep and uh we're g to actually have a Tom to foul as well uh where's that at looking for my time one oh time to shoot we'll just call that five and say time to foul say that's like three three seconds so this would be a lot like this one so you can see how this is going right where eventually this is going to get down to zero things like that um but uh the so the idea then is that if we fou them they're they're going to um have a chance to make a point so um uh same thing here we're going to have a try opponent F or something like that and it's going to be the same way here and this guy again but instead we're going to use this that kind of make sense yeah that that definitely makes sense yeah so the idea then is if they make it then uh our our Point our problem gets worse a little bit right I mean yeah yep so the idea that hopefully we hope this does not happen we hope that this does happen um and uh and then and so they get two shots so we could either write a while loop here or we could just do the same thing again something like that right same same same exact thing just kind of put some spaces in here to make it a little more readable but that that'd be basically what we do and then at the end of that um what happens I'm guessing we get the ball back or that's right very important thing yep we get the ball back uh let's just do it like that and and we get the ball back so that's kind of it I mean that's kind of I mean there's more to it than that because um we'll want to put logic in here to say if we're only down two we're we're going to instead we'll write a scenario here that so this is one scenario where we're down more than two and three or more um where we want to shoot BAS basically as fast as possible um otherwise we want to just let the time go down right so we just change this little part here and we'd add you know basically another if statement there but um other than that that that's kind of what we do um and we can kind of use this Loop here then to keep going down keep keep keep going down and then um at the very end we kind of evaluate you know if we're ahead or actually we could just do Point difference right we win if Point difference is less than zero we lose and finally the point difference is zero then we have a 50-50 chance and then the idea is we just repeat that little program we'd probably put put that into a function and we repeat it and say did we win lose or or well we we'd either win or lose right because even the overtime would resolve in a win or a loss after the 50/50 coin flip right um and and that we'd start to count those up so the idea is we'd get something like you know we won 30% of the time and we lost 70% of the time um and with our three-point shot strategy which would look like this but much simpler we might have won 15% of the time you know which is what it probably should we so maybe we want to take the two-point shot um and of course we can play with these percentages we can change these all right um we can change these to say oh well what if we're what if our gu is a really good two-point shooter or they're a really bad B free for throw free throw shootter things like that so the idea is that we'll code this up and make sure that it's working um you know when I coded it up earlier last week um I had a bad Loop in there where I wasn't uh there was some something I just didn't account for and you would always lose um you would never never ever quite uh be able to to win um and it was just a bug in the loop um so it's going to be a bit of a challenge I mean this is a harder program to write than what we've been doing for for sure um but it's a cool one it's a lot of fun to write and get working and kind of see it come to life um and and go through modeling like that but uh yeah I kind of wanted to go through that with at least one student from 1010 I was hoping to get a few folks so we could kind of discuss it together but um I also don't want to leave you guys just high and dry with this stuff so I'll certainly post this um at some point along with this video um and uh let's let's do this uh let's just say right in here in case somebody finds these notes and then hopefully we'll have a little program that can kind of figure this PR out for us right you have any questions about that I should probably have it from here I've made something similar to this before oh good good I suspect we'll have a few folks that kind of get stuck on it but uh yeah um the main thing is we're going to make a few assumptions and it's based on probability and things like that but yeah um I would advise everybody to get started right away on this um it's not not an easy program um and that's why I kind of gave you guys two weeks to do this next unit in in 1010 and then so that gives you basically three and a half weeks to finish this from where we're at right now um so well if you're good there we can switch to our 10 10:30 or I'm sorry 20:30 and 2409 folks do you guys have anything you'd like to talk about tonight I guess I'm the only one here from 2030 sounds like it yeah really work on it very much since last week so I don't really have anything to add unfortunately it's okay um you know we're in a good place in that um I did look into some of the mapping and things like that uh let me see if I can find that code for you Maxwell okay let me see if I can bring up people I hate not being able to see who talks um oh are you the only one left everybody left on me wow okay didn't even say goodbye I didn't notice either welcome to the life of a teacher uh give me me a sec let me uh see if I can find this um I I did a little coding for might have did it in rep give me a sec there can't remember where I wrote that from because I was curious I I hadn't used some of those newer standard Library functions um and I wanted to I wanted to see how it was done I had to do it in a much different way but uh you are absolutely right the map's great it's basically you get a key value pair um and and things like that um it's a great way to approach it you were dead right about that good job with that thanks for the help let's see here I don't think is it on your screen I still see the basketball yeah no I'm I'm looking for code I and it it and of it's finished so I don't want to show it yet um oh CU I was seeing like the mouse cursor move around but I guess yeah yeah yeah actually saying is different that's intentional but thank you for letting me know um give me just a sec here excuse me that C++ got too many things called the same thing let's see here sorry to take so long been jumping all over the place lately uh let's see what I did here yeah give me one sec to make sure this runs that's weird oh yeah it was that's right that okay I can share this um there's nothing special about this give me a sec I didn't get it all working yet but I got some of it working uh the idea was to have this count using this um Lambda function here um but I could not get this resolved I found it um in some old code of mine I couldn't figure out what I was doing uh but the idea is that you can count uh the uh the number of Target values which is uh kind of interesting let's see what was doing here I think this one worked yeah so um let's see this this one counts it it's not not a Lambda function but the idea here so you've got basically this guy kind of guy right and I just call dictionaries but the idea is you know you um and I don't even think I use this enumeration like I was going to um but say you have like 10 hearts and five diamonds right this isn't like the 10 of Hearts uh it'd be like you know the uh it so it'd be more like this where you'd have like you know five hearts and things like that and none of these so the idea cards yeah yeah so this would to total up to five right and you do the same thing for the face um so uh the idea here then is that you'd get this and you could say oh that's a flush right it's a flush when you have I still don't know all oh yeah yeah it's it's basically when you have all of the same suit it's one of the things you'll need to to count up right okay yeah is the idea and then similarly um just go and something like this yeah so that so the idea is that you go through and count them um and if the dictionary has uh um the item you just increment it so you go through each of your cards and you check to see if it's a heart or Club all the same yeah so you'll have five cards in your hand right so if you have five Hearts that's the entire hand right oh yeah that's right yeah yeah but even before that though what you you do is you go through your cards your five cards and you just go one by one and you say is it a heart or you know whichever it is you use that key here um because you can do that you can I think you can do that instead of doing uh so say you get um oh what is it are you trying to use Str Str as an abbreviation for like a standard Library string no yeah yeah I don't think you can do that anymore oh goodness uh yeah I think it's just string okay I mean that's what I have to use here but that's okay um wait oh I didn't not you're not importing the namespace and you didn't say from which Nam space to get the string class you're right sorry I don't write enough for this oh got here one sec sorry yes why isn't this working is this a thing where I can't see your screen because it doesn't look like you're changing very much on the I see your mouse moving again but what's the difficulty here I'm trying to get this um the uh the key I'm trying to reassign that into um to use the string there there we go um yeah that's all you had to type I don't know what oh no no it wasn't that I was looking at this um so so the idea though is you can use this as the key here so basically um the idea is that this would come in from the card right as you're looping through it and you just read this and then depending on whatever kind of card so you just read in the type from the first card I guess in your hand and so yeah so if the first card is a heart card then you'd see if the next four are also Hearts right that's what you're try say right yeah and uh so then you can use this to say is it in there at all and if it is you can append it if it's not I'm sorry and you can append it with a count of one right um and if it is in there um so you could do so you'd say uh you could do something like this where um and instead of Hearts you could do um so why are you starting by setting my current phas to five why you setting that the value of that index oh I was that that's from an earlier demo yeah that was confusing me because I'm like no it would start at zero and actually it wouldn't start at anything you wouldn't even have any of this you wouldn't even have the the pair you you would want any of this yeah because what you'd end up doing is you'll make an you'll have a vector right um yeah a vector of them uh oh no I'm sorry you won't um so if it's in there you'll do that and otherwise you'll add a you'll add it something like this um and I'm not sure the a pen in the map that's what I was looking at um but I think there is just a straight up uh aend just to add a new key value pair I don't know yeah all the methods of the map yeah that's what I'm trying to do for you sorry I'm not not illustrating my thought process very well here um I think it's just insert actually so the idea then is um the answerer or is there an append I I don't know I could check like a reference S yeah I'm looking at right now too [Music] uh but that's what you'd want to use there is an insert insert method looks like hey I think it's just answerer it's a blank one though that's kind of what I'm looking at too access insert that might be the one though you're probably right yeah uh you could just do insert and then uh like you create a uh something that looks kind of like an array inside the function parameter and then the first uh first thing would be like which number which index number yeah yeah give you something like this right let me see uh yeah exactly something similar to that why is that so you're considering pair wait not sure what not sure what pair is in this syntax did that auto complete for you or something or no I'm just grabbing from this thing in the reference S that I saw it it's not using a pair it's just using what looks like an array I guess no not not a standard Library array like just like a the curly braces uh like curly brace open and then a number and then um a string so like so it'd be like one comma and then heart uh want to use double yeah you want to flip those uh flip those around the order of those the key not first usually the key comes first the key is the number it's the index the hearts is the value no no no it's not because we're counting the number of Hearts wait okay I'm just used to in a key value Loop the key is always being numerical but I guess in this oh no yeah that that's kind of the whole point of this yeah yeah that that's kind of why we're doing and I think maybe we're done at this point it just be like this yeah that's how I saw it okay yeah yeah so the idea then is basically and it would be it'd be like this right so the idea is that if it does not if it finds it we're just increasing it and if it does not find it we're going to set it at one for the and keep going yeah that's the big idea there so sorry I stumbled through that I should have finished that before I got on the call tonight but yeah that's the idea so then then and and you wouldn't just do it for these right you would also do it so this is what it'll end up looking like and it'd be something like this where you'll probably most of the time have something like you know like three of these and like one of these and one of these right doesn't mean anything but where it gets really useful is you you'll do the same thing and you'll go back through and you'll have have like this where it's um so on and so forth for every single one and let's call this uh we'll call this Bas instead where the other one would be value then and just to differentiate between the two wait this would be faces okay so wait this is the count of like each that's right yeah so the idea then cards well actually we should have four of each card if it's a full deck and then we'd have five total total cards in our hand so the numbers in this dictionary should add up to five yeah something like this right and there'd be 13 cards not eight but one four yeah and you could even use this this en num up here at this point right nothing keeping you from doing this right yeah so basically we're going to collect all this information into maps and then we're going to use this information to we're going to Loop through it in various ways to deter like if we have a flush or whatever or all the other yeah so like here we'd have three of a kind right this is like this is like the setup that helps us do all of the tests yep yep like yeah so that'd be pretty useful I'd think so yeah so like here you'd have three of a kind and then if we had something like this um we'd check you know we'd say hey is there a three in there much like what we did down here earlier before I just blew it away but you could do something like this and say is there a three and a two is that be a full house okay so yeah that makes makes uh writing that up a lot easier with that map stuff so I'm glad you you stumbled on that map stuff last time and sent me down that path um the way I wrote that back when I wrote this when I was I mentioned that there's a map object or map thing in the standard library but it was somebody else who suggested using a python dictionary or something because I guess you have a python class that's doing the same so it's not really my original idea fair enough um regardless it's a good idea and it's much better than what I did in my old source code um that was not fun at all where you had to Loop through things multiple times to do these counts and things like that this is much more elegant more efficient probably Lo yeah you only end up with you know what you need there because frankly um if you go through these like there's a very real chance like there is no six well anything with zero there wouldn't be in here right yeah you could do that you could set them all up there's no need to the other thing you need to do um and and this would go back to the Sorting unit is put the cards in order based on their um their their faces right because what you need to do to test for like Straits is see if each one in sequence is only one more than the one before it wait so like if you have like a three a four a five a six and a seven that's that's right yeah yeah but wait it's a hand so like why would the order matter like uh well I guess you might want to sort them to make to test that but like if it were a real G the order wouldn't matter okay so this just helps you yeah because if you like say say we have something like this where we've got like a a three a seven a six let's say a five and a four and a two right these are this is a straight you're absolutely right but if we if we instead have it like this then it's easier yeah I see what you're doing is there a simple way to sort a key value list by value yep yeah you can use the uh the sort function on that I think I even demoed that in the sort unit when we did that I don't remember maybe but let's see here there's there is a way so the idea is that you write a Boolean function to um yeah here you go so I'll just make a new new this isn't even real code but the idea is you make these guys um I don't know why there's a struct here I just grabbed this from but basically you need to uh as long as you got a function that does this yeah um then and you just say hey I'm using e the age here it's a number right I'm using the age here um the other one that's right yeah yep see yep just here and there so that that would do it and then then you then you'd set that up just fine so yeah I think I think that's probably the best way to do that and I guess since uh you might have obviously a lot of zeros because you only have five cards uh you would just I guess use a continue statement or something if you see a zero um or or or or or don't even put the zeros in could I could I get like a sub like list of just the cards that have at least one yeah that's right that'd be the idea I'm trying to think with I mean I could make a new one by looping through it um but that kind of I mean that would work but maybe there's another way I don't know I have to read up on a lot of this um see I I haven't really looked into the map thing in C++ I've only used key value lists and other languages so I'm kind of trying to translate what I've done there yeah me me too because these didn't exist when I did it and yeah so the idea is you'd go Ahad and just Define this and not do anything with it just like this right and then H and then this is in your Loop so just imagine a loop around this bit um going through the hand um you know which is just a vector of cards at that point um and then you just you know pull pull each card out from the hand yeah and grab you know in this case the suit uh um and then but for the other one the value I wouldn't even insert anything into the into the map unless there was that's right yeah something to insert that way okay so that way when I sort it I wouldn't have to worry about any of those zeros right exactly you get it yeah yeah so yeah that that that could work quite nicely I like that a lot okay um yeah I don't really have anything to to add I I haven't even reached this stage in my code I I'm still where I was last week I I'm not stuck I just haven't had the time to work on it no yeah well you did a really good thing by starting early because I'll tell you starting this a couple days before it's due is not going to do anybody any favors no and I don't have the time to I have a lot of other stuff to do so I I have to start it early so yeah but you're doing a great job keep it up okay yep so hopefully that was a little bit helpful sorry I stumbled through the you trying to translate that code real quick I should have did that before I got on here but um I can I can do it in other languages a lot faster C++ is not my best friend okay well with that I think I'll go and stop the recording we're right at an hour um so that worked out kind like I wanted it to um and I'll post another one I'll probably be on Tuesday night next week um this week I just had some uh I had some um an obligation tomorrow night so I couldn't couldn't do it there let's go do that and uh unless you have any other quick questions for the video I'll go ahead and stop sharing I'm good okay great well thanks for coming and um I think anybody that watches this will benefit quite a bit from it yeah so appreciate yeah I want to also thank you for the uh the reference you wrote me I did get hired oh congratulations well deserved I mean it was an easy reference no you're you you're G to be a great asset for for us and then future employers as well thank you I did my I9 earlier today oh yeah that's awesome well yeah and you know next maybe next all you know once you get going uh we'll get together and and I I'll just kind of keep you up to speed with what I'm doing um yeah you need me as a tutor for your next classes or whatever uh that I could help you out probably but yeah I think you'll be a great one yeah you're you're certainly knowledgeable and then but uh but more importantly than that you know if you continue into 25 um I'd love to bring you up to speed on some of the AI stuff uh uh that that that's you know really really where we're going to kick it in high gear I think I don't know much about that but I'll teach I know I'll teach you that's the point I also have to really get better at python because I never really took python seriously as a language so Basics I'll tell you harder probably a great way to um to to learn something a lot lot more thoroughly is to teach it to others I'll tell you that yeah I know all right well it's good talking to you uh I'll work I'll see if I can find time to work on this and uh maybe I'll show you what I have uh next Tuesday or something like that great for or whatever okay all right talk to you later bye