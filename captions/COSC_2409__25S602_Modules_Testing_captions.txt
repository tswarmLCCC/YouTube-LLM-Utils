in continuing our study of modules as part of the uh python modules um uh you know series of videos here um I want to take just a step back and and talk about a bit of functionality that we just alluded to when we're talking about the structure of modules with their names um of course I got many examples over here right of of different python uh uh you know files that we're using uh for instructional purposes here but really there's two that I I I want to focus on so I'm actually going to close this just to just to um you know kind of simplify our our discussion so you might recall that we've got a module here uh called menu. py and we're calling it from this Runner program and often I will call these things Runner programs we could of course have many of these all of them calling menu which is kind of the point of the thing um but when we run this we get access to these these different uh these different methods this is of course one method that's been overridden uh or have has default um default uh arguments that can be used or not used in this case they're being used right we're using them here and of course in this one we're setting up options that are different um and passing those in this is just a list of options um and and choices um and uh so on and so forth um which is great and you can certainly run this this could be a test case or it could be a use case uh but there's another way to do testing um and we talked about this in just a bit you might recall that we started talking about this special variable uh called name and name is basically a a built-in python uh variable it's called a uh a special variable or a global variable a magic variable there's a lot of different names for them but they're built in and anytime you run a Python program it will exist um what its default value is is um it's uh it's going to be the name of the file so in this case it would be uh underscore uncore 1aor runor menu underscore it gets rid of the py but when it this is the program that you're running when you're actually running this um you know like doing something like this if we did like something like this where we did P let's change into Source just to be in the right directory um and if we did did python uh 1A right like so get to it um then uh let's go ahead and print this out because I just want to I just want to demonstrate this um we will see here that that's is not actually I'm going to print this out here which you can do of course there's nothing special about it other than it exists um automatically for us so if we print that um um out let's just go ahead and kill our program here so and I will clear this out and we'll run this again we'll see here oops uh what did I do here think I just typed it wrong there we go that should work much better uh let's just clear this again and we'll see here that it actually um is is pretty main here now I'm going to do this again uh in our module here um let's go and of course the program is working it's doing what we want because we set it up as such um and it's doing a lot of work here but the main main thing I wanted to illustrate there is it's called main but when I call it if I call it um let's go ahead and just do print name here uh and and you can do this um your modules can certainly um have more than just the uh their the functions in them uh you can set use this code to initialize modules and set up code to to run things it will only run once that's the main thing to know about that uh but you can do things like this so when I call when I when I would do this from import from from menu import it will actually run that code as well so let's clear that out and we'll see here um oops uh let's just get out of this there we go clear the screen and I'm going to get rid of this one because we don't want it right now uh we already demonstrated that this will come in as main but when I call this um uh um when I call this we will see that it's coming in and we're getting this menu this name menu right um and that's of course because we printed it out here uh just to just to you know kind of drive that home like uh let's see let's do where is this being printed like so we can do this right uh and then well I don't think I broke any oh the the colon got deleted there there we go um and uh let's just kill this for a sec clear it again and run it again run our python there we go and we'll see that indeed this is being called menu so you'll notice that when we ran it from here it was called main right it wasn't called the file name that we're using here 1A blah blah blah let me close this I don't know what that is um something with my local environment here um uh you know so this main is basically when it's called by the user let's go and exit our little menus here just to get out of these sorry big demo there um uh but when we do that in such a way uh we we can basically say when we when you're running this this particular file um you you can you can Branch that's what this trick does well that gives us a really cool use case that we can do to basically test file uh test our modules so um what we can do is in our module now I'm in my module when I want to run this directly I can write a test case in here so this will not get run you remember this never got run we never saw anything like a a header or a main program getting run in here but when I run this directly we're going to see completely different Behavior um when I run menu.py um we're going to see uh that it's it's again this is I'm going to go and comment this out because this still gets fired off um but now it's it's actually running it's running this one where it's printing a header uh for us right it's running this essentially this code for us um and then it's it's running the main programming here which is doing a little bit more testing which is essentially loading up some options for us and looping while it's true and giving giving us a use case of each one and and we can do this with all of our functions in here we can test each of our functions right here so we we can develop and test our functionality of our module right in its in the same file writing test cases in its main function and then calling main of course you don't even have to call Main here you could write your code right here um but it's it's good practice to get in the habit of this um to say okay this is actually for execution when you see a main program in a function uh or in a in a file it's usually meant for uh direct execution and you should be kicking things off from there um it's in some in some mode of operation um of course uh you know we never see all of this we never see you know let's goe and just just to drive all of this home one more time right so I'll save this let's just get out of all of this um like it and clear this out and we'll do this one more time we're going to see that we're we're we're actually in here we're testing the M the module and it's going into essentially a a testing uh cycle a special program just a test we're doing all kinds of things fun uh you know is funest testing gets but then when we go over here and we're actually we're still using you know we're still using this module this code is going to be doing um you know using things from that this this file we'll see here that when we run it from here um if I can type we can see when we run it from here none of that happens it goes right into an execution of course it looks similar right because our we we have similar things going on here um where we're we're doing some display menu stuff with some default cases um but we never see this string so we know we're we're actually um uh driving it from this menu and you know uh um and and that that's that's of course coming from this this main program in our in our runner um and in that way we can separate our testing and our our development of functionality from when we use it um uh that's a key point and when you see this going on um in a module in particular um that's that's the intent there and I I I'd encourage you basically from the time you learned this lesson to always use this functionality and main functions in all of your uh in all of your um your your modules and your your main code because what happens is you can move back and forth and create several different execution paths and test different things and reuse code a lot easier and that way if you start using that design pattern excuse me um got the hiccups there um so I hope that makes sense um great unit on testing um and uh we'll expand on unit testing as we go through this unit and then some subsequent units um on object oriented programming and things like that thanks