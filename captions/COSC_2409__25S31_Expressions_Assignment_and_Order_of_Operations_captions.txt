we've been studying let me grab that my here we've been studying uh Expressions a little bit and we we'll um we're doing that to lead into um a deeper examination of control statements you know if statements for statements well statements things like that um but uh one thing that I glossed over in the in the general Expressions video were assignment operations um so I've brought up this uh uh page which I've also linked in the module um from W3 schools that uh really gives a lot of uh the different kinds of operations in Python and um a lot of what I showed in this code in the previous video is from that um so this will be available to you as well but um what I'd encourage you to do is uh if some of these are not um if you're not you know really aware of these or haven't used them before go to this website it's just W3 schools and it's part of their python operations they've got all kinds of operations and you can run right in the browser if you click run here you can actually run this thing and you'll it'll spin up a a little VM and you could do things like you know like this and uh and get different uh different get uh get get different answers I'm sorry it'll evaluate the statements and that's really what we're studying here is evaluation of Expressions that's what we call it when these things turn from from multiple values uh into fewer values usually just the one right um so a lot of these will look look very uh SI familiar um just because they're intuitive right and that's what they should be in a in a programming language they should be as intuitive as they can be but while still getting the job done we always start off with math um and uh and you know we've talked about addition and subtraction multiplication division of course um but you know division in particular um depending on the type uh you should enter you know floating Point values and integers and see the difference there particularly indiv Division and multiplication um basically any operation any math operation with a few exceptions but I'd say it's almost any let's call it almost any uh if you have a uh if you have a floating Point uh um number anywhere in there it's going to end up with a floating Point number um the only time you'll get two an integer back out is if you use two integers um I really wanted to talk about this family today though and that's what this video will be about is python assignment operators we're we're all intimately familiar with equal right this is how we assign variables much like x equal 5 here we've done this a whole bunch um but the one thing I I really wanted to to iterate on is you might see plus minus you know basically any of these math operators in the assignment operator itself and then there's even a few more right um what these are are uh basically they combine a math operator and also assign the value so um let's start with the the the the basic math example x +al 3 is equivalent to First adding three to X and then assigning it back to three right so that's what this this compound operator does is it will first perform the operation um with the um arithmetic or or just mathematical operation and then it assigns it back to the variable that's on the left hand side you cannot do this in the flip you can't flip this um you could not put 3 plus equal to X now you could do something with X Plus equal to Y but know that the one that's going to get assigned uh back to it is the the operation or the the variable on the left so if we had y equal 3 here and we did X Plus equal y um X would be the one incremented by 3 not y um uh X or Y would remain three in that case um so and I really would encourage you to play with a lot of these um some of these I'm not even exactly uh um sure what they do I've not seen this one um we should play with some of these let's do that uh and I think I've got them in our code here um and again I apologize when I do that when I stutter just a bit like that what what what actually I think we have them here um what those what those are are when when I do that is it's just the difference in different languages um I get things kind of tripped up in my own brain it doesn't look like we'll do it let's see I'll come back to that if I need to in another video uh what those are but let Let's uh let's play with the browser here just a little bit um and let's just demonstrate the minus one for example so here we have uh five um uh x equal to 5 and then uh x uh minus equal 3 right and of course that's just saying five it's equ ENT to saying uh x = X - 3 that that's doing the same exact thing these two statements right here um so I'm going to just comment this out I think I can do that in here and you we'll see that that evaluates to two as soon as this gets going right um similarly if I do plus equal to three right so here we have an assignment Operator just a simple one uh where we recreate this at five and we're we're basically saying take three and add it to whatever is in X and then assign it back to X and of course it'll be eight right it's shorthand is what it is um it's nice for looping and things like that um but you'll see it quite a bit so uh you know we have plus minus multiplication um division the modulus operator um I'm going to redefine that let's go ahead and play with that one a quick real quick because it's super handy for a few things um modulus is REM the remainder operator so what's happening here um let's let's go ahead and start with a simple statement let's just do uh let's just do five modulus 3 um equals xal uh 5 modulus 3 like so and what's what this is doing is it's basically saying take this number divide it by this and return the remainder as opposed to the division the quotient right um so if we do that we'll we'll see that we're getting two back out uh which is you know of course the the quotient would be one and then we have a remainder of two that's what this percent sign does it's called modulus the modulus operator um and then of course this this particular um exercise is saying modulus equal to 3 so it's basically assigning um assigning X the uh the output of that operation um but modulus might not have been one that you'd seen before uh floor division is this one the the double division this is basically saying take a number divide it and go down so if we did the same operation um with uh with x uh equaling 5 and we did um you know uh basically X floor division three and then reassign it it's going to be one right because it doesn't quite get to two um so it'd be you know 1. 666 and it's going to round that down so you can read that as round it down uh this is the power operator so this is you know raised to the power of so if x is two and we're raised raising it to the third power this would be eight right um let's go and take a quick look at that one real quick I'm sorry not eight uh well I guess it's five I I used to so we'd go X you know 525 125 that's how to read that all all very simple math I want to see I think these are bitwise operators is what they are I want to see if it explains it because I might have to look these up I'm not entirely sure what's going on with that um I I'll have to come back to those I haven't seen those or used them in practice I'm pretty sure these are bitwise operators and what I mean by bitwise operators is they're basically shifting back and forth on a binary representation of the number um and those are super useful for networking applications anything with binary operations and things like that um but they're not very useful uh you don't see them a lot in practice um and then this operator I can't remember exactly what it is either I'll have to come back to that too but basically the the the gist of this video and the main reason I wanted to record this video is when you see an operation with an equal sign um it's it's this operation is an assignment operator operation still just like the equal sign itself is but it's performing an oper another mathematical operation before that so I'm going to go down to the bitwise operations now um which I wonder if no they're not related to the comparison operations it's basically these bitwise guys um which again I don't use these a lot so um but here are some definitions of those things um and I really wanted to and and I've I've started to put these into into the file itself but um the operations themselves um particularly the logic operators operations um I would really encourage you to go to this um this website um and I'll go through them here but go back over these and and try them the and or a not um basically uh these are the truth tables I was talking about in the previous video um so remember and only returns true if both statements are true so if let's say x is two here this would be true and this would be true so the whole thing evaluates to true but if x was seven here this would be true but this would not be true so the whole thing would return to false conversely or returns true if one of them is true um so if x is for example four here if x is four um this would be true but this would be false right because it's not it's not uh it's not less than or equal it's less than so X less than four if x is four is false but this would still be true and let's go and demo that one that that's a good one to start with so let's uh of course um you know both of these will be true oh well this is a different one right um so X is equal to 5 here right um so this is true but this is false right um so the whole thing evaluates to True which we we see here but if we did something like this where we said let's see X is greater than equal to so it's basically between this is a between uh well no it's actually it can't um I think this is basically any number yeah this would always be true because everything's either greater than three or less than four there's no number that's both greater than three and less than four so this is kind of a bad uh bad statement um unless you needed it for some very weird reason this would always be true right um and that's what you need to do is evaluate these these in conjunction so um like there's no number like we put 5 million in here and because X is greater than three um it's going to be true and you need to you need to be able to go back and break these down into their components to say oh I meant and here probably and if this was an and it would be this is actually a very useful statement right because this means between three and four not inclusive so like 3.5 would would pass this right but three and four would not right so we see that's true but we could do something like this and we'll see that that's false and that's true I mean sorry it's false it's false because this is false right um so get to know those th those are important ones um with the rest of the time I'm just going to go through and Define these guys um but I really encourage you to go through and see what's available in all of these um and know that they're available of course this one's a little different I really want to know what this one does let's see if we can figure that out uh the the DOT I've seen it before and I can't quite remember what it is off the top of my head um we talked about the membership stuff though um and these are great ones to test with as well and we'll come back to those uh when we go into sets um but so we could do uh this this in operator and not in um this is true because the word pineapple is not in this list right but if I change this to Apple this would be uh um um not in so this is the negation this would be FAL right yep because apple is in there if I said is Apple in there then you'll want then that would be true I'm going to use this example uh or not this example we're going to build on this in our first project if I stick to the same first project that I want to use uh for this kind of different flavor of python class we're going to do a data science uh uh um I'm trying to get rid of the ads here not doing a very good job um where you'll see in and not in in some uh in some some of the um lists um so these are handy but I don't remember I think they use binary examples so yeah and that's what they do here um so what What's Happening Here is it's it's not three the decimal that's being worked on it's three like this so it's inverting these things and that's why um so basically all these turn to ones and all these turns to zeros um I'm not going to go into a whole lecture on binary but know that they exist know that basically it translates three to4 like so um and you can see that inversion and that's all of these that's what all of these are doing is they do the the bit flipping here so if you're coming from our I pathway in particular there's a lot you can go do uh with these these bitwise operators excuse me um but again not something I use a lot uh but uh good to know it's there right um you get orders of operations in here of course so things in parentheses uh basic in general I don't want to say 100% but in general these follow the same um operation orders of operations that you'll see with um in mathematics so things in parentheses for example um are evaluated first exponents are evaluated before addition things like that same with multiplication right um and you you'll see that uh again please work through these examples they're really good play with different numbers there and see how they evaluate these can be really useful to play through uh and I might even I might even write a few quiz questions about this so um if I do feel free to use this website you can plug them in you I don't I don't mind you doing that you can do it right in python as well I encourage you to you know just bring up let let's go and grab like this one let's say you know I might give you a multiple I probably will actually I kind of like this idea the more I'm saying it here um I'll probably do something like um you know evaluate the statement and what's the answer right um oops what have oh I'm not in Python hold on so just a refresher um let's let's go ahead and just do python like so um you can just do this math right there right so if I did some so basically we're saying this is 100 plus 15 right this evaluates before 100 um but if I did something like this it change you know it will first raise 100 to the fifth power and then multiply it times three uh is well that why didn't that work I I I'll have to look at the order of operations again uh oh I'm sorry I used the wrong operation I used a bit shift operator I meant this one right yep 100 to the fifth power then times three right it does it will do um it will do exponents before before it'll do um multiplication again sorry for the multi where my other window go that's the guy I'm looking for let's see um yep and so all of these uh this will tell you the order that they go so again we start with parentheses and then exponents um and then it will do bitwise operations next which is one you probably haven't seen in math uh then then we get into pemos right multiplication division division then modulus um now the main thing to know about this is it we'll do floor division um and modulus before it'll do addition and subtraction some more bitwise stuff at the end and then The Logical stuff this is very key though so uh going back to some of our examples here um actually let's let's see if we get a good example here it will do the assignment operation be first before the KN so basically I'm sorry the the it it's basically going to evaluate uh is five equivalent to five this is not the assignment operator sorry kind of getting in my lecture head here where um my brain gets uh or my mouth gets moving faster than my brain um it first evaluates the assignment or again the not deign the um equivalence operation basically it's saying is five equal to five um and it's returning true and then it's flipping it so it just know that it's doing this first and then this um and so the The Logical operations are almost always dead last unless there's parentheses involved so you can you can mess that up right by putting parentheses in the wrong place so be very careful um the order that you put these things in and I think that's all of the ones I wanted to go through today um so I strongly encourage you to do to spend some time with this code uh here um or them yourself really there's nothing to these um just go through the different operations and get used to plugging values in um into these equations and and seeing how they they operate this is a source of what's called a logical bug um where it it um a bug you know of course could be a syntax there we've seen plenty of those as beginning programmers and now intermediate programmers right uh but you can have a program compile just fine but not do what you in because you might mess these things up so there there's a lot there um and I hope that this kind of uh reinforces the need to pay attention to these things um I probably should have done this in two videos sorry about the length um anyway I I think that's enough about Expressions the main thing I really wanted to drive home was this use of assignment operations um so when I talk about Expressions while these are expressions wherever they are these are expressions indeed um they do evaluate to things as you you would see um they're also doing a little bit more they're overloading things so they're a little different um don't use these in if and while statements um you'll be wanting to use your uh comparison operations which are down here and The Logical operations which are right below that those are the big two ones and then of course the identity operations could be used as well anything that basically eventually returns true what we're looking for with four statements and while statements uh for statements and if statements are something that evaluates true or false Boolean statements that's what we're after um for those so that'll be the next unit and I'll get right into those presently