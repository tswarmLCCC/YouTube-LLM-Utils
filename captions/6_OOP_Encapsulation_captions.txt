okay picking right back up from our intro to object Jo programing excuse me as I jump around like an idiot here um one of the biggest things um that were I keep saying biggest things best things most um a a major feature of C++ is this idea of encapsulation and what do we mean by that um what we're doing when we use this word encapsulation is we're hiding details that do the work but don't matter outside that context um earlier I used this example of a video game character but let's say I don't know we wanted to make a function or a class that basically was an accountant and it could it had the ability to sum sum up a bunch of numbers um you know produce the the total well in that um you might have an array or a vector of numbers um but in there you might have an a counter of those things and perhaps a a function that Loops through all of those things and and and counts how many are in there um and then also provides the sum uh and things like that um well we don't necessarily need to worry about all that after we implement the program so certainly we need that in in our program those are all parts of what you'd consider when you're building you know at least a for Loop those would be things we'd want to consider but you you know it might be just be you know we might build a you know a counter type or counter class and just say counter my counter get get some right um or lo you know lad data and get some those might be our two two things the only two things that you use outside of that where low data would basically take a bunch of a vector and load it into something that held the data and then the sum button or you know the get sum function might do something like Loop through that and give us a the only thing out those might be the only two things you use outside of of you know implementing the thing which is this idea of encapsulation and abstraction it turns into a very simple interface um after it's built U we're just calling it uh we're loading it and then calling it right pretty simple um so the idea and we we talked about this a little bit with the private uh you know uh uh uh the private part of our class definition is that um we we' bury all the nitty-gritty details of of you know how that's stored and um how it how you Loop over that in the in the private part of our of our class um and then um when you build an object of that you would never see that um so uh the idea though and how these things work together is you build things uh uh called uh mutators and accessors mutators well accessors basically are the way you get data in and out um so you'll see these called Getters and Setters very often um where you you'll you'll mod you you'll modify uh data inside of your uh inside your class so um in our example we might load um a series of data uh from an array and that we might you know create a set method set set data or set list or something to that end um that would that that'd be a public function that'd be a public uh member in this case or method um and that but it would access the private side so that that's the big key here is basically you've got three levels here let me use my hands here um we've got the outside world where we're interacting from like a main program or even another class and then we've got the public world where we might have Getters and Setters and Maine can't go to the private side or your outside world can't go to the private side but it can go to the public side and then your public side in hand goes and grabs things from the private side and and does the manipulation there and then the private side can have its own functions too um that that that are that are hidden from the user um that the public side can also call or even they can call within each other so within a class you can only use I'm sorry private private members uh members being data or members being variables private variables um private private variables and me or that are called members or functions can only be called from within the class public uh public uh methods can be called outside the class and and you should set your class up to that end um so you should never access your your variables within your class directly those should almost always be private almost always um you know the only times I would say that that's not true is if you're building something like a constant like Pi like you know math the ma mathematical concept of Pi 3.14 you know um where you might want to access that that outside where it's a constant uh but uh otherwise you'll almost always want to do a get variable type of function um and we'll see that you you'll certain certainly uh should have seen that in your text already uh but uh I really want to emphasize why we do that and and to do it until you get used to it um so U the other kind uh of function uh that's usually a public function is an accessor function that's you know basically I'm sorry mutator that that basically says do do something you know so it might be add all the variables or deal a CL class of you know hand of cards if you took my python 2409 class last year um uh you know those might be things that we uh you know we say go do something those would be public methods um that would manipulate the stuff in the private section so um that's kind of how you lay those things out in this idea of encapsulation and again we do that just to reduce complexity down the road this the idea is we we take this uh we build basically an interface with our with our object that says only expose the the things that you absolutely need to get things in and out of this thing and then in the private section we do all the work um and and let let let let let that lie there and leave stay there um and then you know and then when you use it down the road um you don't have to get all that stuff you don't have to worry about you know 43 different variables being exposed you know it's just just a couple methods usually things like that it's kind of the big idea there see where we go next oh some finally some code thank goodness so um in this first example um here we have in a private uh uh I'm sorry we have a a class of a restaurant this is from your book by the way you can follow along certainly if this is not readable please do um let me get my pointer back there there we go um we've got a class of a restaurant and we we have um some function uh some function uh signatures here uh where we've got set name get rate get rating set name set rating and print well set name and set rating are accessor methods those are how we get things I'm sorry they're mutators those are um those those are changing what's going on here um and we'll see more about this in a bit when we talk about Constructors there's there's a slightly different way to do this but that's okay for what we're talking about right now but the the the main thing I want to highlight here is that we've got this name String and this rating integer in the private section um that means that when we use this we can't get those directly um so when we create a uh when we create a a uh a object of type restaurant because that's our class our class is called restaurant when we create a class an object of class restaurant called favorite lunch place we don't just say dot rating equals 0.5 um the dot by the way is how you get at things inside there but this would not work this would blow up on us intentionally that's what we want we don't want people to be able to get at the rating directly what we do want is we want people to have to set the rating and we see that right here and and over here um so you'd use set rating like for example here again rating well let's use name here let's just oops sorry um let's use name so we've got this set name in our in our um in our in our our uh our our our our class signature and we've got basically the the function um you know uh signatures here that they're they blueprints um we well we've got a name here but we don't access that directly um instead we we set name and then we pass the name into this function that is what's used so in this in this public function again this is a public function set name is a public function we access the private variable here and say set the name to the restaurant name that I'm giving you the idea here is that we can Pro protect that inner variable um if it needs other work like this is a trivial example that obviously it's just assigning it and this seems like a lot of work just to set name when we could obviously just do it and say you know let's just make name uh public and you could do that you could certainly do that I recommend against it though I recommend always using Setters and Getters because it allows you in the future to um to change variables or change these definitions but still use the same signature Let's Pretend This is an old program and you've this codee's been in in place for 25 years or five years maybe not 25 years that's ancient by any and almost as old as me or as long as I've been programming I'm sorry way I'm way older than that um the uh the idea though is that there might be hundreds of other programs that use set name and get rating and things like that but um if we ever need to change it if we ever needed to say um get ready needs to instead of writing a file you know uh it might need to go check to see if there's something in a database or make sure rating is numeric or make sure that the rating hasn't been you know used by this user there's a lot of logic we could put in this function right here down the road um and it would not break the fact that a bunch of other programs that use this class call get rating as opposed to that if we just let people manipulate rating directly and say you know um um in back up going over here um where we go something like set rating or or sorry dot rating equals 5 well let's say that this turned into um alpha numeric right where we'd want to um you know allow for A's or something to that end well rating can't take that right so we might want to implement that differently down the road and that breaks that so by by giving it giving us this layer of abstraction where we use this method here to do the to to basically say this is how you get data in and out of this class with these Setters and Getters it gives is this layer of of place where we can add other logic if we need to down the road um uh and uh and um and it provides just a ton of other upside um you know like I I mentioned earlier it also hides all the nitty-gritty details um you know let's pretend there's thousands of variables in here not just these two um you know if if everything was public well guess what everybody could see all of those things that that that would get to be a bit of a headache down the road so um anyway enough about that that's kind of the idea of encapsulation and private and public methods um and then in the next uh bit we're going to get into what are called Constructors um so I'm going to stop here and uh and then we'll come back and hopefully get through all of that in one short video