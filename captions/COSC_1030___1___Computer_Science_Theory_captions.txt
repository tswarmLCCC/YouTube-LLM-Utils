hello in this video we're going to kind of kick off um computer science uh 1 COC 1030 with some uh general concepts about Computing uh programming in general um and then introduce um some ideas around the programming language C++ uh that that uh will help get us started uh uh and get going with some of the uh the the you know program constructs that we'll we'll get down the road um so uh I just put together a little slide deck uh this isn't supposed to be too in-depth um but uh much like in our other programming classes we're going to kind of go over um a set of U of tools programming tools over um a series of lectures and exercises and homework and things like that that'll help us build programs and and build projects um and uh but each one by themselves uh they they've got they're very versatile and useful things but sometimes it's hard to keep track of why we're doing these things um or or how they go together and hopefully we can start to talk about that but before we do that I want to just talk a little bit about um programming in general computing in general and how these things all come together um there's a lot of problems in in the world that involve information uh just you know data in uh knowledge things like that um uh and um a heck of a lot of them have to do with math it turns out um a long time ago uh you know uh it people figured out that not only can we use electricity to power things but we can use it to encode information uh basically by turning electricity on and off we can start to say okay if it's on it's a one or it something's present and if it's off it's a zero and something's not present um but you can start to build those up uh by switching them on and off in Rapid success and you can start to build up multiple numbers in binary um which we've covered in other other lectures and videos um or you can store even instructions um by basically saying a specially an encoded block of ones and zeros says for example add or subtract or even put these two strings together or go get this thing from another another place in the computer and those are called instructions and all of these things kind of come together and give us this idea of a computer program where we can take instructions in in some sequence or in some blocks of code and use them in useful ways right we can for example grab two numbers and put them into memory and then use an instruction to say grab whatever is in memory location one and memory location two and store it in memory location 3 we can do things like that and then you can start to build up more and more and more of that um we cover that in our intro to programming classes um a little bit but we'll we'll definitely jump into that a lot deeper here uh in in computer science one um so the idea of that is that we start to take those signals and we build Special circuits um into what are called uh chips computer chips that are very good at doing this thing quite quite quickly and we've got a couple pictures of memory in this case computer chips um on the on the right there um but we can build what's called a processor and a processor is nothing more than a a circuit or a series of of of electronic paths that can Branch depending on what's needed at the time they're very good at this they do it quite quickly um and we can in execute instructions very very quickly and then we have another kind of of computer chip called memory um and there's really two kinds that we use uh uh well there's more than two kinds but there's there's really two kinds that are really useful uh for uh for uh to understand beginning program the first is um is what's more traditionally called memory and this is temporary uh storage where we have the capability of storing numbers but they they go away when the computer turns off or the program ends for example um and that's what we see on the right is some older memory um and you might hear uh you know say people say my computer has 16 gig gigs of ram ram is a random access memor is what that stands for and memory is a great play a great tool because we can store a lot of information and get at it quite quickly um another kind of memory for lack of a better term is is more typically called storage um and that's what we we call a hard disk or uh sometimes you know uh solid state drives things like that where things are written more permanently so when the computer turns off or we're not using the program we can store it and come back to it you can think of it like when you save a Word document that goes into into onto a dis um and that's another kind of memory but both uh play for they play together so the processor can basically say hey disk go give me some information and put it into memory here and I'm going to do something with it and then the processor can do things with it like run a program run a game things like that um and then what we can do with that as programmers is we can take that information and uh execute sequences in a a carefully crafted way and we're going to get what's called a pro um an application or sometimes an app um and uh and th those are basically what we call routines or or a series of steps that help us do something useful with this representation of ones and zeros in in electronic memory right um and then uh the last last concept that I I'd like to highlight from the reading here is this idea of compilers um programs or apps are are kind of hard to write they ends up being just ones Zer just like the data ends up being represented and that's kind of hard to write um you can do it um but uh it turns out that uh the the uh that folks got tired of doing that a long time ago and they wrote what are called programming languages um that basically let us describe the problem in a higher level concept language it's still not quite human readable or well it kind of is but it's much easier to use and there's some features of it that are kind of common to programming that we built in and and represent in certain ways that we then uh compile and when we say compile we're taking a a program and turning it into this machine code that they can execute and run things separately so some some Concepts there um and we we do that in C++ so if you've done if you programmed like in Python before or JavaScript that's kind of done for you right when it runs but in python or in C++ you need to do that at least uh at least uh behind the scenes your your your your program will do that for you and we'll cover that when we get to some of the examples or if I have time at the end of this video maybe uh maybe during this video um this is just a little representation of instructions and memory so um one thing uh that let me go ahead and bring up my overlay real quick hopefully this just works um oh sometimes gives me fits um so here let's see here we've got um basically sorry I don't have my thing we've got um a place St stored in memory this grid represents locations in memory where we're storing representations of ones and zeros and in this case that first location has enough uh ones and zeros to represent a t and then the next one holds an r and an E and A V so you can represent that let's see if I oh sorry I can't see what I'm doing here um I can represent that by giving it a name and that name in this case is first name and that first name is basically saying give me the stuff that's stored at that location right that that that's how that works that's called a variable um in in computer programming language and uh but all that's doing is representing something in memory and uh in C++ it turns out we have to tell it the type of stuff we're going to store there um as opposed to what we do in Python where we can just kind of say Hey you know put whatever I want in here and that's because we have a little bit better access of the memory and how we use it in C+ plus than we do in python or other languages um so we can get get at this thing just like we always have by calling first name here but it can only store so much uh uh memory and we tell it um how up up front how much we want now it turns out string is kind of a special case because it will um allow us to put quite a bit in there but for example numbers um they have to be um of a certain type uh we can't put letters where numbers are supposed to be for example that's the the difference between like an INT and a string um and that's one of the biggest differences we'll also see double precision and floating types and things like that where different kinds of numbers are stored and basically it's grabbing a block here hope uh let's see a block let's say it might have this much memory right here sorry it's hard to hard to see without my cursor here it might have this kind of block allocated but if we get over to here um then then it gives us an error we can't use it so something to be aware of there and then finally at the bottom here we have some instructions um that uh tell us what we can do so for example uh X or pound num here might have a number let's see if I can get up here so it might have like you know 17 here and it might have 21 here um what it could what what like we might do is have an instruction called add X where it go goes and grabs a number like 21 there and it grabs that location and it says put that number in y so we might have ADD X where it grabs 7 here and then we give it four and then it stores the number in a new location at 71 that that's basically what's going on behind the the scenes there I'm going to try to get out of my my stinking uh there we go my overlay here uh exit without saving that yeah so um the book does a pretty good job of illustrating this but I just wanted to call that out and make sure that you pay attention to this so um in programming we often use a design like this where we take some some sort of input or incoming information and we produce output just like add and subtract that you just saw we're doing some operation and it's often you know a process but the idea is that we're we're taking something and we're we're getting we're we're producing something else uh based on some routine and that's called an algorithm uh that that that black box it's basically a series of steps that happen in some sequence that that do some useful things and we study all kinds of different algorithms and often it's up to programmers to come up with these things themselves uh but the basic uh idea is that we have an input and an output now sometimes the output is a use usable effect we don't actually store the information sometimes the output is like putting things to a screen or things like that and sometimes the input is where did they click on a mouse but the idea is usually sound that we have an input some process and an output um and we'll go over a few examples of that in code in uh in a bit with some of our examples here um one thing to be uh just aware of uh is programming like any Tool uh takes time to learn and you're going to make mistakes um I do it all the time uh there's a pretty cool video I won't have time to show it unfortunately pretty cool video in your in your zybooks uh for this unit of all of the fireworks at San Diego San Diego fireworks show going off all at once obviously they've messed up very spectacularly in this case uh but uh there's there's certainly some frustration involved in things like that the point is it's okay to struggle go back and go step by step and you're going to develop critical thinking skills in this class to help you go through and and really understand what's going on uh within each space and then um it might be a bit of a bit of a it might be a bit mystical how to get from where you are to what you want and that's what this class is about we're going to study structures and we're going to study algorithms a little bit um and certainly available to help with that and we'll do projects that you'll start to build these things up you're not expected to just know how to do some super great sort or something like that um those are things that uh are not natural to the human brain but as you get better and better at it it really becomes a rewarding JY um and then uh the other thing we'll study is documentation and commenting um so uh we've done a little with flowcharting before in previous courses but um I I encourage you to uh go out and and look at programming flowcharting there's of other kinds of flowcharting where we start to to diagram these things and often by diagramming them or writing pseudo code or things like that we can start to um understand where our program might break down um the other version of of kind of documentation that we might do um is uh commenting oh where' I put it I sorry I got out of order here there it is uh comments where we put uh special kinds of code or or or uh uh text in our code that helps us understand what's going on or help somebody else going and understand there's two kinds I'll come back to this in a sec uh let's see where were we yep right here this C++ structure so the main things I wanted to do I want to cover the C++ structure here but what I'm going to do instead is I'm going to stop this video here and uh I I'll make another video on on the basic structure C++ I think I want to keep this short and I think that's a bit of a bit of a a walk so um let's see I I'll just talk about these a little bit more where we when we're developing algorithms you can basically say okay what would the variable be here and you can even often write it to the side um and and then as we execute things against that variable say what would it update to here what would it update to here and you'll find that sometimes you just leave off a part where you're trying to Doc update something or or you just miscalculated sometimes and you could perform that calculation on the side and things like that um you you'll do that quite often and I encourage you to isolate your code work on small parts and make sure it works if I can give you no advice other other than that to start out I think it'd be good advice when you're working on a big problem work on very small parts at a time and make sure they're operating as you as you expect and that might be as simple as a calculation when you write a calculation take that number and make sure or take that you know line of lineer two or three lines of code and put some known values in there and say is it doing what I what I think it's doing and then you can take that out and put it back to user input or whatever you want so um I'm going to I'm going to stop this video here and then we're going to come back and uh we'll talk a little bit about uh the ins and outs of a C++ program and probably how to compile it a little bit so there'll probably a part two here or two different videos for this unit