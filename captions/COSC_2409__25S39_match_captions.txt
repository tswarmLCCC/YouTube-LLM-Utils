in an earlier video uh one of the first ones we talked about uh regarding control structures uh when we were specifically speaking about if statements um we started to talk about the differences between if L if else and chaining ifs like this um these are these are uh useful very versatile uh design patterns that we use to basically say is something going on here right and if we need to handle more than one of these we can handle if St uh chap if statements and things like that um there's a construct in Python uh not natively I want to be well it's it's native but it's not always there um I I'll come back to that in a sec there there's a a different construct where we can mimic that functionality using what's called a match statement what a match statement does is it takes a an expression um and in this case it's just a variable but you could you could certainly chain these things on I could you know attack on a string to this and compare it or things like that um to to do it but it it checks basically this and each one of these values in the case statement for equality or I shouldn't say values these can be Expressions as well you can use variables here um or variables or literals here and here you can tack them on this is an expression so you could do something like like this right if I wanted to uh not that uh where uh where you you combine them um into a string sorry I got my syntax wrong between different programming languages again which I tend to do but you can combine them these are expressions is the point the the point of the whole matter um and but what what you can do with this is you can match this I'm sorry these with different different uh versions so this this could look a lot like this where um if uh what would we use here we use um status yeah like that we could do that um and then we could say um you know L if kind of like AI for this kind of thing we we'd say stat yep just like this we we could do that right these are functionally equivalent basically what happens is it writes this kind of state or it interprets it as this kind of statement and the first one that matches um but you can see this gets very repetitive right status status status if we had a 100 of these um you know this is uh a shorter version where you just put the value in and it will basically do whatever is in the control Block in this case it's associating a string with with a variable that we initialize up front and then it will print it out later I'm going to get rid of the if statement here because I'm actually needing to run this as a full program but you can see here that when I run this thing we'll get a bad request because it's just printing the thing out and we can see that we're assigning this integer to the variable status and it's saying m match that variable to values that I will give you um and uh and and execute the block associated with it um and in this case it's finding bad request then it returns um and uh and then and it will print that out um you can give it a default Case by the way so let's say this is 4,000 not 400 um and I run that oops sorry I did the same thing I've been doing clear this I need to run it as a program for the same reasons there we go something's wrong with the Internet so what's happening here is it doesn't find this here or here or here or or in these I'll come back to this in a sec um uh and it hits this underscore this underscore means else it's kind of like the else statement we just talked about with the while Loops it's basically saying if nothing else happens here's the default case so that that's why that uh that ends up saying something's wrong with the Internet the last thing I want to talk about with uh with the match statements is that you can um have more than one so this is an or statement you can say 401 or 403 so if we change this to 401 as you might expect it will say not allowed sorry I need to run this and the same thing's true with 403 so I don't need to you know repeat not allowed for every one I want in there you can combine them as well well um one thing about the match statement though is it was not available before python 310 so if you're using a version uh uh version two of python which you really shouldn't be using at this point in the python life cycle but you might be using like 39 which if you're if you're studying this course as part of my AI program U or RI program um as I've designed it uh we'll be using Python 3 39 a lot because some of the O some of the um bigger Frameworks kind of Ray on 39 you might not be able to use the match statement uh so ju just be aware that it only exists in 310 onward uh just a little bit there so uh that kind of wraps up our traditional control statements um uh we'll we'll make a segue uh from here into functions which is a bigger topic but uh uh hopefully this this bit on control functions in a deep dive into some of the lesser known aspects of them uh has been useful um and and hopefully when you see these things uh out in the wild uh they they don't trip you up too much or at least you remember that the these are part of control statements and they're just different different ways to do similar uh you know things that have been kind of a pain in programmer sites for years so anyway let me know if you have any questions about that as always thank you