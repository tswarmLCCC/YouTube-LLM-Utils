welcome back to our continuing study of the fundamental building blocks of of python um and uh in particular we've been studying input and output um what I'm going to show you today is uh in this video and maybe two videos I'm not sure yet is is kind of like printing um and kind of like file operations that's actually kind of a hybrid of the both um what it's called is it's logging um what logging does is it gives us a method to basically write logs um usually to a file although there's different things you can do with that as well uh where you can print or go to a file um and it will uh basically help you uh create uh ways to trace uh information through your through your program um so if if if you've studied computer science here at l c much you've probably seen a lot where I use print statements or and I encourage you to do the same to do things like this where we're like okay am I even getting into this function right so this is actually what's calling these two things where we're basically building a function and we're we're calling it twice here to see what's going on simple division function and like maybe I'm not even getting in here and I just wanted to see some evidence I was getting in here so I might print this out and then I'm like okay now I need to know what's coming in so I might print out the variables right and then uh I might print a warning that like hey this is a zero you can't divide by zero you know I might do something like this uh and then I'm might actually you don't actually have a real need to print the uh result of the division out like so um and so I might end up with a whole bunch of output uh while I'm developing the program when really all I care about is this last one so then I go through and I might do something like this or I comment these things well let's go just demo this real quick so I I'm like okay I finally got this thing running I've got all these print statements but I don't want all of them um really all I want is that one print statement so I'm going to maybe do something like this where I just go through and comment these out uh so on and so forth and then when I run this we just get our our division right well it turns out there's a really cool way to do that without and then you know say I changed something and I want to uh I I might need to like okay now I got to turn all these back on because I want the these two right now because something broke and I'm not quite sure what was going on uh well it turns out logging can do this for you and the main benefit of logging if nothing else is that it has levels to it um so just as a demo I'm going to set a a level I'll come back to what that is in a sec um but we we if we rewrite our code like this um and we rewrite only do things uh so let's actually just turn this one into a print statement because we actually want this to to print like uh if if we wanted our program to just do this um we we could say okay the the whole thing's function was this or we might not not even do that where we we actually leave it like it was and we could print these right we could do something like this this these are all very common operations for you by now I hope um but the idea though is you might have noticed that a lot of these other messages didn't get output well why was that well it's because we have levels um and it turns out that there's uh uh five levels of of logging debug informational warning error and critical error all right um and we can set our logging level so if it's critical the only time that this will ever get put out is if I if I fire off a critical error so you notice that logging debug would put this out so if I run this and let's say I wanted to go into debug mode if I wanted to go back if I'm back in development mode and I need to know everything about this well by setting this debug mode I'm going to get all of this information back out just by running this one statement or setting the debug level when I run it you see I'm getting a whole bunch of information out including information about the error which is pretty cool right um so like i' I've oh I figured out what what was going on there was a divide by uh zero uh error in there things like that um and uh now I'm I just want to maybe set this back to informational um so I can just change this back to info rerun this rerun this and of course we get much less information which is uh just happening right here where's info right here these two um and it's reducing our output to just the information informational bits um so that's kind of the motivation for the whole thing um the basic logging information is you uh import the logging Library this is a standard library in Python it'll it it'll be in in your distribution of python you don't need to do anything there um and its default is I want to say informational or warning um so if you don't do anything else uh it will be set at that level um uh and then you'll set the the uh you'll set up your loging format now you don't have to do any of this but you you certainly can um where the uh you you set up ahead of time the uh logging level so it's basically logging basic config after you import logging and then um you use the loging uh namespace to say Okay I want the login. debug level and then you can give it a format and all of these are just um different things you could put this is the time the uh the level name and then the message that comes back out so when I when I fire this off excuse me I I actually need to restart um but there's a way around that um be uh because once you set your logging level for the execution flow it doesn't change even if you reran this and changed it it won't change like I was doing up here you actually have to run logging get logger and then set level explicitly so uh this is how you basically change things if you need to uh during execution but most of the time right at the top of your um execution script you would import loging and do something like this where you set the the uh let's go let's go with uh well let's let's stick stick with air warning here and then we can set the format so um I'm going to run this real quick and we can change that later if we want to but I'm just going to do it the warning level so this is going to be the warning level and then it's going to use this format um and then if I run these we'll see that we only get uh the uh what happened here let's go ahead and just do this I must have ran something after the fact so you'll see here that I'm setting the level of warn so we shouldn't see info and debug anymore when I rerun this and sure enough we don't and uh we can see the effective format here where we've got the time it basically logs the time the thing happened down to the millisecond um the level name and any message that we we pass in to the uh overloaded argument here um and just to just kind of put a bow on that we could change this back to uh you know critical if it was if it was time to actually you know run this for a client we don't want all those errors um and the only time we'd log something would be if we wanted to uh really just capture critical like system ending type of messages and then of course if we have user errors or Warnings uh those are things that we know about that we want to keep an eye on informational is a higher level where it's like kind of debugging or more like variable tracing and then debugging is like I got into the file finally or you know what's the value of I in a loop and things like that um and then we can of course just change this to whatever we want so if we wanted to be very verbos we rerun the logger or we just set it up up front up here and we only get uh we get a lot more or we get a lot less uh depending on what we want out of our logging system um and the idea though is you can leave these statements in here so going back to this like I've got a lot of statements in here that are very useful but they don't clutter up my output when I'm at the uh at the uh you know at the um critical level none of this is getting executed because none of these are critical errors um you know uh so that's uh hopefully some motivation for you there to maybe upgrade your your input and output when you're debugging to um to to logs there's another level you can take this to of course which is logging to a file instead of a um so I'm going to restart this again I'm going to just restart my kernel because again you can't set this up ahead of time you can do instead of basic config going to the output you can give an optional file name uh log so here we're going to do uh let's let's leave it a debug here um so we're going to run this real quick and you'll see here that when we go out uh we now have somewhere we're going to have an app. log and um instead of going to our console our information gets put here so we could do something like this uh let's see what's the best way to do that sorry I've got a huge window going on I just realized um we could do something like this perhaps on on a split screen monitor uh let's see let's just make this a little smaller um if we were debugging something we could do something like this where we're running the thing and uh and we're getting uh output uh put right into our um into a file here that we can then examine and do do um all kinds of uh nice debugging things with um let's see so uh yeah it looks like this is a custom log you can do all kinds of things with logs um just some demos you can create handlers where uh things get streamed into these things um where uh they're ongoing they're basically a pending um uh in ongoing formats you can of course set the levels uh you can set different formats uh and strings um you know it's a little beyond the scope to go into all of these look into the loging documentation for that um you can set formats to a console or a file formatter and handle them in different places so you might have something like one logger with critical aers goes to your screen and another with more uh more verbose information goes to a um to a uh you know a file so on and so forth and then of course you can write them right to the the file themselves uh you can also log exceptions um this uh where you get exceptions an exception level of logging where those will go out um as well uh let's see I can't even remember how I handled this one uh looks like it might be in this guy yep uh so instead we capture our log and the division to of zero uh of course gets captured there as opposed to our uh our screen here when we're executing U and that's because we basically captured captured that division here and then it's our job to of course go in and look at the look at the files themselves so um just all kinds of cool ways you can do it you can also write these to databases and and things like that as well um very handy for uh things in a lot of my classes um you might set informational or debug information um about your uh you know some of your simulation stuff in your trials or if you want a write you know a log about for example you know the events uh in in a series of days you could write each a summary of each day out to a log quite easily and then you could turn it off when it's time to execute it so that might be an informational thing and you might just turn it down to Deb or to to um to uh um uh de or uh uh critical air when it's time to run it let's see how much time do I have it's a little long now I might I might Supply some code with this in this notebook to illustrate that so look for that um after the video is done I'm not going to lecture it because I haven't written it and the video is already kind of longer than I want it to be but I hope you see the motivation for logging though right essentially uh going all the way back where we go from something like this where we have some kind of ugly format where we've got a whole bunch of these things coming out where and we can go uh and we we'd have to you know delete these things or comment them out when and turn uncomment them back out when we want to use them to just a simple statement like this where we can you know just kind of flip before flip back and forth between our different levels of debugging um and say okay now now I need to see a lot more about what's going on and get just a a heck of a lot of information about our code when I want it but then when I don't want it I can turn it right back off with a simple um simple uh uh level change here um in our in our code and get that running so uh I I hope that was enlightening for you and and kind of a oh wow that's a really good idea I'll tell you what use logging if if I can give you some advice use it uh put statements in everywhere that you think you might want to examine what's going on especially if you don't understand what's going on because then you can get some visibility in what's going on you know print out every variable print out every iteration of a loop and then set different levels of your of your logging to to handle different levels appropriately um I I think you you'll do quite well if you follow that advice so anyway uh thanks for sticking with me on that auxiliary unit there one I've been wanting to do for a while let me know if you have any questions