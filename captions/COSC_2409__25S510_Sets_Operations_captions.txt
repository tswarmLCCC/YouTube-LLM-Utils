we are finishing up our large large unit on data structures in Python uh talking about one of the Lesser known um but kind of useful um built-in data structures called sets and then we're going to talk just a little bit about looping over all of these data structures as we wrap up this lecture series um so sets uh are they kind of look like dictionaries but they're not set in key value pairs you might notice the curly bracket um uh here but it will not behave as a uh a a dictionary without that key value pair um thing but the one nice thing about sets is you can do what are called set operations or relational Logic on them um but starting out you can create a set with um basically single value uh um sequences in a in in a curly bracket like so um and when you see a curly bracket without a key value pair that's a good indicator that it is a set you can also use the set keyword and we'll see that in just a sec but um one of the things that are happen very often in any of these uh iter iterables and sequence um objects is that we can test whether things are in or out of them of course we have orange that is in here um if we say purple in there no purple is not in there let's go ahead and do purple um that is not in there uh so we can quickly see if something's in there or not uh depending on what we need we could write if statements or for statements uh uh to that end as well because that's a Boolean object that comes out of it you can also use the set keyword here um and in this case it will actually break out letters into a set so we have two sets a and b um and uh we use the keyword con uh I'm sorry the um Constructor of the set object called set and that's how Constructors work they're named after themselves um to First create these things and then we can get into the Rel relational algebra so sets um are ordered by default and uh and they only contain one um one object of each type so in this case we've got a set of letters you'll notice that a uh is in a lot of these many times but if I actually show the the set it removes all the extra as's all the extra B's so on and so forth in Aber abber cadabra here um so a set will give you the unique items uh in in it that's how that's one thing that they are different about than um other structures although you might recall dictionaries and that's why they share that um that uh curly brace they do not allow duplicates either right these are basically unnamed uh dictionaries they don't have a key to them they only have the values so they just make sure that the values um are are unique there the cool thing about sets and I think you can do these operations on some other types as well I haven't tested it is you can do operations uh so this is a difference operation where we can say so recall we've got Abracadabra and Alakazam it's going to basically give us the letters that are in uh the first set but not the second so in this case BD and R Alakazam does not have BD or r in it but AB could ever does um we could see that are letters that are in a or b or both so basically we get all of them this is the combination of all of those letters that's what or does this is the or operator for by the way this is the um difference operator um and here we have the and operator these are uh just simple Boolean logic is what they are um that are in both so this is where the only a and C are in both Abracadabra and Alakazam so we can use the uh this and operator um here to do that and you can uh you know uh certainly uh combine these things as well uh where you do multiple chains and then we of course get the last one where they're in A and B but not both um uh the exclusive or operator um so just know that those exist that you can compare sets like that um and this is super useful when you're getting into more complex data types and you're needing to create unique sets or looking for intersects or things like that think of vend diagrams that's exactly what we're implementing here we're implementing the logic of of different Vin diagrams that you might see if you if you're not familiar with some of the philosophy behind programming techniques um the last two things I wanted to talk about are or three things uh yeah are well let's start with the first one um is the enumerate function basically you can add a sequence to anything uh by enumerating it so basically this will take a list and say okay give me a number along with that so if I wanted to basically you know uh get you know is this what what position what index is this without you know calling its index function directly I can enumerate it and this will iterate basically as we go up so it' be zero one and two which we can see and of course it's just printing those out very useful if you're doing things like mathon operations and you need to keep track of where things are at we can use a um the zip function to basically combine them uh quickly to different lists in this case or but you can do do it with things we can combine two um two lists that are of the same length um into a pair and then return them like we would do at Tuple um so if we got for example a set of questions and answers uh we can combine them and com and then print them print those out as such uh so what this is basically doing is making a two-dimensional um uh uh list uh that's what zip does where well here let's actually just show that it's probably even better so let's just do uh let's do this just for a sec and we'll see see what that looks like behind the scenes I I should have thought about that so if we oh I see so um unfortunately it's its own data structure so it doesn't quite show that but um um what it would look like is essentially it would look like essentially this um where we've got the the two different um pairs together uh um I did something wrong there but uh can't what did I do oh I see it's this because we can't name those directly so essentially we would have uh both combined into one and then we can ask access them programmatically zero and one you may not have seen this this typical this kind of string formatting but basically these take zero and one here um take the uh things that come in this format um uh overloaded function in order and we'll put them in the order that they come in so format Q and A get Q gets put into zero because it's the first operation and a gets put into the second one because it's just coming second if we would to flip those it would of course flip them in the string there uh format of strings and print all have different ways to do things but it's good to know all three three um so didn't mean to throw that into out of out of a loop um you can sort uh almost uh anything directly uh which is a very quick way to also remove items um if you're using a set um so in this case we're just going to simple we've got Apple here and here but when we sort them we get them in alphabet of quarter and of course you can reverse them if you need to um casting that as a set is a good way to red edce that to just unique items sorted is not necessary here uh because a set will do that by itself so if I just run this we should see uh they're just unsorted now right um where uh orange I can't do alphabetical stuff in my brain but set basically gets red the rid of the Redundant apple as we saw before so um but you can sort them at the same time as well just a couple things I wanted to throw in as kind of you know bag of tool tools uh type of operations that know that they exist know where you can look them up if you need to and and eventually memorize them I certainly don't have all of these memorized I looked them up as I know I need them um and uh and that's it so okay that was a whole heck of a lot on data structures um this is the by far the biggest unit I've made so far we're up to 10 videos now so I'll probably break this up uh quite a bit um uh when we actually do the lecture series but um hopefully this this this this you know kind of um sequence of videos has been useful to you these are based on tutorials that you can find online I've combined several different ones and and a little light um self-programming and AI to augment things here and there um but it's pretty easy to come up with the examples I try to be as comprehensive as I can um to really dig into all of these data structures how we can um model data using python native D data structures and build those things out um andan it we've just got almost every tool we'd need to handle almost any scenario and that's not true in other programming languages so um I hope you found that enlightening and useful um let me know if you have any questions well we'll we'll probably be getting into a data science assignment after this I think um this this is certainly a good precursor to that kind of unit um data science tools are built on all of this logic and then um they expand some of these ideas into um arrays and um data frames um which are but all all of the you can get at all of this all all of those are built on this technology um and that's in the numpy OR pandas um uh uh packages um which we we'll probably cover um very very uh close to this unit so please let me know if you have any questions play with this put your own data in it um see what breaks doesn't break and and come with questions uh this will be a good discussion on I'm really looking forward to you guys getting your hands on this unit but thanks for uh watching all these videos