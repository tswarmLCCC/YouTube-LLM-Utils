hello and welcome to our unit on introducing functions and really probably my favorite topic to introduce is an instructor uh in programming this idea of abstraction um the the idea there is we're starting to take um our B basic building blocks um in programming you know our ability to write conditional statements loops and even Collections and take that logic and start to break it down into smaller pieces almost like using a tool or building a tool um that uh helps you do something very efficiently in the future we can do the same thing with programming languages uh and write small programs to support bigger programs um not only uh do we increase our readability and um and uh uh facilitate uh code uh quality because we're we're working with smaller chunks of code but we can also reuse these things um in in uh in other programs uh and make ourselves much more efficient at writing programs in general um it it's a great practice and one we're going to study in a couple different ways here in this unit um so let's get into it um so if you've programmed it before I'm sure you've run into this thing called a function but I really want to take some time and break down the components of the thing uh in in particular as we get into C++ and its uh implementation of functions um there's a lot of mve moving Parts but they all have their purpose and once you understand each one individually they're not that bad at all um so let's define a function first um a function is just a bunch of statements um you know we've done things like print and write expressions and write if statements and W Loops those are all just statements uh that we write in C++ and what we do is we take those and we we basically wrap those in in a thing called a function and give it a name so in our in our little example here in the text we might write um a function called calc or you know for calculate Pizza area and then we give it a block of statements on on how to do that um and then we call it by writing Cal Pizza area and giving it uh what are called arguments uh to that so the way we do that is we we um give it a function name and then in parentheses we give it basically a list of variables right when we're writing it and those are called parameters um uh and then when we call that we pass what are called arguments so parameters and arguments are kind of the the where where we marry these things up where we build uh a definition of a program with parameters and then we pass arguments to those parameters um they look just like variables so basically you're passing a variable uh uh from the outside of a program or a function to the inside of a function so you can think of the outside world as as having variables or expressions and things like that um and then they get passed into the parameters that get used within the function it's very important to know though that um for most functions those are separate instances of those of those variables and we're going to study that quite a bit here but the idea though is that these things exist within the function and then they go away right they go away at the end with a few exceptions um uh so the um the the the ways we get information back out of a function um are are really threefold but we're really going to study two um the first one is that we return a value so we we basically inside the function we create um a variable or uh or just an expression and we use the return statement and it's basically the the the function will act as a program in that regard and then it will give us back that value at the end that we can then use in other places in our program so what happens is basically you've got a program here and then it calls I'm going I'm kind of backwards here so I apologize it calls a function just for a little bit and then when this gets done it returns back to the main program and what it'll usually happen is one of two things uh the function will uh basically return a value and you'll assign that to a variable or use it in some way directly um or it will just do something useful like print printing something or making a window or or building a graphic or something like that um those are called void functions or um or uh uh fruitless functions sometimes you'll call hear them called as well um so ju just kind of the the overview there um hopefully all of this is making sense and as you as you've read through it in the books but if nothing some of that doesn't make sense take some time to kind of study these and study what what's in your book here um and we'll have some examples coming up here as well in in this lecture uh but I don't go too much into code directly with this this is more the theory level uh between the book and the homework though you'll get plenty uh of uh chances to identify these parts and please please take that chance to do to do those um so uh kind of what we're talking about what we uh what we talk about when we have a return call is this return statement here uh let's see is if I click yeah there we go needed my pointer sorry about that this return statement basically says when I call this uh when I call this function here uh we got the name here give me back this thing here so um let's see here uh in this case um we we have a function called compute square and it takes uh it has um what's called its argument the number two square um so this is just just a variable that we pass into there um and then we return it multiplying it by itself is all that's coming out here so basically when this is done it says I'm going to give you an integer back and that's why most functions have these types to them the the type is tied to the um to the return value um so you'll see things like int double string Char all of these things um and when you see that uh before a function it's basically saying this is what you're going to get back out of it and you need if you're going to assign a variable um you unless you use the auto auto keyword um that we studied a little fairly recently um you'll need to set up a variable to hold that or you just use it explicitly you can just like print a function name or you print a print a function call and it will just print what was ever returned by the function that's another very useful thing as well um just some more examples here uh just to kind of hopefully solidify this idea of the type and the name and the argument so this is a a different function called uh Cal circular base area and it takes a radius so it's going to have access to this thing called radius and again the the program supplies this to our function when it's getting ready to be used um and it says take take this uh idea of a radius this is the input to the function and then um then return this uh this Pi which is the math Pi in this case uh this comes from the math Library uh times radius time radius so it's the radius squared right um and it's just basically saying instead of making the user right mcore Pi * radius time radius each time they just use this this function call and uh and give it you can imagine um if you're maybe calculating the uh the radius or the area of 100 circles or a thousand circles or 10,000 circles that you wouldn't want to write this line of code every single time or more right this could be many more lines of code if your program gets complex so this way you're basically tucking that code away maintaining it in one place and then calling this subprogram over and over again and knowing that it works really well and returning it back out that's what's happening here um in a similar manner uh this one this next program also oh and it returns a double so um because we're passing a double in and multiplication of doubles results in a double um that's that's the type here as well um so this next uh idea this next uh function is very similar it's also a double but it takes two different uh arguments a radius and a height because it's a cylinder and it's basically calling this first function so you can see how this is being used this is being used by this um taking its radius and then multiplying that time to height so you can build these things on top of each other which is really really cool if you think about it the main thing you have to do when you're doing that is make sure that this first one is defined first otherwise this one won't know what to do with it um it goes top down in that in that regard and then you can see a more complex example of the same thing uh further down uh where we're doing uh the the surface area and things like that but you can hopefully with this example this this second one here you can really see how we can start to take complex logic and break it down into small chunks and be done with it be done with it so we get you know the base area and then the volume and then we could do surface area from there and things like that um so that's kind of you know a really uh introductory level um uh um of the big Concepts the main things I want you to take away from this video are the idea that we can basically pack bits of logic into a subprogram called a function um or a routine or a method those are all kind of synonyms for functions they they have a name they have a type and that type is tied to what they return they get the they they give something back when they're done um and they're called like this where um essentially they they they're um they're they're called uh you know by other programs and used within that program now this could have also been assigned to a variable here that's that's important to know we'll see plenty of that here in a bit that's the that's a common case but you can also just use them in other things uh in in this case is an expression used in another function which is kind of a neat way to scaffold scaffold this stuff um and then functions take what are called uh uh arguments or parameters and the the the things that are past of them are called arguments so those are the big things for this first video um we've got many more as you can see from my slides here um we got many more of these things so um in the next video that will follow up uh from this one we're going to get into um another kind of function that doesn't return anything called a void function so more on that in just a bit