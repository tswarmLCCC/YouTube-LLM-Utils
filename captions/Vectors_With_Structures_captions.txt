in this module we're going to continue what we started with structures and extend that concept to using vectors and and a few other uh data structures in C++ but mainly vectors um we'll uh we'll be going through um there will be a video here this video actually will go here just a sec uh we'll be going through the arrays and vectors uh structures and vectors um reading assignment here in your zy books here which look like this and you'll will quickly get into vectors and mainly the idea of using this push back uh concept which is essentially adding an item to the end of a dynamic memory structure which is really cool because we don't not this is the first time um that we really don't need to uh dynamically allocate memory um ahead of time I'm sorry we don't need to allocate memory ahead of time we don't need to tell it how how many like 10 names or 20 names we can just say add one add one add one and that's really the power of vectors in a nutshell um there's a lot of other things that that they do really well and what this is um what vectors really do for us is encapsulate um uh some Concepts that you used to you used to have to do by hand in C++ um and we will do later in this course um uh almost you know Ju Just so you understand the ideas of memory management but vector here uh allow us to kind of grab more memory whenever we want it and just keep adding to a list um the assignments let's see here uh we'll we'll basically be making a very simple Gradebook uh with ages uh much like what we did last week um and uh but we I I I've provided a couple examples here to illustrate uh how vectors can work so you might notice here we need to include the vector um the the vector standard standard Library this is a header file that comes comes with C++ or you know most of them anymore um and that's why we use the brackets here as opposed to quotes later down later on uh when we get into classes and especially when we move our classes into external files for organization these will be in quotes when there are files but when they're in the standard library or we've installed them somewhere um on on our computer that uh the compiler knows about we use the the brackets here as opposed to quotes um so one thing uh that you might notice here is that we're making a vector and we're giving it a type of integer um and we're saying that Vector is called num and what we can do here in the very simplest sense you notice we never tell how many we want we just push push one two and three back uh we use push back to basically um to to to work through these things um and you'll then what we could do then um this is uh is we can Loop through the thing um and I'll just run you know do our simple uh g++ uh simple vector and that's going to give us our a do out if you recall and then uh we get one two and three so very very simple the uh more slightly more advanced uh version of this uses the structure uh concept we introduced previously in this case we're storing high scores very very similar except we first Define a struct called high score storing nothing but a name and a score um and then we work through the high score Vector um or we create a a vector called high scores just calling it scores um and we give the first score a name and a number and this is again using that really cool syntax where we're just providing it in order um so uh another way we could do this is we could do something like uh um um like this and then we uh oops and then we could do S3 dot uh name equals Trevor and s3. score equal zero we could do it like that as well um if we wanted to um and then what it does here is uh I'm going to actually move this um just but that's the the the the point of that is to illustrate um what we're doing here with the the structure um we're basically instead of accessing them directly here we we're accessing them with this Shand notation but you can store your data in a much nicer format as we saw last week um by doing it this way uh with with the bracket but this is all all the same and now I'm just going to um um what we're doing is grabbing enough memory for this structure and pushing it to the back L literally push back um same thing with our score to and now that I've made a third one I'm just going to add that one as well and then this code just like before it's going through the uh the high score in each scores in each of the scores uh vector and printing it out so just save this real quick and we will um do the new file name oops I thought that would go a little faster and we'll do structures vectors and then just our a.out and just remember that a.out is just the default one you can give it another name like uh if we wanted to this works just as well um we could even give it like that and uh and that'll keep them separated if if you rather do that so that's pretty much it um what we're doing with vectors this week um there's a lot more in the chapter but this will be our simple assignment for this week um there's a lot of the cool things like reversing these things or searching um it's really a cool data type um but it really expands on why you use structures in the first place so U I just kind of wanted to iterate on that and tie the two units together with this short video um please let me know if you have any questions um the next unit we're going to move on to is really kind of tying all this together with a more Advanced Data Type U abstract data type uh called a class where we really start building these things um out a little bit more and we we can we get a few more Tools in our in our to Kit um so that's all for now