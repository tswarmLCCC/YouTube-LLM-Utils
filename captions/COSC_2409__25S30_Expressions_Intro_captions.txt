in order to continue our Deep dive of python and its control structures which we're going to get to very quickly um I'd like to take just a bit of a pause and go over this idea of Expressions um in Python and the different kinds of Expressions there are um and and what we mean when we say Expressions um so if if you've taken any of my other uh computer science classes um here at LC you may have seen this this um diagram before very simple right we take an input or or inputs in this case um there can be more than one input um and we do something with them uh you know some operation uh and then we produce an output usually a singular output although there's there's exceptions to that rule but in this case um we use this this kind of metaphor um to describe Computing and modularization and function and all of these things where we're we're taking um we're taking input we're doing a process um which can be you know something we program and have a lot of control over or it can be a black box um but we then we have an output um and this can be repeated right the outputs then can become inputs to other things um why am I bringing this up well it turns out that expressions are a a like a very low-level embodiment of this idea Expressions basically combine um locations and memory um and do things with them um so what do I mean when I say an expression I actually wrote the definition uh or a definition for you here um in this file that I'm going to give you uh called expressions. py and there's a whole bunch of examples that we'll go through um over the course of this lecture but um expressions in a nutshell um are combinations of variables operators and values um that yield a value right so that and that's why I brought this up that's why that's why we we even started talking about this where we've got you know values and um I'm sorry values and inputs or values and uh actual constants um we do an operation on them and we get an output and we refine it we refine you know one or more inputs into an output and the same thing is true of an expression um so let's expand our definition of Expressions by giving some examples the the easiest one and the one we studied last week of course are the operations right the the the the um Native operations plus minus uh you know uh multiplication division modulus um right the the remainder operator power and then um you know um integer quotients and things like that um but here we're taking um you know a variable in this case two variables A and B and we're adding them this is an expression that evaluates to the sum of these things so if a is holding a value of three and B is holding a value of five this expression combined with the operation that it contains would evaluate to the the value of eight right um we've covered this you know in some extent but the the the point is these can be refined then a could be uh then updated and we could we could do the operation again or we could chain these together you can do certainly things like a plus B minus C / d uh things like that and each one of those in its own right can be broken down into simpler EXP expressions and it all evaluates to one number in that case um the reason I bring this up is because we're going to get into the control expressions for if statements and while while statements and other Loops so basically conditional statements ifs in in our case a switch statement um and then also like you know our for Loops our while Loops um and things like that um and we use um expression that evaluate to Boolean operations and we do that by making comparisons so instead of addition we can say we're going to take two or more again there can be more than more than more than two and we're going to use comparison in this case and this is going to evaluate eventually to true or false um it might be something more complex where we evaluate this and then we combine it with another one with ends and or statements and things like that but the idea of an expression is that you can always they they they keep simply ying and eventually they're going to break down to true or false and we'll see those when we use if statements and and in Loops those will basically execute code um or repeat code uh blocks uh depending on how they evaluate to true or false but knowing how that works is is a key thing that we kind of gloss over because it's kind of readable right if if we know that you know the equal equal sign means it's an equality operator we can kind of read that in our brain and it it kind of equates to know what what we know about math but it's important to know that you can start chaining logic together um and we'll see some examples of that um so we have comparison operators where we see you know do things like uh you know is this true or false uh you know right um um but we can also combine them so we can use things like and and or so in this case um it will evaluate this expression and it will EV evaluate this expression and if both of those true this whole expression it becomes this becomes true and then it's saying true and true and and you can use what's called a truth table there to say when it when both of these are true the and returns true as well and you can start to combine them the opposite is true of the or statement basically if either one of these are true um then then uh the the the statement will be true so for and both need to be true both sides of the and need to be true true for the expression evaluate to true for ores either one can be true and then we got we've got of course got the negation which basically says whatever this was do the opposite so if this was true it would evaluate to false and if it was false it would evaluate to true and then of course if we're saying if not this then that would we we would want to see it be true for it to execute there's some other ones in here I'm going to skip over bitwise operations but basically these are very binary level uh where it's literally using the ones and the zeros these are very uh important when you get to very fast calculations um but they're a little bit beyond the scope of this just know that they exist and they have different syntax um the two I do want you to be aware of though are are the and and the or statements here um these these usually functionally operate the exact same way as the and and the or keyword although there are some differences um the uh last two that I want you to be aware of and we'll loop back to this when we uh jump back into list and then we cover dictionaries as well is we can use um essentially uh the uh in operator to say is this thing in a set or in it's a member of a sequence right so you might recall that um a list is a sequence and so is a dictionary by association um and so you could see is is this value in there or not in there and you can do um Expressions uh in that way too so this is another operator basically saying is this thing contained in there and it will again return true or false so you could write an if statement or you could do while you know things like that if if you had a need to do something like that um then lastly uh the um the uh the you'll see this is and is not um literally the word is this is not the same as the equality operator and it's important to um to make a distinction there um we might have two variables X and Y and they might both contain the variable two but if they were created um separately uh then is uh is X is y will return false um they're really what what those are really doing is saying are these things pointed at the same exact location in memory um and they have the same definition there's a pretty uh pretty tight definition of what um an identity uh where things are are exactly the same are in Python what that means me uh but just know that that is not the same as an equality operator for what we're doing here um so just a just to kind of sum that up uh and bring and just to tie that back to my original original um uh diagram here let me see if I can get it back up uh basically we're taking several inputs we're refining it to an output and then we start to chain these things together with uh usually Boolean logic or logical operations when you hear me say Boolean logic um I'm usually talking about like um ANS and ifs statements and things like that um and uh if you continue on in computer science you'll you'll eventually take um some version of a of of a philosophy class where you'll have to basically um talk about ins or ands and ifs and those kind of operations and how they evaluate um but it's pretty much like you would think it would uh you it would but um if you ever have questions about that either let me know or just look up the the the truth tables they're called they're called Truth tables for an if statement or an or statement or an and statement I'm sorry an and statement or an or statement not not an if statement if statements use them um and that's why they they're important we start to chain them um but it's important to know that when uh I guess if if if I can give you one takeaway you evaluate each one of these independently and then the end knows how to deal with like you know the outputs of each of those and the same thing with or and we'll see those as we build more and more complex Expressions that will eventually um combine down to a true or a false statement and that will control your if statements and your your while loops and things like that so um in the next video we'll get into some more practical examples of all of these but mainly the um mainly the uh the the the Boolean logic ones we'll rehash um just you know examples of all the different ones here um that are again in the python dictionary I'm sorry uh documentation um but I really wanted to really break out when when I when I say it evaluates this expression what we mean by that because I don't think I ever cover it in Earnest anywhere else and um as we get into the nitty-gritty of if statements in Python um it's as good a place as I need to cover that so anyway I hope that resonated with you um and we'll get into some examples here in a bit but let me know if you have any questions about that thanks