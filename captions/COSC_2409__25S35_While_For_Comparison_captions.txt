while Loops um are great at doing exactly what we we just described where we Loop over things either in a um a a data driven manner where we use an integer or some data and we we Loop over that or we do something like um something contrived where we we set up variables with a beginning uh or a sentinel value and then a limit right and we we we keep going until we hit some some number right we until that TR that that uh expression becomes true we just studied in the uh intro to the while loop um but the other thing that uh that Loops are great for is iterating over data in general um so here is a here's kind of a template of something you might see um uh in both other languages but also in Python U where we have a list here a list called words right and it's got three words in cat window uh and diff diff straight whatever this word is um um and as you know uh from our previous video on lists when we introduced those in the introduction we can get get at these with their indexes so word zero would be cat word one would be window word two would be um it's now going to be dog because I don't want to keep or Godzilla let's use Godzilla because Chad GPT told me to um but that would be a word word to right because these are all offset by one because they start at zero um and we can we can demonstrate some of that that uh just by everything I just said by doing this and we can use the length function Len um on a uh a sequence this whole thing is called a sequence as our um as our dictionaries and things like that basically they're they mean that there's things in order here this particular version of a sequence is called a list um and the uh we can get the length of sequences by using the Len function we can use this on other things um but we can certainly use them on lists uh and and built-in arrays and things like that as as well um and then we we simply print that out we can see that it's three right but because we have the index here uh the ability to index we can set up a uh a value of zero to begin with and we can just Loop through these things incrementing which index we're talking about by one each time um so we start off at zero and we print that off so on and so forth so let's just go and do that and we'll walk through the loop real quick seeing that we do indeed get cat window and then Godzilla um and this happens because this continues to be true um uh numerically uh because this is again three and this is zero so zero is indeed less than three this is true so we enter our control Loop um and then we print off the words the words list at index X position zero remember this is zero right now so um instead of just typing zero we're using a variable to control that and then we increment that because we intend to go through the entire list so we change it from zero to one with this statement then we come back in because we this is still true now this word index is one um and we're comparing it to three so we go back in and now we print the first the the index one of those the second index uh which gives us uh in this case window and then we do it again for too and then finally we come back and it's important that this is not uh less than or equal to uh because we want index two here to be the last one this is three and that's why this works so that's a very common pattern uh but we don't ever want this to be three because there is no uh fourth in this case or index three uh um item in in our in our in our in our list this is a very common syntax we could do things like add these things up if there were numbers in here or we could print them all out or we could do operations on them um uh just just a just a whole bunch of of uh very desirable effects of a computer program live in this format um but because of that we we first of all we have to have the collection in this case a list we have to set up a a temporary variable or Sentinel variable uh of zero we have to basically know the length of wordss now we could do this I I should I should iterate that we don't absolutely need this index we can do this this works just fine too so we can this expression evaluates uh each time but because it never changes um this will always return three so this would still work um I don't know which way I prefer probably this one because it's a little more concise and we wouldn't need this at this point um but we certainly need this one because it's what's changing right each time and then uh and then of course we we need to increment it um there's there's an Associated looping mechanism called the for Loop uh that's very handy for this kind of operation and other operations um the four statement in Python um it will iterate uh basically um the it will iterate over the items of any sequence um in the order that they in the they appear um so here we have a new keyword in right four WN words what this is doing is basically this operation um what an equivalent operation would be something like this if we did this word equal like this we could do this as well so we could do something like this in the while loop and what we're doing is basically every time we go through we're taking the index and grabbing it from the list and assigning it to a temporary variable holding just that one word and then we print it out this this of course works just fine um what did I do wrong there did I blow something yeah there they are so I don't know why we lost that there oh I do know why actually and that's something I wanted to talk about um in The Interpreter here this this doesn't complete until it goes back and hits a new line so you'll notice that I have uh just the control block highlighted and you'll notice it doesn't work it's because I need to send a new line this line back without the the uh the indention there so I'm gonna try to do that here with the keyboard try but I can do it down here so basically it's waiting for a new line and then it would work um and uh so if I do something like this we'll see a better statement where it prints those things out um like so uh not quite grabbing everything I need there there we go so because I have this line it knows I've now done with this control block and I can print the whole thing out that's why that works um differently uh but that's that's an just kind of a a Nuance of the Python interpreter in practice that won't matter in your programs um but the the the the the point being is we temporarily assign this word uh to the the uh the current index um we can uh really refine a lot of that by using the the for Loop this operation for w inws basically takes care of the while loop the assignment and the increment over here for us and we're left with just the functional part of our statement which is actually doing what we want it to do the print the print uh the print part so basically what's going on through here is um it it's just like a while loop and that it iterates through every one of these words in in the in the list but it it assigns in each iteration it assigns each object and it doesn't have to be a word it could be a number it could be another object could be a list you can get you can put anything you want in these as you might recall from our our lecture on uh lists but uh it assigns each one of those to this variable W uh for that iteration and that's why this works so you'll see we get the exact well not the exact same function because we're actually doing more with it here we're printing a little bit more than just printing the word we're actually printing the length of the word in this case the string function here um so that that's the the for Loop in a nutshell um can be super useful um I'm going to do another video really quickly um on some best practices with for Loops here um and and it's particular in uh regarding lists um that I I find very useful uh but uh this intro is what I wanted to point out here just the differences and the uh existence of a an alternative type of of control structure structure for collections um or sequences in this case uh called the for Loop um so we'll have a part two to this video in just a sec