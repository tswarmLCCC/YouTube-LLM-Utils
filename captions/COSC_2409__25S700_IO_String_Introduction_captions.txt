hello welcome back to our continuing lecture series on python uh we're um we've been exploring a lots of different um language features uh of the Python programming language in previous units uh this unit's a little bit different uh it's not a formal uh control structure or uh or or major feature like we've been dealing with you know functions and control structures and some of the built-in data types for um you know the dynamic memory uh uh you know the dynamic memory um structure such as lists and dictionaries uh today we're going to be talking about input and output uh some of the built-in features in Python there um there's several of them um and it's it's a useful unit uh to kind of get get um get up to speed with a little bit but it should be a fairly short unit um hopefully not too hard this will be a lot of little oneoff recipe type of of uh instruction here um so getting right into it let let's start looking at um three different ways to format strings of course uh we can always just print to string out right um we've probably done that a lot in our program both in terms of um uh you know debugging information but also our user interface where we ask for input we output information this is a primary mechanism that we use uh when we print things to uh in Python directly if we don't do anything else it's printy into what's called standard output Um this can be changed I don't have demo code of that but in the CIS Library you can change what s the uh standard input and output it is but by default standard input is your keyboard and standard output is just the terminal um of course in a python notebook standard output is uh you know actually the uh the markdown in in the page itself and that's what I'll be using today but just so you know when you see things like uh print or things like that they're going to assist output or input um the the print method by itself uh is a very a highly overloaded function um and what we mean by highly overloaded function is it can take a lot of different kinds of arguments and do things with them what we'll be doing today is kind of breaking down some of the things that print does um for us uh or not even just print but string formatting in general um and and starting to control that instead of just accepting the default output the first um the first of three uh formats I want to introduce um are what we call F strings in Python um I don't know exactly I'm looking it up I think they're I think what they're called are formatted string literals um but basically any any uh set of quotes single or double um in this case it's a double quoted string um Can can be prefaced with this F character and when you do that you can call formatting and um and uh uh Expressions right within your string basically you you um encapsulate them in these uh these curly brackets here like so so when I run this we'll see that b basically name age and height just get put in right where they would be so you could even you could quickly write things like this if if you're you know just typing this you could say hi my name your name is name you know like that and then what you can do is simply just put those in Brackets like so um and all I did there was hit shift left bracket uh up there and it formatted it there and of course you'll get that out and U you might notice that only the last one's printed because of the way python notebook are so you can actually just you know kind of kind of what I was doing there is type actually what you want and then go back and and mark them up um you can uh apply number formats to these things so um we'll we'll see in a lot of different uh of the examples today that um the uh the um the uh the the print functions can take um different types of objects in this case we've got some numbers in here right 30 and 6.1 um where we've got an and a a floating Point decimal right um all of these are handled appropriately but you can um of course uh also just uh um uh hand off some formatting um operations to to these things as well so when I run this what we get here are uh using the different operations natively um and passing format operations there um you notice I'm using a DOT format uh method of a string here so um you could think of this as basically storing a string like so in a variable this is another way we could WR make new code down here we could make new code down here where we actually call this my string and then we do my string. format so this is a method we we studied this a little bit recently um where we're calling a method on an object well it turns out that you don't actually have to store it in a variable to do that you can this is this this expression evaluates to the same exact thing as this so these are equivalent statements in Python both of these work just fine um if I print this I should say oh well it it would help if I would actually pass the whole thing to it like so um and we'll see we get the same exact output the the point being is that you can Tack and you'll see this syntax a lot where both with both strings where you'll see just a literal string or an object use uh similar formats on them uh and then the last thing we'll talk about and and with this I'll break and go into each one in a little more um in a little more rigor um is the old what what they call the old style of formatting or the uh uh the um the modulus style of formatting where essentially it it's very similar to the FST string or the format uh but instead it uses this modulus uh operator um and it's more to be aware that this is an older style of uh of string formatting in Python that um it really isn't you it's kind of fallen out of favor for f strings in the format method itself uh but they certainly work just fine as well um as as we demonstrate here so uh that's kind of an intro of what we're going to talk about the three different big Styles uh so we've got you know the formatted string the F string option the format method option and then of course our uh our our new you know the older uh modulus style the percent sign one so um with that let's jump into uh formatted strings I think we might be able to combine all three here let's see how we go but I might break them up as well um we'll see so look for either one or three more videos about this before we jump into other input output options