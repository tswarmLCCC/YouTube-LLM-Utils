okay coming back um some more features and and the again a lot of technical stuff going on here with classes and I really want to cover those more than I do the actual philosophy of object Oran programming we'll get plenty of that in our examples in our in our reading but um the the idea of um Getters and Setters extends nicely into this world of Constructors um what a Constructor is is it's basically a a method a special method that gets called when you create an object from a class that sets it up properly for us um usually this is um initial values that usually that's what we mean by that but there's other things that they can do um probably beyond the scope of of this intro class to C++ but sometimes you know if we're doing things like database work it might set up a connection um or ultimately tear down a connection there's also things called destructors or deconstructors um but the main idea is we sometimes want to set up our um our our um objects with initial values especially when users don't provide them and there's a couple ways to do that um but the main way is we use a Constructor as opposed to just requiring our user to know that they have to you know set in in this case a name and a rating um so uh what we can do instead of you know uh uh um uh uh one way we could do that is give default values you can certainly do that um just just like u in all of our variables you can set these things to um to you know uh initial variabl so in this case our restaurant gets an initial value of no name and initial r no negative one basically saying that there's nothing there yet but um it would if you returned these things um you would get values back there's a big thing you'll run into in C++ pretty early on in your programming career called a null pointer exception and it's basically saying if you try to print something or act something that doesn't have a value um it uh it will throw in air almost every time um and Constructors give us a way to prevent that where we put some value in there that makes sense so we can at least do things as we're developing or it catches things like if somebody else down the road um doesn't do their work and and set these things up you know say you wanted to get an average rating um and somebody was looping through hundreds of these restaurants and it got ratings and it was null it would blow up it would give you a null pointer except well if we set a Constructor we can avoid that by saying this is1 um and it will it it will behave funny but it will still work right um and hopefully hopefully that um and there's other ways you could you could test for that um and protect yourself from that using Getters andc methods for example are a great way to do that um when you do an average if you encountered negative one you might you might throw your own err or give a warning message to that end um but better than using default values in your private methods like this is doing what's called a Constructor and the Syntax for that is just the class name um so when you have a when you have a function with the name of your class it will it gets called automatically and you don't need a type for this well you do need a type the type is your class so basically restaurant is returning a type of rest a type of object of the type restaurant in this case um and you do the same thing um now uh and you can access uh your private methods here as well and and it's good practice to do that um you can pass other arguments to your um to to uh to your uh to your Constructor um and C++ will create one of these anyway for you it'll just create a blank one um the idea though is uh when you when you say you know um my restaurant so going back to our example that we just ended with on the previous uh previous slide here um when we create a restaurant like this uh you know my favorite lunch place my favorite dinner Place each time you do this if there's a Constructor and there isn't in this case because we didn't Implement one uh up here oops sorry lost my lost my cursor there H sorry getting back to getting back to this guy um we did not create a Constructor here but if we had when this gets when you when you actually make this call the that function will get called that that Constructor um um and uh and it will if it doesn't have any arguments it'll just call it without any and that's what's going on here so you'd Supply things like that uh here um but you can also you could also give it your name and rating for example here and just say name and rating and set those uh to to the the parameters of the f function uh to of the Constructor and you can do What's called overloading the The Constructor as well where you have multiple versions of this so you might have one like this that doesn't take anything and it gives you default values and you might take have one that takes name and rating and assigns those and you might have one that just takes name or just takes rating um and then sets the other to a default you can do all of those things um so if if you define a Constructor like I said um any Constructor um so if you give one with like a name or a rating it will it will not uh have one with a default it just assumes it so make sure that you create one of those as well so if you're going to implement one with um with uh multiple items like that uh make sure you give it one with all the defaults as well um just to avoid some problems down the road uh plenty of practice of this in the book um uh and uh one other syntax that you can use with these by the way it's kind of a short hand that I didn't know about I I actually ran into this when I was teaching 2030 in the spring for the first time I think it's new just to date myself um I think it came if I read in the book right it it came in like C++ 11 and I predate that when I studied C++ but you can um instead of writing um all of these things you can uh either give them values directly uh like this uh so you you can basically use this colon and then what happens here is it takes this value puts it into field one takes this value puts in these are equivalent these are equivalent um alternatively you could put uh arguments here in in in this location um and then so say this was uh field one Val or my field one Val you could put that variable name here as well so they don't need to be hardcoded it's just shorthand um as opposed to what you're doing down here so basically when you use this syntax and you you can you can add other code here in the block if you need to do any math or anything like that you could do that the idea though is it just does this assignment so basically every time you give it this um this this uh private variable value pair it will make the assignment for you as opposed to having to go through like this I prefer this syntax it's easier to read certainly some programmers like myself until recently will understand it better it just makes sense this is a shorthand um but if you ever see this that's all that's going on um and then like we're talking about uh you can def uh create um you can create uh um uh default values uh in your in your Constructors as well uh we talked about that a little bit earlier um but you there's nothing keeping you from just setting those here um uh as well well uh so basically if if this was called you this kind of Constructor would take a name and and a rating if you wanted it to but if you didn't provide those um it would it would set the default so you'd basically get two Constructors out of one there you'd get a Constructor that could can take a nit name and a nit rating or it would take nothing and set it to No Name and and Nega one respectively um let's see how many of these do I have left yeah I think I'm actually going to break here um no I'm going to talk about this one too uh one more one more little topic after uh Constructors here um you can uh you can use vectors as a matter of fact uh this is a great use of vectors where um you can uh create vectors of objects they they're not limited to primitive types here at all um so here we have a a class uh called review this is a and we can create an object of reviews um so we've got two classes here one is review without an s a singular review and it's got a set rating and comment uh method in its public and and then privately it stores the rating in the comment um and then in uh and then we create another another um another uh class called reviews plural plural reviews and we create a bunch of reviews and you'll see here we're holding a vector of those so the the key here is that we tell it that the vector that this is holding objects of the review type and that's what I've got underlined here and why I have it underlined so again this is a custom a custom class that we defined and we're going to hold objects of that class in this review list right and then we access it just like what we would uh with any uh uh Vector where um but instead of using like integers and strings over here we create a review uh object and then we can we can actually um uh in that we can use its method using in this case a mutator where we set the rating in the comment and then we push it into our list so lots going on here right we got a place to hold our data right it's very back in using primitive types then we've got a collection of those that hold a vector um and then we've got a method to basically uh take that to read that um a user interface in this case where it says you know bre that in and then it's going to use a public method to get to its private da data behind the things and set the things that's all that's going on here but this is a good illustration of that whole flowchart so take some time here even pause the video if you need to really kind of break this down and see how all of this is flowing together and then finally we we use our our our Vector which we've used before and we push it back we push this to the end of the vector list um which is dynamic memory by the way uh which is also in its own right really cool um and uh and and and storing that in a in a vector right and uh and or as part of our Vector that we can then go through and get all these things this is part only part of the code so this is a huge use case and really all of this kind of comes together really nicely um this isn't directly related to Constructors I'm kind of tacking this on here um certainly the Constructor could be created here right we could use this right now it's just using the default Constructor and in fact we don't even have one in this case uh but we could we certainly could and and probably ought to um sometimes you'll even see these things where they set these things right from the constructors just for Shand and I recommend that that's good practice so um anyway uh I'm going to I'm going to stop this video right here and we'll go into just some odds and ends and a few higher level philosophy but hopefully between between um let's let's just kind of recap all of the technical stuff because we're wrapping up here on that side of it um you know so we have this idea of a class definition right using the keyword class and we have public and private where it uh exposes our our private uh variables um uh and methods to us right we we we we've kind of broken that down all that and then from there uh we you have the dot syntax where we can get at these things and and use them directly um you know like we use our our DOT set rating which would be a public method and then set rating here would take a value and then do something with it in this case um assign a public you know act user facing uh uh uh value it would assign that to a private a private varable able that we could use later it's basically tucked away in a little Vault there until we want to get it um and then we uh we've talked about uh you know what private why we use private members a little bit um and mutators and accessors Getters and Setters a little bit um started to talk about the syntax that we use there you know with the double colon uh where that's basically saying um this is a method of this class as opposed to a method of it so these are how we Implement all of these different ideas um and then we talked about Constructors which are basically given us a way to initialize variables and the different syntax associated with those including um default values function overloading or I'm sorry uh Constructor overloading a special type of function um and uh and then default values there and finally this simple syntax or this shorthand syntax um and then we give kind of a a wrap all together type of use case here um where we create a a collection of these things um and we bury the details of all of the the nitty-gritty you know data storage in a vector um uh and then or I'm sorry within the the the class and the objects of that class and then we store those objects in a vector um a very nice way to store multiples of these things um spend a lot of time on this slide this is one where I want you to pause and see if you kind of understand what's going on um each line especially the ones that I've underlined here um and if you don't please come see me okay this is a huge Tipping Point of of understanding how all of this kind of works together um I've got one more one more uh video coming here just some odds and ends of the whole thing um so uh uh stay tuned for that but if you're having any trouble this is a great place to reach out and and get some help thanks