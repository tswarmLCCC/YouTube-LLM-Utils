hello in this part of our unit we're going to study um a little bit about how computers store information um different types of information and and and the differences in how it's stored and processed and then we're going to jump uh from that topic to a little bit about how we um represent uh words and text in Python and uh some some options we have to uh to present it in different ways um so uh with that we'll jump into um a a little bit about binary um so um binary is a um a way of counting from in ones and zeros so if you think about um you know how we count you know with uh when we start counting we count 1 2 3 4 5 6 7 8 nine 10 um and then from 10 we start to increment that next thing right so it becomes 11 12 13 14 um but really all we're doing is incrementing that uh that 10 value and then our hundreds value and thousands and 10 thousands as we go the same thing happens in binary but it happens uh a little different because it happens when we're we get to to two because what we do in binary I'm going to bring up a little graphic here um is if you recall um computers basically can store on or off signals just yes or no one one or zero so we represent the the presence of an electrical signal with a one which means on or and then we store off with a zero um and what we can do then is we can start to build that to count so if we wanted to represent the number one u in binary we might do something like this we might say you know one here means that that means one right but if we wanted to and zero uh so we could get to zero could be zero and one could be one right but if we wanted to go to two what we wouldd want to do is go instead of going from 9 to 10 we go from 1 to two by going to the next part over so this would be one and this would be zero and what this means is we're we're at two here and then and and uh and um and then we not adding anything for this so it's two if we wanted to go to three then though we could do this where we have two here and one here and that that ends up being three right and so one one um in binary means three um and so on and so forth so uh for example if we wanted to do something a little more complex we could represent you know um quite a few numbers this or any number this way by just keeping build up so let let's pretend we had like a one in binary and then a zero and a one here and a one here let's figure out what that would be just for illustration well we've got our twos this is this is our two's place this is our Four's place right because we could get up to four there um this is our eights because these double every time and then 16 so what we'd have here is 16 + 8 and we don't have a four there so we're going to leave that blank and then a one and so that would be how we'd represent the number 25 right and you can see we could basically build anything we'd want up all the way out so you just keep adding these things and it turns out um these are these are what are called the this representation each one or zero is what's called a bit and then when we get to eight of these they they use a term called a bite um just to just to start to kind of compartmentalize these things so um you can go up to eight bits in each bite and that's how memory is kind of described in a computer so when we hear the term gigabit or gigabyte that's kind of what's being represented um so if if you're if you're talking about like gigabit Ethernet speed it's literally you know I think a million or I'm sorry uh uh see kilobyte or kilobit is a thousand um mega would be a million so it'd be a billion anyway it's a lot it's a lot it's pretty fast um and and that's how it's just transmission transmitting This Much Information down down the pipe at once um or storing it in in in our terms so what why what does this matter well we can represent numbers quite nicely this way um and it turns out that we can can represent a lot of things this way if we wanted to represent negative numbers we could just get clever and say you know we're going to use um one bit like here for example or here to represent whether it's positive or negative number we just have to know that that that's what it's doing that's called an encoding scheme and what we do that from there is we can start to say okay we're going to carve off a certain amount of the space uh not to represent numbers but to repres represent uh letters letters uh and and other and other things like emojis it turns out or symbols or computer code um so there's a a a thing out there called asky and it's an encoding scheme and you can see what it's doing here is basically what we're what we're doing is we're rep we're carving off for lowercase letters this first bit here it starts like this and then you can just see it starts with what we just saw is one for a and then B and C so on and so forth right and we get to a point where we need to increment that from zero on this uh this fifth one out to one just to have the room for these things but this space is kind of reserved reserved for that so we can represent the letter a um with this binary sequence um but that's lower case a and then we do the same thing with uppercase a um and it turns out that there's just a whole bunch um of these things out there let's see if I can find a little bit better one uh so we're yeah like an exclamation mark for example uses a completely different different thing spaces um so you can kind of see what's going on here we can start to represent all of these things with just on and off signals is is kind of the point I don't want to jump too much into that but you can actually add these things really efficiently divide there's all kinds of of neat things you can do um so that that's a little bit of of how we get get from wires and and transistors that store these these electric signals as on or off all the way down to representing information once we do that we can um we can start to talk about what are called data types um and data types are a very important uh concept but less important than they used to be what what do I mean by that well oh when when I was learning computer science um we used programming languages called like C and C++ and even Java um and even some older ones than that that you had to tell the computer exactly what kind of data type you're using so if you wanted a number you declare it as an integer for example and it would say all right I'm going to give you this much space and because uh in in memory and to store that amount of binary data um and the same thing would be true if I wanted to store a character you declare it as as what's called a a car or a Char sometimes is how they'd say that but it's it's short for character and it would use um you know exactly one bite of memory to store one of those one of those asky table uh values that we just saw and you then you could start to say give me some in sequence to start to build a word so if I wanted to store my name we'd grab one bite for the uppercase t here and it'd be this you know one Z One 0 1 z0 um so when you see like in movies and stuff when they're trying to be all super hacker movie type things um and you see a bunch of ones and zeros that's all that's really going on there is they're either storing symbols or they're St storing instructions because it turns out that we use the same encoding for some of our our our our uh our our instructions for the computer um they're just a different set so instead of a character it's saying use this to you know move things into memory or to print or to things like that you you can generalize it that way um to so to build my name we'd grab this one and then we'd grabb gra this one and these would just you know be in sequence and all you know all these ones and zeros uh sorry can't find my camera here all these ones and zeros basically mean that bit and they're stored somewhere and then we can use them um so that's kind of it uh in terms of what data types are so there there's you know there's numbers and there's different kinds of numbers um for example numbers with decimal points are called Floats or floating points or sometimes double Precision floating points those are stored a little bit differently because they have to store the the the values on the other end of the decimal um depending on the need of the program but they're still just stored with ones and zeros at the end of the day the encoding scheme is just different um and then the other thing that is often that that is stored that way are what are called Boolean values uh and all Boolean boolean's a fancy word for meaning true or false um and if you think about it that's just getting back to to Binary on or off um but you you there's different different kinds of information that we use in our programs and so you know uh strings numbers and booleans are kind of the the first steps in that World um we expand out from there uh as we'll see in subsequent units um and even different languages uh we start to build you know things like many many words or or or data types that have uh you know different different uh different properties based on where they're at in in the program things like that we can expand all this with these building blocks but numbers letters and instructions and Boolean values are the the the four big things to keep in mind when we store uh um information in the computer but really numbers letters and Boolean values are are kind of the core of it so let's talk about how that's represented in Python um as I mentioned earlier let's just bring up this guy um as I mentioned in python or uh earlier um python does a lot of this for you you can store things um like number equals four here without telling it what number is it doesn't know that number happens to be a number um in this case it used to be that you'd have to do that but python one of the nice things about python especially for beginning programmers is it will just take anything and and and give it a name in a variable like we talked about in the other video um this could be you know four uh it could the word Trevor it could be um true it could it could be anything it could be a graphic if we wanted it to be um so uh the the the big thing that makes a string a string though are quotes um so if you're wanting to work with uh numbers you don't use quotes um so for example if if I call this amount like this this is actually the the the character string 32 it it wouldn't know how to add or subtract or anything like that um what would happen there is it it'd be used for printing and it turns out you can change these back and forth and that's what we'll do in this exercise um but when it's in quotes it's it's basically a string um now when it's not in quotes and it's numeric then it's it's an integer or a floating Point um this unit or the rest of this unit is really all about uh printing though printing strings and that's why we introduce it so early um so if I wanted to print out like let's say we got two variables with two numeric values six and 32 and we want to say you know six burritos cost $32 one way we could do that is use our print statement and say print number and then use the comma to separate and then we're going to give it a string which uh you'll see actually when I run let's just run the one let's let's clear this guy out just to um so we we get the number and it's actually changing it from a number to a string for this purpose um it does that for us which is really nice and then we use the the you you can see the burritos cost part of this statement including spaces are all in quotes here and that's very important if I as a matter of fact if I take that out it's going to blow up something fierce um we can even see it already triy to tell us hey dummy don't do that um and uh you know it it it tries to do some things and help you but uh the idea though is that when you're wanting to use words put it in quotes um and you can store those in variables um as well um and and put you could put a string variable here as well um like this if you wanted to let's grab that and just say burrito string equals this you you could do this this is just fine and it'll do the same thing um this is just a string variable as opposed to two integer variables so if I run this we'll see that it's working again um and and we can even mix and match how we how we do that um so that's how you can combine strings or build strings um for printing or for other things very handy I mean you're going to use this all the time so kind of get used to that syntax uh python uh does one other thing that's really nice for us um instead of having to separate all of these out like this it gives us what's called the F string or format string syntax and so I'm going to comment this out but you can build the same thing we just did by doing something like this and it looks a little cryptic oops sorry not that this one and if you start your string with an F what you can do instead of saying okay burrito string here and amount you know like this in commas where you have to keep writing commas and and string these together you can just write the whole thing out and then just put your variables in these brackets and it will it's smart enough to substitute this in with the variable so you can see here we get the same thing um same exact thing it's just a nice way so when you're programing you could be just be plugging away and say print and you just started it out right and just say I want this to say amount here and number here and that all that's going to do um right now is be a string but you could do it much faster so right this is the actual it's not grabbing the variable here it's grabbing the word amount because it's in our quotation in in our string sequence right that's how we do that but what you can do then is you can say okay I'm going to make this an F string and I'm going to put just the character F here um very simple to start it and what you do here is you you put the brackets around the parts that you want to be variables and they have to match up to a name that that is a variable like this but once you do that it will go out and do exactly what we hope it will do um which is pretty neat right and then the nice thing is um um we can you know keep adding things like this quite easily so it's a nice way to develop so get used to F strings they're very convenient the last thing I want to cover is a little bit about formatting and really as they relate to uh numbers um and strings together so I'm going to just uncomment a few things here so here we've got a number variable called four and here we're going to run it and you'll see that that's just the decimal or I'm sorry yeah decimal that's the that's the normal like decimal like base 10 instead of decimal like with a point um you know base 10 means decimal um it's formatting it as a decimal so if you got something in like a different format and you want it to be base 10 this is a way to do that um uh that that's all that's going on there but then where that gets really kind of cool is we can give it different formatting options in this F string and we could actually do the same thing oh I need the four back um oops don't want that that's just the uh so b means binary and we're going to see it here actually where it says okay this is this is the four Val if you recall back to our diagram here this third one over is the four so we got four 40 0 or 1 0 0 to represent four so 0 0 would be one or zero 0 one would be one zero one Z would be two 1 one would be three and then we increment to four so you can actually convert to Binary just by putting this this little coal in here and giving it a format this continues uh this continues I'm not going to go into hex uh hex hexadecimal is basically a shorthand for decimal um um and you'll see it uses 16 bits to represent each character so it'll go basically 0 through 10 and then uh a through f is the way it does that so instead of going zero you know one it will go through that it's but it's just representing binary it's it's actually uh 2 to the E each one represents a bite is what what's going on on there um what's what's useful for our purposes though is we can use um expon we can use uh some of these formatting options to do things like um exponential notation uh so here we got the number 44 and we can have it it it'll basically give us you know this is a really huge number sometimes we want to use that um we can print out the um many manyi decimals if we want um so same thing here it's an integer four but we're telling it give me um a floating Point uh or fix Point notation where there's six points of precision by default and we get exactly that um we can actually tell it how many uh uh points of precision we want so if we do the same thing here with four and we go to F point 2f it's going to give us just two points of decimal uh out here so you could do you know format to tens or you could also use this to convert to percentages um things like that um and then lastly I think we've just got one other where it does the leading zero uh I think is the point of that last last example but there are many many examples of string format down out there the point being is this is all taking the same information see it's padding it with with zeros there it's the same information all these are in a number called four and it's just treating them differently in the string formatting function so that's a bit about uh information uh storage and um and some string fun functions that you'll want to get very very familiar with um for those of you using the zybook uh it's in there's quite a bit on this in chapter three I want to say but really just look up string for betting in Python if you don't have access to the text um or are watching this after the the text expires um plenty of references out there uh ju you can just do about anything you want with these F strings that you might think of I should say um so uh that's kind of it for uh binary and data representation and strings please let me know if you have any questions