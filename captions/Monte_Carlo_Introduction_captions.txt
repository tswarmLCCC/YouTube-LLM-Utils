hello I've got some supplementary material for all of all three of my uh computer science classes here uh in at least at least the spring of 2024 um regarding your final projects um I I want to cover this idea called Monte Carlo simulation a little bit give you a little bit of bit of background and examples of what we'll be doing um in in our different finals there's two different kinds um in in in some of our classes we'll be doing a basketball problem where we will uh be simulating the idea that we uh have a certain amount of time left on the clock in a basketball game and we're trying to decide whether it'd be better to shoot a three-point shot or a two-point shot um and uh and and and basically model out and program how that might play out over um many many times um and then in our other other classes uh we're going to be solving a little bit more of a complex problem in which we take a poker hand uh and uh and randomly um um uh draw cards from that and count how many times um each kind of of some of the hands naturally occur given a five card draw from a 52 card deck this one of course involves you know some object-oriented programming uh where we'll model the cards and the hands and things like that but both projects uh cover this idea and they run on on top of this concept called a simulation which um probably is is a fairly New Concept to a lot of us um it's one that's very very common though uh in comp in computational thinking and computers particularly in data science and statistics you'll run into this quite a bit um so I I I wanted to write a quick unit um there's nothing required out of this other than the final of course which is already required but I wanted to give you a bit of background in some example programs they kind of do this in both Pi Python and C++ here uh so that that's what this is about so you'll see this unit overview pop up on your shells shortly after I record this video um and again there's nothing nothing you have to do for this unit but I strongly encourage you to work through some of these um I think it'll help and hopefully it informs some of our uh discussion boards going forward which is really kind of the point of those as we've been going uh where we'll start to interact with each other and start to design some of this stuff a little bit more um so uh on top of this unit overview which will live usually probably within the final project designed in your shell or final project there'll be some uh Pages like this I've also written a quick little page um just on uh what Monte Carlo simulation is um so just read through this um and I I'll cover this in a bit with a a small slide deck as well um but the idea is uh that we we we take uh something that occurs n uh in in the real world and instead of trying to solve it statistically um with probabilities and things like that we actually just kind of brute force it where we use the power of a computer to run many many many many uh what are called trials uh uh and um and assign Randomness to the thing uh to uh help us maybe kind of see how these things kind of shake out in the real world um so and I'll go over this in code a little bit better um but uh this kind of explains that a little bit as well this slide deck that I'll I'll get into in just a bit here actually probably right now let's go and bring that up so uh let's see let's go into like this yeah there we go and um so simulation in general is this idea of modeling um a system um typically over time um and trying to build it uh build build enough of that system um and think about enough that system where we can represent it with a computer typically a loop uh is how we do this although certainly we use if statements and things like that as well but the idea is like for example if we had never never discovered pi uh in in the world the pi not not like eating Pi but Pi like how we uh you know compute the area of a circle if we'd never discovered that you know um mathematically how might we go about figuring out the area of a Circle well one way that you may not think of intuitively but it turns out is a very uh kind of cool way to do this is you can uh basically take take a square and represent a circle we just draw a circle within that square um on our computer um and it's got you know a known radius and things like that uh and then we just uh we can fire a bunch of little dots anywhere in the Square not the circle but in the square and in doing this what we need to know is be whether a DOT fell inside or outside of that Circle which we can figure out with a program and then by taking the ratio of what fell inside the circle to the outside in inside the square but not inside the circle uh or I'm sorry it'd be the entire Square uh but the ratio would be the area right um is one way to do that uh and there's a few videos on this actually in the in in the uh in the page I just showed um but it turns out uh that this is a great way to handle a lot of complex systems um games can be handled this way we'll go through like a game of craps that'd be handy for our our basketball simulation folks uh um and or we can do things like uh model cards and just randomly draw cards uh and uh figure out how often we can get three of a kind that's what we'll be doing is writing these programs that kind of simulate a bit of reality um and then then uh using some Randomness uh to add the variation that occurs naturally and getting get a better idea of what happens real in reality the nice thing about these kind of simulations is that um we can use these to um we can build a model based on these things and we can play with uh certain parameters for example um that that uh might affect reality and see how they they play out as well uh one example of that is uh and we'll go through this example as well in a business problem we might want to know how much of a say we're selling computer screens for example and there's a certain there's a certain amount of lead time it takes to get new computer screens in well how many should we keep on hand a given how many we sell in a given day so we could write a computer program that says hey we're going to start with 50 of these things just randomly right and um on day one uh we're going to sell like six of them and on day two we're going to sell like one of them and day three we're going to sell like 15 of them well we could hardcode those in but that's not very useful instead what we can do is say randomly from like 1 to 15 how many did we sell right and then as we get closer and closer to zero we need to reorder some right well the idea then is that we can um then order some and say how many should we order and we can with that number and say should we order 50 should we order a th should we order two right where we don't want to run out but we also don't want to keep too many on hand so we can play with that and say okay given the uh random randomness of of how um how you know the computer screen sell how many should we keep on hand in general and by Rand randomly running through this system thousands and millions of times we can say Okay given a policy of like reordering it like 10 how many times did we run out what percentage of the time did we run out how many trials did we run out in versus 20 where it might cost a little bit more to keep those on hand and they might depreciate more but we run out of them less so we can start to play with that idea um so we can kind of model these complex situations and do this and that's what we do with mon Carlo simulation and what we'll be doing here uh with this with our our final projects so that's kind of why we're doing what we're doing um so uh um like we said we the key to Monte Carlo simulation is using random numbers uh to generate outcomes um of course you know this is based on Monte Carlo the city where roulette became a thing and they wanted to figure out how many scenarios where should had read bet on red or black things like that um and we'll actually do a a game of craps here in a bit with a Python program um so the main thing that you need to do is to model the problem you need to Define your problem and model the problem um and that's what that's the key part of what we'll be doing in our final so defining the problem might look like something like um you know um first we need to model our deck of cards um and to do that we need to model what a card needs to hold and then we start to model what is three of a kind things like that so we we we designed this model and then we we find a way to say given the outcomes of a trial we run the simulation many many times uh and then we kind of you know look at the thing and say does that make sense for example if we run our basketball program and for some reason it makes sense you know to shoot a three-point shot 100% of the time we might have might know something's wrong because we'd expect some Randomness in there excuse me so uh much like I started to allude to um the poker hand one in particular uh uh the the state of the system is our current hand of cards right we're going to basically draw five cards and evaluate them um uh these things occur when we draw cards from the deck and of course the probability of each card uh the first time is 1 out of 52 and then there'll be one out of 51 the next time because we don't replace the card so we need to model that into our program where we go you know 52 51 50 49 and 48 right we're going to have less and less of these cards each time but we'll randomly generate those uh you might want to you know consider uh write writing a shuffle program or random draw program or or function to to help with that um and then we add those to the hand right uh and then um each hand will need to be evaluated and this is going to be a solid programming exercise in its own right right where you know evaluating is is it does a hand only represent a pair or is that pair part of two two pair or a Full House or something bigger um that's going to be a bit of a programming assignment in its own right and as a matter of fact I think that's a great place to start with our with our uh poker uh programs is once we cover object-oriented programming uh maybe we hardcode some of these things in um and start to design that part uh you know with if statements and say okay I'm going to literally give you a a royal flush do you evaluate it properly right we cover unit testing very recently uh in objectoriented programming um at least uh I recorded it very recently you might see this before we get there but write some unit tests uh to say hey I'm going to give you two pair do you identify as one pair or two pair those are great ways to start building out this logic and getting a function that can take basically five cards that are again modeled in with you know as a card with object orate programming and evaluating them against each other and saying hey does this thing expect do what I expect and then we can plug it into the bigger simulation that's what we mean by modeling right um so that's kind of I think everything that I had in the slide deck but there's a similar thing we can do with um with our with our basketball program right we could model um okay obviously the three-point problem is not going to be too hard the idea there is that we just let the time run down and take a shot that's going to be a very simple functionality function of probability but even then you'd want to say okay if I run um a three-point shot and I've got a 30% chance of making that does it run around 30% when I iterate it a thousand times that'd be a great test to make sure you're using the random number generator correctly and things like that right um so just think very um very small and build up here that's really the key that I want from all of our finals is that you you build these these smaller parts and build a bigger program that's really the idea and of course you can come talk to me if you run into any of that um so I'm going to go through a little code here this won't take too long but and I'll provide all these programs as well in our unit um as soon as I'm done demoing in here none of these are used in the final uh but um the idea is to get you kind of familiar with some of them and some of these uh models might be very useful so the first one uses list comprehension which is basically a for Loop uh that that uh so this we've seen the Loop put up here before but it turns out you can actually just do um you can make lists like this as well so Random here has a random in integer uh function uh or method that grabs things between one and six and it's going to do this um for each each iteration um in the range of number and rules so in this case we're going to run it a thousand times that's going to get passed into number of roles here um and then passed to this so this is basically going to give us a random number of uh uh uh integers ranging from one to six and it's going to give us uh a 100,000 of those sorry I think I said 10,000 earlier that's what that's how to read this line is give me a 100,000 of these things um and in a list that's you know we're returning a list we can see that here um and this whole thing says give me 100,000 integers from 1 to six and that so this does all of the simulation in one shot which is a very shorthand way to do it kind of a fun way to introduce it but that's what going on there and then of course we just print out um you know each one of those and how often they occurred and we would expect them to occur 16% of the time or 16.7 and we see that that certainly happens and you'll see these numbers change as I rerun this program right which we would expect this is Randomness but we're seeing that indeed a random number generator does tend to give us you know each of these in a random you know a uniform distribution where we'd see the same number with equal probability that it's a good test of a random generator that it demonstrates that kind of stuff um let's see what's the next one I want to cover I've got several of these give me just a sec I want to keep them in order uh the next one and probably my favorite one is this Mony Hall problem so you'll get this you can read all this but the idea is that um uh you're there's an old game show that was on when I was a kid and I think it you could probably find reruns called the money Hall problem and uh it's named after the host Monty Hall uh where you'd have three um you'd have three curtains and basically one of them had an okaya prize one of them had like a great C prize like a car and then the other one like had a goat it was always kind of funny right but there was a bad prize so um the uh the idea is that the person chooses one uh and um and um the the host will open a another door so like say if I chose two the host would open one or three right um and uh so you could at that point you can switch and uh you can switch to say should I choose the stick with what I had or switch and the question is should I switch and you think that it wouldn't matter right you think it doesn't matter because no matter what it's one out of three uh of getting the good price but he always chooses a bad priz and it turns out if and I give an explanation here um which is kind of a fun thing to go through I don't want to beat this problem to death I want to show the code instead it turns out you do want to switch because what happens is he's giving you more information by showing you one of the doors and it turns out you should switch you'll have a two-thirds chance essentially of winning the better prize and we can simulate that so what we do here is we basically um we we take uh in this case we're taking the number of games in I might just simulate one game instead and then Loop through that but the idea is that the car position is randomly zero one or two here and then the player choice is z one or two um and then the uh the he re he reveals the goat basically if it's not the Player's Choice this is the key line but the point is we're simulating all of this and you can go through the code and kind of see how it relates to the explanation up here um but we can figure figure out instead of doing this probabilistically we can we can do this with stats and as a matter of fact that's what's explained up above but in turns out what we're doing instead is we're running this in this case a 100 times I think it's more than that nope it's 10,000 times so we simulate this and we see how many times should I switch and it turns out switching gives us a 66% chance of winning the car uh where staying only gives us a 33% % chance and that matches very closely to 2/3 and 1/3 which is our theoretical idea behind this um this is a really fun one to go through and this is a decent one for our folks that are doing the the um the uh the the PO or I'm sorry the basketball game to stady because in in th in that one you're going to need to model kind of what what can happen with Randomness so in that one we might he say okay if if we choose a three we have a 30% chance or a third third per chance or whatever you decide to assign to it um and how many times do we win there so this is a decent model for that one um but the idea that you'll see these numbers change as well we're doing this with Randomness and just firing off huge amounts of numbers you can see it hovering right around there but the idea is if we do it over and over and over again and we model it correctly we should get a pretty good idea what's happening in reality and that's the cool thing about computers is we can do this very cheaply and that's why simulation becomes very nice uh very nice and a way to do that you know another way I like to think of simulation is almost like what if video games could play themselves right and you had a really good video game that mimicked reality you know kind of like our Grand Theft Autos of the world and things like that not reality but you know kind of some stuff like that where maybe it did uh did uh uh mimic reality and you could you could change a few things in there and run thousands and thousands of of uh of iterations and say what if what if I don't know you know I can't think of an example in CED Theft Auto real quick sorry but I like to think of it that way where we have things in a computer program interplaying with each other and and we we get a basically sandbox to play in and we can run wh if scenarios over and over again speaking of what if scenarios here's the inventory problem that I was talking about a little bit earlier this one's a little dumber than the one I was going uh um on uh cuz cuz I didn't write it quickly or I wrote it quickly but it it's not as as detailed as I would have liked but the idea here is what if um we um had a uh we're randomly going through um uh you know an inventory where we run out an inventory and we restock it uh we have 100 initial and we restock at oh goodness I can't remember when I wrote it but it's hardcoded in this one uh oh it's actually between 30 and 50 is what it is we randomly restock between random and uh 30 and 50 we can see that even doing that we're going to run out some of the time right uh so if we change this to like 20 and 30 we'd get different results um so we can kind of play with reality here and say oh if we do it between 20 and 30 it's a slightly better uh yeah slightly better scenario where we uh oh I'm sorry it's worse which would be be expected because we're going lower right we we run out of the time 24% of the time um so that that's kind of the idea there uh is is that we can play with different scenarios of what if cases in a business scenario here play with that so um that's kind of a fun one to illustrate the power simulation I don't know if this one would be very useful for our final um let's see and I think I have one other one oh I have two other ones uh yeah here's the circle one so what we're doing here is a essentially doing exactly what we're saying where U we're basically making a circle here um and using the area of a circle formula um to estimate Pi so um essentially we are F firing off in this case uh let's see that's a million samples a million dots and firing it into a you know kind of the square thing let me let me draw that for a sec h no I'm not going to draw it but the idea is that uh well yeah will draw I will draw it for a sec let's let's grab the pen uh pen software here I don't use this enough anyway let's see how this goes hopefully it goes well so the idea let's see let me grab a pin here I need to figure out give me one sec because I need to turn on my mouse because I can never do this without a pen so the idea is that we let's see if I can draw a decent box here something like this not the best box and then we have a circle this is going to be even worse well to estimate Pi not the best Circle ever but the idea is that we randomly fire uh uh dots a whole bunch of dots this should actually be touching here by the way I didn't draw very good dots just randomly and what we can do is we can count these kind of dots and say those were in the circle those should count for the area and the uh divide by the whole all the dots so the idea is we fill the whole thing up with dots and the ones that land inside the circle we can count and and count and figure out the area it turns out we can do the same thing for like a star let's see if I can do this a little quick more quickly or a triangle say we didn't uh like we wanted to do something like this where this thing would be a little bit harder to compute the area on but we can use the same thing where we we do Dots here and we figure out what is the area taken up by the star in here right so the idea is that we we have a way to model this thing uh in a computer and by without trying to figure out the math of how to do this you know with triangles and whatever trapezoid would be in here U or pentagram I guess it would be um we could instead just fire whole bunches of dots and just count using just straight up Brute Force in a computer to uh kind of figure out the area of these things um and it turns out this is a very useful technique to for solving um you know the area of of uh of kind of obscure or or hard to Define shapes is that we can just count dots like this and count up what's in here uh versus what's in the whole thing to figure out that area very handy technique to know um I apologize for my drawing skills but honestly I'm kind of glad I did it uh so let's save it ex I don't want to save this let's just kill it with fire instead there we go and then the last one is that the last one oh nope craps uh let's see the CRA I think it's this one so if you're unfamiliar with the game of craps um basically it's a it's a it's a dice game uh where you roll two dice and uh you have What's called the come out roll and I've I've never played the craft so I'm kind of literally going to read this to you but I I've seen it on TV a couple times and it seems to make sense where on if you roll uh you're betting uh basically against a dealer right so you um if if you roll a seven or 11 right away you win um and if if it's 2 three or 12 you lose so there's probability involved in that of course right um but if the uh if if if this first rle this come out roll is not 71 23 or 12 um any of these numbers that becomes the point and the idea then is if you roll the Point again before rolling a seven crazy rule I know you win so like if you roll an eight and then you you just keep rolling and if you hit an eight before you hit a seven you win if you roll a seven before you hit the eight you lose um so you just kind of keep on doing that so we can simulate this and this is very a lot closer to what we'll do with the basketball game where you need to comp you know capture the initial state of that first roll um and then what you'll need to do in the in the in the basketball game is kind of say okay if we foul there's a certain you know the other team shoots and they might make it they might not there's some Randomness in there and there's some time that it's going to take for us to go down the the court there's some Randomness there and then we'll take another shot which again is like our two-point shot and we can play that out and the the key thing is that time will keep going down right um in that um and and I I uh and and so that 30 seconds will tick down and uh we we we'll basically figure out an outcome one way or the other based on that as as as we play that out not too dissimilar to the way that second thing happens where you know if uh if we don't roll a 7 11 2 3 or 12 we have to play out this second scenario with a little more logic so you know we'll have basically some if statements in our Loop so we've got our Loop here and then our if statement within our Loop kind of describing the rule of our world um and then as we uh as we go through that we will um we'll play out um we'll play out the uh number of games so in this case we only have a loop a small rule set within our bigger our bigger Loop but in our basketball game we'll have to also Loop through our time right each time so we'll basically model one game again um so and and this is what I'd recommend you do you basically write this as doing one game um with all your probabilities defined and things like that and maybe we can work on that in class as well uh where we go through one game and say okay you know did they shoot a a three a two and watch that whole thing play out um is kind of the idea and then once we get that right right we'll take that program and stick it into a bigger Loop and do our statistics so anyway uh here's how craps you know turns to play out it turns out it's very close to a 50-50 game um I think it's actually Pro uh if you do the actual math you're slightly favored it's one of the only gambling games where you're slightly favored um and so we can kind of play that out looks like I've run it four times and two times it was in the players favor and two times it wasn't now it's three and three and now it's four and five something like that so you can kind of play with that and see how many times when we r or we can also of course instead of doing that we can up our we can increase our number of um of games so it'll take longer so we're going to go from a th000 to 10,000 and uh we we should get more stable results uh when we do this and we're seeing that a little closer and then of course we can even go even bigger um and eventually you're going to see that pause there I'll do one more just for fun eventually if we make these things too big they take just just a little bit to run but we run it a million times so some great examples of some simulations um to from which you can kind of start to study and vase your code please don't just alter these though you're not going to get very far doing altering them I want you to more have a better idea of what they're doing more than anything and that's why I went through the walkthroughs and I'll provide all this code in a zip file for you uh probably here even before Spring Break um with the idea that maybe we can study these things together and maybe come up with a strategy on how to tackle that final so uh I hope this helps a little bit clarify some of the things and if you need clarification on the rules or anything like that that's another great use of our forums um on the for the final so anyway that's that's what I have just a little bit on Monte Carlo simulation what it is and how we're using it to tackle kind of some fun problems at least more fun than you know hello worlds and and you know uh you know uh adding up employee salaries and things like that I hope these are a little more interesting problems than those um but a great application of computer science and one of my favorites okay enough of that uh I'm going to stop the recording but please let me know how this goes for you and what you're thinking thanks bye