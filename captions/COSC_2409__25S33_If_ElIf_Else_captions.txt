so now that we've studied uh expressions and while Loops we go get to get a little bit simpler here uh for the if statement uh the if statement is kind of the building block of control flow um or control structures um and usually I cover while Loops after if statements but they they work very similarly they just have slightly different Behavior about their code block right um in this program um we're using um a an input function um that basically uh it will prompt the user for a Char any character and then we convert that character to an integer um as you probably know if I put like a in here it will blow up the program because it's converting it to an integer here um and the reason we need to convert it to an integer if you recall is we we get different Behavior if we compare numbers to Strings which the default uh the default um uh type that is returned by the input statement as a string so we need to convert it to a number with the integer function excuse me the integer converion function and then we assign that of course to the variable X um so again just like we did before we have an expression in this case it's a comparison um uh expression and it takes X and it Compares it to just to the constant zero um so let's talk about the colon and indention here I I I glossed over it with the while statement but basically you have your expression this is the the you have the control type which is usually if while or for um and then you have an expression and then you have a colon which is denoting basically saying I'm starting a code block unlike other programming languages which you use uh curly braces for these kind of things in like C++ or Java um we use indents and um the indent here is usually four spaces I don't know if you can see it on my screen here but there's actually four spaces here that's what tab is set up to do I'm only hitting I'm I'm hitting tab here um and getting four spaces um but that is different than the tab character some versions of python will let you use either but the main thing is that they need to line up and they need to be the same characters so if you're getting something wonky about control statements check to make sure that you've got the same type of tab there it doesn't matter how many there are as long as they're consistent um you'll get an air if you do something like this this where if I do like this this is actually not the error that I change after I changed it to three it's because there's no new control block with a coal in here starting this one before four it's thinking this is a new um basically uh um code chunk a new control block that has no control to it no if statement or while statement or or things of like of the oak um a lot of the times in modern idees like Visual Studio code here uh certainly code space if you're continuing with GitHub classrooms um tab will do this for you and if you hit enter it will just go to the next line here but you need to be aware to get out of this if Loop you go back right you just hit backspace you go back and that will start um basically go back to the the the parent the parent control block so basically this I I know I keep saying basically sorry it is basic but um I'm running out of adjectives here the idea though is that this only only exists within the context of this window um until it's done with whatever it is um so going to the if statement itself it evaluates if this is true or false and if it's true it will execute this code block if it doesn't it passes on it it passes on to the next thing we've got a different version of an if statement called an L if statement or else if um and it what this is doing is saying if this failed try to execute this one so this does not execute if this passes you'll never get to this code if this passes there's other ways to do that mainly with another if statement and I I'll demo that in just a sec um this only enter it only tries to evaluate this if this failed and everything else before it failed um and then it'll evaluate it and if this is true it will go into this code block the same thing is true of the next one if this and if this sorry sorry this and this failed only then will it evaluate this and if it's true it will go into this and then we get a different kind of control statement again so we've got the three varieties we've got the the first case which always starts with if the second case which you can chain as many l ifs as you want and then and and uh and then you have an else statement at the end that catches if everything else fails it will do this one if everything else above it fails it will do the else statement you notice there's no nothing to evaluate here because it's evaluation triggers only if all of these were false if that's if if all of these were false then this gets uh this gets executed the else and the L if statements are optional you don't have to put them in but they're there to handle different kinds of logic there's one other variant here that you can do um which basically is something like this let's let's just grab the same uh the same program here and I could do uh like that um where it does the assignment let's go ahead and do this but instead of the L if statement I'm doing another if this is a little different um and let's go and do let's go and grab the the the single as well um this is a little different than what we just saw let's do something like this let's do let's do [Music] um let's change these to some um let's change these to some uh greater than signs so let's say if it's greater than zero let's just do a label where it's greater than zero and if it's greater than one let's just do greater than one like this the difference between this statement and this statement is these if and let me get rid of this too because that that's the point of what we're doing here these if statements will always fire they will always evaluate so um this one will basically say you know is it less than zero then we we do this assignment if it's greater than but this will still evaluate um even if this was true it this will still try to now it won't go in here if this is less than zero because of the logic um but only because of the logic it will still try it'll still say you know is is X so say I put negative one in here well let's go and fire this up uh let's go ship this off to python here um so it's uh why didn't I get a did I make I made some sort of error here uh I messed something up I broke our code guys give me give me a let's let's uh why are you not liking things expected in xal to zero uh try that I wonder if I messed that up just when I was typing it in let's try one more time expected indent there is an indent there um I'll have to figure that out but I can still explain the code and you'll see that sometimes I don't know why I've I've seen this before where it goes to the terminal and I think it's related to that um where I've messed something up uh in this but if if we were running just this program let's go a and do that actually let's just make a new program because that should work a little bit better just do a scratch here oops uh oops scratch. py I hate when I mess these up okay so let's just run this guy what am I doing wrong here guys I don't see the a immediately but we'll come back to it um the point being uh and sorry I don't have a demo already for you I'll test this and maybe come back to in the next video as we go into more complex uh if statements is that this let's say we put in negative one negative one here of course this would pass so we'd get the assignment the assignment operation here and it'll go to zero uh which doesn't print anything out kind of boring uh but the point was being is if if this were let's say it's it's we put put uh 0.5 in what would happen is this would evaluate then so this would still evaluate down here um and it would say um it would do the greater than equal to zero here because this is true and then it would still try to do this and it would say um is X greater than one and of course it's not if we put 0. five in um and it would say uh it would not do this so you just wouldn't see anything there um the uh the the the but if I put like five in here then this and this would be true so it's it's it's not like let me go back to the control flow it's not like this one where only one of these operates um and in fact that would be true um in this one where it would only choose the first one that was true um so if I did the same thing like this where x equal to or greater than zero and then greater than one and I put five in it would only print zero because the L if only fires if if everything above it was false in this case though we're not using L if it will do treat each if independently and we'll see another uh version of that here down with the Lang or match uh when I come to that uh but uh there's there's ways to handle that namely the break statement that we'll talk about in just a bit but uh just be aware of the difference between L if and multiple if statements like so and of course you can chain these right if I if I wanted to say you know something like oops um I could do something like this where I do if x I don't know if x uh is well it wouldn't make any sense to do it there let's say I did something to this end I could print single and then I could do something like if x is greater than five I could say and also greater than five right the AI did a little work there for me so when I when I do this it's basically entering a new control block you can chain these um but you notice this is within the indent here this control block is executing only if this happens this whole thing will run and then it will do another one of these where if this is happening it will go in here so that's how we can chain logic together and you can do that as much as you want you can call functions and things like that as well so uh just an in introduction to the expression part of our if statement the indention and how uh if and L if are different and then the else statement itself um so hopefully that all makes sense play with that um again use use you you know plug things in like I've tried to do here um and um and uh see how those things play out see and again this is where flowcharting or just keeping variables in in your mind or um the uh the debuggers that that I've hope uh that that are introduced uh in the uh getting started videos um uh those all come into play because you can trace where you're at and you can see each step which is super handy so um anyway enough of that we'll we'll move on and and touch a little bit more of that in the next unit