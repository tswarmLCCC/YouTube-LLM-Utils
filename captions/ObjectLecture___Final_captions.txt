okay was that yep the transcription is working we're sharing the screen um uh bowy and I uh started talking about the final a little bit during these office hours so I fired up the recording and uh what we're using here is a a program called repet uh to share his workspace so he's working on his laptop here and we have it on the board as well so B has been gracious enough to kind of share his code here a little bit as we work through one of the main parts of the um the poker program which is handing off objects from one to another so just a little background thanks boui for hanging with me I just want to give some background of where we were so what boui has here so far is he's created a card uh a card class and um and it's got simple stuff it just has places for the the suit in the face and then a print method that that um can print things quite nicely you as you can see in our output over there and then he created a deck a class on his own um where we Loop through basically the the CL the the suits and the faces and create a bunch of cards in this case 52 of them and they append them to a list in his class called my deck and I think all this is a great approach to this program um here he's printing those out every time uh in when he calls his store method he's essentially wrote a Constructor there uh but just by a different name he calls it explicitly um and we print out the length here actually I wrote that now that I mentioned when we were testing it just a little bit ago but we have a print method that Loops through them and he's got a deal method here that we're working on now um that the deal method oh and he's got shuffle a shuffle class where it shuffles the card and we demonstrated that just a little bit ago uh if we got that U we can run it again here in a bit but the point being is that we did see uh it looks like oh here it is we did in fact see at one point um the randomness work um we lost it on the on the web browser here but uh it that's that's no consequence this Shuffle basically calls random do Shuffle of the deck which is built into python forest and gives us a randomization there and and now we're working on this this deal uh this uh this deal uh uh method that it's going to basically give us a card and we're going to put it into our hand um and uh Val correctly identified the fact that pop the list.pop method does two great things for us first of all it gives us the card which is the key thing uh but it also removes it from the list which is also a key thing and that handles our requirement where we want to draw these things without replacement so once Bow's uh done this pop we can't get that same card again so we can't get two of the same card in the hand which is all great great stuff so good work bowy um and we're GNA keep working on it yeah so uh one thing bowy uh we started up here on line 28 to write a deal function and then you wrote another one why don't we just get rid of the one online 28 here you see how we have two so we don't we we don't need two yeah you got the same thing on line 34 is my point yeah yeah that's fine so um boui uh is doing the pop on line 35 here that we talked about storing the uh the object of a card uh in in in the case here it' be the very last one um in um in in a variable called my card which holds a card and then he's returning that so then in the hand um AI is uh basically grabbing uh he's trying to append he's got a list here called my hand which will be a lot like the deck it's just five instead of 52 and he's trying to append it to an empty empty list here and he's very close um but that's what I just wanted to give some background of what we did today uh and and and uh some steps that you you might want to take on your final as you write this stuff um so one thing about hand here um is it does not know a thing about your deck it does not know that deck exists right we can do it um and we will do it down here in the main program we have a deck down here and we have a hand that we're starting to work with um but the the the blueprint of hand does not know a thing about the deck that we're dealing with lit literally dealing with in this case yeah so how do we fix that how do we let it know that how how do we get access to the deck here do you think no it's already in the file we don't need to import it it it knows about the blueprint it knows about the type but you've got a deck object sitting out down here right yes so we make a deck here but this doesn't know about it when you make a hand here it does not know about that deck oh right yes it doesn't know about those 52 cards that we've got hanging out there and it certainly doesn't know about its deal method yet how can we get around that do you think I don't know that's okay that's okay you can pass objects to functions you just use them as variables so what we can do in this case we're want what what we're wanting to do is we're wanting to basically do this work in our Constructor so if you put a comma after self here right after Self it's going to be another argument and just say um like deck or in deck maybe like I in deck so we can keep it a little separately that's fine yep deck in basically it's what I'm all I mean by that is it's the deck that's coming in right so now now we have a a deck coming in and it's going to we're going to say this is a deck and you can replace deck. deal with deck in. and go and save that and we might need to tell it what kind of let me see how I did that one sec I'm not sure the syntax of that off the top of my head um let me bring up my code for that just give me one sec grab I've got a solution file here that I wrote and I write them for this because I often forget little things oops I don't want that one wrong one give me one second need to log into the right one uh see yep that's the right one put is the question it's always the question well I've got a copy of the DS code let me just bring that up instead e e oh I see I did a little bit differently um that's okay H um this should work I don't know why this isn't working um what don't you I should try to run it real quick oh it's not work okay you already did I see um let's oh it didn't yeah so that this is I you just changed but it fixed that I want space Oh that's interesting I I wouldn't think that would matter but now so now we've got a hand here so you've done it um what's going on here is I don't know why that SP put the space back in for just a sec yeah that's weird yeah and that's okay going this eror makes sense and I'll explain it in just a sec so now you've got a way to take a deck into a hand and what's going to happen is you're going to pin that one card we'll we'll work on that a sec so if you go down here you'll notice when we make the hand here that's that's red why because it it now it needs a deck to build itself right yeah so why don't you you've already got a deck there why don't you just put the deck in there yep right where you're at nope nope in in the parenthesis so now it's t this is its Constructor now its Constructor is taking on line 65 nope not there on 65 yeah but lowercase because your deck is called lowercase deck there right yeah so do you understand how that's working in the cost 10 be transort in so use the de yeah so let's just kind of blow chart through this right on line 56 here yeah we're building a deck yeah that's doing all the stuff that you've all you've been doing it's doing 52 cards it's doing the shuffle up there yeah actually it's not so you're you're building it U empty store creates it for you um so if you hadn't called store it would mess it up we might want to build put store in the Dex Constructor so it always does that right that might be nice um and then we print it and that's what's going on on the right and then we Shuffle it and then we're doing the links after we do this deck. de why don't we get rid of deck. De here on line 62 so we actually don't want to do that and uh goad and comment out 61 and 63 as well just to unclutter things for a little bit so now on 65 we've got that deck what we're doing is we're taking that deck that we build in our main programming and we say hey hand we we need a we need you to build a hand but you need a deck to do it we're giving you the deck we built yes right so now we we have that and then in our Constructor up here um in deck or in hand um it it it says and it says hey I can I can do that right so it's actually going to append one card into my hand so down here why don't we test that now that you've got and you're already doing it you're printing it why don't you run that let's test it out so now we can see on line 66 that we have a card object it's it's not prettying like we want it to but we can see that it has one card in the hand oops we lost our screen it'll come back just a sec always does hopefully yeah there we go so um that's great right yes that's pretty cool but how represent the car well how do we do that card's got its own print card method doesn't it didn't we make one of this did we make a print of the card sure we did on line 10 here right so what we can do then is in our um two ways we can do it we'll do it down here in the main function first so you're printing the hand first um but instead of doing that um why don't you do um we'll make a so you're you're printing self do my hand why don't we change the print function in online 46 to Loop through my hand and print the cards you used the little AI there but that's okay I think you knew it I think you kind of had an idea what's going on there oh that is yeah but we don't want self. card we don't care about that so let's get rid of self here um in the four statement on online 46 yep right there because what we're wanting is actually just for the for Loop so self again refers to the member functions of the class the things that the class actually owns we don't want this for Loop this is just a little temporary copy of the card just so we could print it out so why don't you and and then we're going to print the card and we're going to use it my print function so uh on line 47 so like this we're GNA do something like this um Y and we actually don't even need to print it because we're printing that up here right this is actually printing it to the console so we don't need to actually print it here we just need to call that function like so right so I'm going to save this real quick and let's go down here and then where we're getting ready to print this we're going to just let it know that we're printing the card now when we run this what we should see is that one card it get ready and it's grabbing that one card from from the heart that is awesome isn't it cool how that all gets moved around I want you to study this bow and and please everybody else as well study kind of what you can see here from B um but the idea is that it's getting it's moving things around here and we can start to not worry about it anymore right we don't need to worry about printing the stink card like this every time we do it card just knows how to do that now we build it and it goes away the main thing that you guys are probably going to struggle with this is why I'm really wanting to record this help bow you directly as opposed to letting you guys struggle this is the idea that you can move things around like this so any function uh can take objects and in this case like we're doing it with cards mainly um oops um don't know what I did there uh give me back um so in this case we're doing that with it now I did it a little differently myself what I did is I wrote a a function of the hand that says uh get card or no I'm sorry I think I did it in I I wrote the deal in the in the debt class I wrote a deal uh thing that can return more than one card at a time so uh one thing we've got seven minutes left bii um instead of instead of um writing uh in the de class that we only get one card how about we get off F repeat yeah we could repeat it so let's go back up to our our hand class so right here we're appending one card right we're doing this on line 43 for those those of you that can't see my hand um how might we do five of these five one time yep but you say you worry about somebody will take turn to pick up you could do that but we don't care about that here yeah so you could write a method to do one at a time you could but um and Bow's got brings up a great Point what he said was you know maybe we'd want you know one hand to get one card and then another hand to get another card if we had two players but we don't care about that here oh because we're doing the simulation so we can go ahead and write this method and especially because it's in our hand class we just want five cards and even in poker you could just deal five cards to one person as long as they're random right does it really matter if the person gets five in a row or the first and the third and the fifth and the seventh and the ninth doesn't really matter as long as they're random right yeah so um why don't we write a little bit of a for loop around line 43 here to draw five cards instead of one go and look up how to do that um if you want to on like an AI or just Google if you can't remember how to get five things in a forland well there you go just did it colon there as well yep so go and try to run that now you have five cards oh understand there this BR is crazy helpful yeah isn't it neat so one thing bie can do as well let's go ahead and in your print class I'm gonna I'm GNA have you do one other thing actually I'll do it for you um I want you to be able Well what we'll do is we'll have another print method is what we'll do I'm just going to make another one of these and just going to call literally print two yes and we're going to we're going to change our print method a little bit we're actually going to go print card dot um Bas and card. suit and we're going to say something like this and I'm only doing this to show that you can get at these things directly in Python which is nice um so and I'll go and change the print down here to from print to print two in our hand so you can see uh that we we just basically wrote a slightly different thing to um just show that we can get it both either the face or the suit of the card here and we're going to need to do that to do a couple things like counting and evaluating the hand right because our next step is to figure out what kind of hand this is you know like right now in this in this in this particular hand we've got a pair right we got two Sev so we need to kind of figure out how to count those two sevens and say there's two of them and say this hand has a pair but that's probably something we'll leave for future yeah yeah maybe yeah I don't want to just work through all the code for you guys I want you to work on it a little bit bow you did a lot of work on this guys um he came in with a lot of lot of good work on this done and he asked a lot of great questions um and that's why I wanted to kind of give a few things uh away here mainly though the main thing I really wanted to lecture on um and thank you again B for letting me ose your code for this is this idea that um we can um can't really you can see the Highlight thing anyway uh we can pass objects around like cards and decks and things like that uh between functions and that's where we start to interact with things if you guys want go back to the unit we just did a couple weeks ago on objectoriented programming and study how there was an example in there where I had two fighters and like one would hit the other guy and when he hit the other guy it affected the other guy's hit points all I was doing was passing that object of that other guy to the first guy's attack method right you can study that for a little bit more of this as well but um good work on this biy and uh and um that's pretty good stuff and other question for the in back in the line 41 if I change to back in it cannot work right it must be e something something to pass the oh no you can call it whatever you want let me then yeah I mean you need to change it down here because you actually use that but this would work exactly fine yeah oh okay y this yeah yeah and B if you want to work in repet that's fine with me if you want to work here instead of vs code that's okay I know you copied it in for this but you yeah prer walking that yeah I'll show you guys something else that's really cool and also how I will totally bust you if you blav your eyes we can look at every single thing we did today here's where baji brought in the code he started to write if and he's like you know what I don't want to write that I'm going to copy my other codee yeah and then we can see every little change we made and this is how I'm going to grade next year for you guys ready yeah um well we're running out of time um I am willing to share one other cool trick I learned last night if you have time that's okay it's a fun way that handles printing better we'll do it another time though oh yeah all right I'm GNA stop the recording um and I'll post this to both 249 probably just 2409 because most of it's python um but uh yeah um good work boui you can all thank bow for that that stuff and I guess we'll talk more next week yeah see you yeah bye B