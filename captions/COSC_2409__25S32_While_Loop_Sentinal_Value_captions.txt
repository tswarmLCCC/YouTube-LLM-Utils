now that we've kind of beat Expressions to death um it's time to plug those into uh what we call control structures we touched on this just a little bit when I was doing the the first couple weeks work um uh with uh you know showing an example program and I brought that back up here just to kind of tie the two ends together this is kind of a complicated while loop and we'll go into a simpler one here but if you might recall uh what's going on here I'll go and send it to the terminal here um oops I always hit the wrong button oh no I didn't uh yes I did uh oh I need to do a as well let's do a a equals to one equals sorry I didn't bring it all over did I and it's a good example of hey you can't call things without it so let's it shift yeah there we go um so what we're getting here is of course a way to do the Fibonacci sequence right we're making two simple assignments um and then I I'll come back to this because this is the point of the lecture but just a decouple we can make multiple assignments uh you know at the same time so as we use this comma here to do two different Expressions uh we can assign those back to two different variables and we can do that with more than two as well you can comma separate those though so that's one other kind of um assignment operator uh that we kind of touched on um but um with this this comma and multiple assignments which is kind of unique to python I haven't seen this in too many other languages um but it's a nice way to start to package things up and move them around um or do similar operations I don't like this uh this one in particular but uh you know this example it's kind of cryptic uh but there's there's reasons why you would want to do this I suppose um just know that that exists there's this U comma separated type of operation all right getting into the meat of Expressions though or I'm sorry uh control loops um we're going to start with while Loops which is kind of out of order from what you may have had with me or other uh other instruction for programming I'm just going to get rid some wi space here um um we're going to start with while Loops uh just because we' started with one here um so what's going on here is this is a Boolean expression and that's why I've been hammering on Expressions so stinking much this could have ANS and ores in it so we could do something like something like this if we wanted to where e basically this whole thing will get evaluated and we could have you know we could do parentheses we could do something like this um so I don't know why you'd want to do that but you can combine a whole bunch of these things and using all of the operations we just talked about with the order of operations and the Boolean Expressions you could write things that are very complicated like this um and the whole thing will use those operations to basically evaluate the whole thing to a true or a false which is what drives the control block here so just to go I'm going to just contrl Z out of everything I just did uh because we don't need it for this particular algorithm um basically uh this while what while the while statement does is it says I'm going to give you a block of code a code block literally um that you will execute um while this is true so it will evaluate this first and if it's false it does not even do this once um then it will do this work it will do this work and it will go back and re-evaluate this and say say is it still true and if it's still true it will do it again um now you can you could probably even tell just by the way I explained it that you can easily write these to be infinite right um for example if I never did this if I never updated these things this would be what's called an infinite Loop and the reason it's an infinite Loop is that b is equal to one and it would evaluate is equal less than 10 um and it would just run forever right um let's go ahead and let's go and prove that particular Point not that it's fun because I got to figure out how to and you'll see something like this I'm going to try to figure out how to kill this now usually control C yep yeah know like there contrl C or control or I'm contrl x contrl uh Z or contrl C will usually be one of the commands to kill an infinite Loop so I'm going to clean that up real quick uh is it this one yeah clear terminal there we go and I don't even know why that did that so let's let's see if we can clear the terminal one more time there we go get to something a little more readable anyway the point being is that this always evaluated The Troop so this kept running until I manually killed the program the program would have never ended it's called an infinite Loop like I was referencing a little bit ago um what Loops are kind of known for this um so you need to basically use what's called a sentinel value um and a sentinal value is a variable or something else that changes U usually it's a it's a single variable but it can be a number of variables if we use multiple Loops here um that control the loop and they need to be updated within within the control block somehow right um and this this is a a far-reaching implication of what we're doing uh but um uh the the idea here let's let's go let's go on to our next example here just to illustrate here we have a sentinel value of one and we're saying basically while X is less than 10 just print it out comma separated just like what we did before um and as you uh I hope at this point uh oops I need to go back into python sorry always do that I killed python when I killed the uh the larger program so let me just clear this out there we go um let's go ahead and send that um again control shift to do that um we'll see that basically X is coming in it's doing this comparison and indeed one is less than 10 so it prints it out with a comma and then it increments our Sentinel value this is the key we need to do something with that to eventually get out of this Loop right um and that that depends on the logic of your program If This Were a game for example or something with a menu system that that Sentinel value could be something like does a character does the menu selection equal exit or does the game command meet say the guy's out of lives um there's a lot of ways to control that Loop to break out an of an infinite Loop um and it doesn't always have to be numeric like this so it could be based on user input it could be used based on you know certain data coming in some certain events happening from a graphical program but the the core thing is true is basically you're examining this and breaking out um and doing something within the code in this case we're incrementing the number to eventually get to 10 but that's not always the case so uh just an intro to the while statement Sentinel values and and controlling The Sentinel values there um I hope that's a refresher if that if that's four and let me know though okay um and uh and then um but uh the main thing to know is that there's an expression control controlling this thing um it usually contains something called a sentinel value which is a variable almost all the time um and then there is a uh a way to to update that we're going to cover another way to handle this uh without Sentinel values uh with a a control statement of its own uh but this is the preferred method and this is the one you'll see most often so all right uh done with that intro let's let's move on to if statements before we go to some other control statements