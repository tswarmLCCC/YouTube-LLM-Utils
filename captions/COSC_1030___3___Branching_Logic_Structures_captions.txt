hello and welcome back this unit begins um some um uh of the tools that really allow us to implement ideas and logic in computer science um namely this week we'll be talking about conditional execution um uh the main the main tool we use there is called the if statement uh we'll go into a few others uh a switch um is a is an offshoot of if statements and then we'll talk a little bit about string oper ations um just to expand what we talked about with types A little bit as well so there will probably be a separate video on that this week uh if we don't move it out uh and move it in with with strings in general um but it's it's a good place for it because the if statements uh by themselves are fairly uh a fairly um compartmentalized uh compartmentalized um idea in that you know there's uh not a lot to expand upon them they're a Cornerstone of programming for sure but um they they kind of always work the same way um so we'll talk about that and then we'll also talk about Expressions this idea that we started in the uh variables unit uh um and um that's the idea that um statements can be combined and and operated on to reduce to one value um uh in a previous week we we looked at how uh um Al uh numeric data and so in a few strings but mainly numeric data can be evaluated uh down to one number um with mathematical operations you know two and two you know evaluates to four that kind of thing and this week we'll expand on that idea and do the same thing with Boolean logic and see how uh you know combining uh two two facts for lack of a better term to two statements that evaluate to true or false how they evaluate so um let's get right into that and uh just a little uh you know kind of where we're at in terms of um you know the things that we're going to try to cover um at least at the beginning of the of the core of computer science here we're talking about Boolean expressions and and uh and ifs if statements uh also known as conditional statements um so uh let's start off and talk about what branching is branching is another word for conditional execution um and basically it's saying um it it uh it refers to a uh a part of a program a sequence of of of statements um that only execute if something else is true um if something else meets a certain condition um um and I'm going to uh let's see if we can actually make this a little bit bigger um just a little see if we can get these a little bit bigger here so we can kind of see what the ideas of these in flow charting are and we'll talk about those as well because um the uh you you'll probably be asked you will will be asked I should say to rec create flowcharts of your program so um we'll come back to the flowcharts in just a bit I just wanted to be get them a little bit bigger now that I saw them on a screen here um so an if branch is is is the main kind of branch and it's saying um if if the expression that's contained within the if statement is true then um then the uh the the the block of code there will get executed otherwise it just is skipped it's just straight up skipped um there's a variant of that called if if then else you sometimes you'll call it here called if then and then if then else um if uh if then is basically saying if the thing is true then do this thing then do this conditional block but you can provide an uh an alternative um e execution block which is the else statement um it turns out um and uh we can see that in the second example here so I'm going to spend just a little time um talking about what happens here so uh what we do in this program is start is usually terminated or these terminate ter terminal nodes are are uh are usually represented in circles and those are the start and the end statements usually um and then this kind of uh like um this uh parallelogram that's a little bit of skew is basically a procedural statement basically it's saying get the next input and assign it to Value um this is of course pseudo code we wouldn't write code that looked like this in C++ um and then we get into this diamond and the diamond is really what's evaluating the the statement and saying if this this reads if the value is less than zero then then do something else do something else um and we'll see the else here in a bit but if the value is less than zero in this case we follow the true block and we essentially subtract uh we we uh basically um subtract a little or we set the value to to its negative is what's going on here sorry I kind of Mis misread that but uh we're we're using the the U negation operator the unary operator that we talked about in week one or two and setting value to uh to uh it's negative um and then um if but if if value is not equal to zero we're not we're skipping that step and that's what's happening with false so we're skipping that step and this whole block over here gets gets just skipped all together that's how to read that and then finally we print it out that's how the program ends the lse statement um here uh there's one here but it doesn't do anything so there's always an L statement sometimes it just doesn't do anything even if it's not even written in your program uh uh the false gets you know this can't evaluate to false and it just skips it but we can put something there too so for example in this next example very similar start and end um and and we checked you know the variable called user age which is R from input and if it's true we're setting the insurance Price to 4,800 and if it's false if if the person is less than 25 uh uh or well if the person is greater than greater than or equal to 25 they get a reduced rate so basically this is saying if the person's younger than 25 we want a more expensive rate um but if not we go down here and we can write that with if then else um the uh the uh uh um the way that's written in C++ and we'll see some examples probably starting on the next slide is the conditional statement is usually put in the parenthesis um and that's evaluated you can have multiple parentheses if you need to group things to make sure they're evaluated first before they're passed on and then the execution blocks are uh put in parenthe in or in braces in braces in these curly braces um and those uh those are controlled by the if if the then and the else or if and else in in C++ there is no then in C++ where there are in other programming languages like python um or well yeah kind of implicitly there are um and then one other thing to be aware of is there's there's what's called a conditional expression um in that um you can write uh the whole thing with this question mark and colon here um where basically the the condition uh is is is is pretty much the same this is the the the uh the test where we're checking for true or false and if that's true then we we basically do this next thing uh which is the expression went through and then this colon means this is the AL statement so this is called a Turner operator because it has three operations um that are taken but the way to read this is if this is true this happens and if this is false this happens it's shorthand for if then else um and you'll see it sometimes when it's a very simple operation um like incrementing or decrementing a variable depending on something happening um so just want to be aware of you don't see it very often but it's something to be aware of when especially when you see this question mark in in C++ code or actually I think it's the exact same in in Java if I recall correctly um and certainly see variants but this this is something uh to be aware of if you see that and you haven't seen it before same thing with colon there's a lot of cryptic um tax in C++ uh but being being able to at least understand what they do um if not how they work uh is is going to be key um let's see so yep so here we have a a um the idea that you can have more than one or more than two blocks of uh of operation in in your code um you can keep chaining else else if else if if else if the pseudo code looks like this so if you're um you know in this case you're trying to figure out what kind of team to play on if the age is less than six you're on no teams and if you're less than eight but greater than six uh because it goes from here it would end here um and then come to here and then come to here and then come to here um else you're on no teams because you're greater than uh the 12 right um it's how you could Implement something like that um and the flowchart looks very similar where you can keep going true but they always go to the end um there's a trick to that though um if you use a different uh syntax called a switch which we'll get to in just a sec but for if statements you only can do one of these and the first one that matches is going to be the one that's executed so in the code here if we read in a number of years if if it is one then this is going to execute and all of these other ones get passed and then secondly if this is false and this is true this one happens and the other ones get skipped if all of them miss all of the these Miss we do do a uh we do have a catch all with the the else so the difference is these are all conditionals because they have if statements to them they only happen if the uh Associated expression happens else the one without the f- statement else that happens so only one of these will ever happen in any situation um it's not like um you know for example the uh if you if if the s less than or greater than um none of these other ones would would happen um they they don't work like that only the first one happens when you're dealing with if then lse statements is the main thing to to understand there the alternative which I just mentioned are uh switch statements which are are really interesting bits they they they do a lot of the same thing where you have multiple if then else but you have um essentially uh multiple or you can have an es that are a little more concise and they have this switch statement and there's an expression in there um that says basically if this evaluates to this thing then this happens so if this if this expression evaluates to expression one and I think we have an example here uh I guess we don't but there are plenty in the book um I should have probably put one in here um but it basically let's say this is um let's say this is uh similar to our uh our our you our our uh our ages for our teams that operation um if if so say it' say switch age and uh or switch um how would that work really these are used for equality more than anything there's ways to do that um but if say uh you know if you're saying maybe this is a username and say is if switch username and it says you know case Trevor swarm I might say put teacher statements here and then if I put like your name we might say put student statements here the main thing to know though with uh switch or another thing to know is that you this break is optional and if you put it in here and and you go into this this will end so basically it would only happen here but if you don't put it in here it will keep going and evaluating every other one until it sees a break statement so you can go all the way through through and hit every single statement and they can all be true you can check for every single thing quite quickly there uh with with a switch statement if you just leave out the break statements um most of the time you'll see it with break statements because they're kind of replacements for if then else's for like lookups for like things like we talked about names you know like for example States if you wanted to return the capital uh that'd be a great example you could say you know switch State and say Wyoming and then the case statement would return Cheyenne right uh if you're writing a function about capitals um but if you if you didn't put break in here it would also evaluate every other one and in that case it's probably not a bad thing but it's it's inefficient right so um but sometimes you can get un unintended consequences if you don't put break in there and then there is a default statement which is much like the if then else if nothing else happens the default uh will always fire um and you could put a break uh in there as well so um let's see where we at on time um you know I'm going to take a pause here uh now that we kind of just got through the if statements and I'm going to jump into Boolean expressions in a separate unit here because we get into order of operations and things like that and it's a good it's a good breakpoint so I'm going to stop this recording here and and come right back to this slide