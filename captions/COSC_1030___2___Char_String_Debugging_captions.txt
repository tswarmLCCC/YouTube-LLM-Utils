okay coming back to finish the uh the unit on strings or on um on types in math um is an interesting little side side jump into Strings um or characters in this case character or Char you sometimes c h r is Char or care Char care um you'll hear it called aons different ways um it turns out that we can represent those with numbers just just the same as we have so internally a decimal number of 32 or the binary given there um in in in this case seven bit space uh will give us the equivalent of a space uh in asy ASI is an encoding scheme uh so for example 65 there is a capital A and that was just decided somewhere it's a standard that's known Nationwide you'll see different versions of ASI if you get into text work um or and different Unicode things like that as well where B but basically all that means is that one z0 00 0 one 0o which is the decimal of 66 is a capital B it it's just we just say that that's the way it is and that that allows us to basically store the capital letter B with ones and zeros right um so um that's the asy format um and we we build a whole heck of a lot of these things and as a matter of fact we can even build some invisible things uh based on other characters called Escape sequences um so you know it's really hard to example type the idea of a new line or a tab like you can't even see the things they're literally just different kinds of space right one is from here to you know it just jumps up space is kind of like that but it's a little different backs slashes uh double quot these are things that um we need to treat differently where we can't just use our keyboard to encode them because um they either are invisible characters and there's no key for them or we need to control them in the case of like quotes and double quotes with so uh and backslashes those are things that mean something in C++ so we need to basically say we're going to give you a special way to represent those and those are done with backslashes so if you're typing something out and you've probably seen this in our hello world program if we want it to say hello world and then go to the next line we give it the new line so that end there never shows up because it's proceeded with that that uh that backslash um that we uh we basically said it's a new line um go ahead and try those different things in print statements or see out statements and you'll see what how they they operate that's the main thing I wanted to talk about here um speaking of strings a a string is basically more than one character that's the way to think about that um if you've studied different programming languages and studied arrays or in some cases vectors or lists um that's what's going on here is we're basically grabbing each one of these these guys and saying we're going to build a whole bunch of these and make a word or a sentence or a book right that's all that's going on and those strings are not built into C++ but we get a lot of cool operations that can work on them like lowercase and length and things like that that make our life a lot easier by including the standard uh Library uh include just include string um and we've seen that in different programming languages so if you need to start doing that you need to include it and then you get the string data type uh much like we see here where first month equals January so if you had not included string you can't do this um things like that uh let's see so the um and we've done a little of this so far with C in and C out but basically uh when you do CN um we are looking for this thing called Whit space and what what uh what happens is it takes anything that's a um a um uh a space or a tab or a new line and it will read until it sees that so CN is very spec specific in that way it can be overloaded uh but uh when you when you use CN uh user string this is the one time that you'll actually put the variable you're assigning to on the on the right and it's going to say um again usually you can change this but it's going to say uh take the next thing from the keyboard until you see Whit space or uh or uh usually a line break so when we want somebody's age we say you know please enter their age and hit enter well that enter is saying okay C++ this is done now go ahead and assign that to uh in this case user string of course that comes in as a string so we need to convert it probably if we want to use it like a number which is probably what's intended in the example I just gave the kind of sister version of that is get line where we get an entire line and that will read in CN until you see a line break it's a little bit different so you can include spaces there so if you need spaces you probably want to use get line which again it just comes from the standard Library um and uh and uh and as opposed to CN because CN will basically for example if if I ask hey give me your name and I wrote Trevor space swarm and I said you know you see in for that it's only going to return Trevor because it's going to hit that white space the the space there and uh it will only say Trevor so if you're expecting CN to give you that full thing it won't work um you you'd want get line and you actually passed the CN operator to that um so it's just overloaded in that way um and then lastly I wanted to just part on this idea of incremental development this is not related to Strings or numbers uh number operations specifically but the book gave a really good example of it and I wanted to highlight it I cannot emphasize this am enough as you become more and more proficient and get more and more tools under your belt um and you're developing something from scratch it's very important to start small um for example this is a a program that does uh it's entering your age and years and just doing a simple uh day to uh or year to day conversion right um so we might start with a very simple operation where we we kind of understand what's going on here we may have seen this before we do the the core of this calculation right here and I would comment this as well if I if I were you this is probably you know the the the big operation of this the logic and then it does an output right well we might improve that then where we want to say talking about leap years uh you know things like that saying uh you know um here we're just count calculating for days that there aren't leap years and then we're adding one for the number of days when there are uh leap years things like that which is just going to uh give us those so this is just giving us an addition of one for each leap here that happens to have happened in there um and adding that and then we add that a little bit more with some commenting and and then we add a little bit more where we're doing uh some minutes and things like that but the idea is we start at small and we make sure this works and then we start to add on one thing at a time and maybe with a print statement um and then uh and then we add a little bit more sophist sophistication to our program we don't try to do this out out of the out you know right out of the way we want to definitely make sure like this works and we stop and we increment and we test we test and we write user cases and things like that user tests I'm sorry um and then uh the the techniques that we could use as we're developing or if something goes wrong is we can certainly use break points and I've covered those uh as we as we'll use them in repet uh for at least the current version of this course but also um you know uh in most IDs have them and things like that where you can actually stop a program and it will give you all the variables and you can just see what's going on you can step into different functions and test things usually in in intermediate Windows uh Windows excuse me sorry getting a little dry but I also wanted to talk about oh let me sorry got a little typo in my slide deck here uh so um some other techniques that are very useful though if you're struggling with getting something going or you just want to examine what's going on um all all are very valuable ways to to learn what's going on in your environment is instead of using an input from a a user you could just start out by assigning it so instead of for example in the previous example asking for the age you can just give it an age that you know most problematic say you wanted to make sure that 21 the age of 21 accounted for four leap years well you could just say age in age equals 21 and then you could start testing it and make sure that works um and then you could put another problematic you know what if it was 20 does it handle the one right all that you could just put those in and and comment out your uh which goes to you know the the fourth idea there um you could basically disable some code and make simpler code that you understand and control your environment to make sure that subsequent code is working right and test little bits of code at a time and make sure they're working perfectly um printing is another great thing to do where when you're debugging um and then you can remove those later or comment them out where you're printing values out as you as they get processed either in a loop or in sequence I do that probably more than anything else um but uh yeah so just simple print statements there's logging uh uh oper as well uh in C++ where you could actually instead of um instead of using print statements you could just write them to a file all the time but that's a little beyond the scope of this video so just something I wanted to leave you with um you know in weeks one and two here I definitely wanted to introduce the idea of documentation and flowcharting and debugging um we don't really hit those in in computer science 1010 very much but I uh it's going to be uh important as programs get more sophisticated that you have tools to break down your program and test different parts of it if you haven't done that before um certainly start and if you if if you'd like me to go over that in office hours or things like that please let me know I I I I love demoing this stuff and I'll probably do some videos on it here or there um as we get into different things and you'll see it in code examples as well but I just wanted to introduce some some big Ideas so you had to slide to refer back to and it's also this came from your book too um in in the zybook so uh it's it's a good reference there so I think that's all I have for this unit um there's a lot of different kinds of material here hopefully it all makes sense these are kind of building blocks um but probably a little more in depth in some of these areas especially memory management than we've talked about before don't don't discount though this lecture even though it makes sense um this idea of of memory and size and you know variables referring to places uh in the memory those are all going to be very handy if if not at the end of this course in 2030 when we start talking about some of the ways we can get at those in some creative ways uh it turns out C++ is kind of known for that um but uh more on that uh down the road so I'll leave that here and uh please as always let me know if you have any questions and uh good luck