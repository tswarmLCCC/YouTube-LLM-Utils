welcome back um we're continuing our study of the inherent data structures in Python um moving on from sets and and tuples to now dictionaries and sets um I'm sorry lists and tuples to dictionaries and sets oh my goodness recording too many of these back toback apologies for that um dictionaries uh are one of my favorite uh data structures in any language and um and and certainly in Python um dictionaries uh have a value paired to them which we'll see many many examples of in a bit so I won't illustrate those directly um but in that way you can use a key to look up things directly uh very quickly they're indexed behind the scenes and things like that um and uh you can uh you you can also um of course Nest these things and and add complex types to them as well just like you know lists and and some of the other um operations or I'm sorry data structures we've seen um so why do we dictionaries let's start with that like we have been um fast lookups are a great way to do it um and you can structure data as such um they're a natural extension from some of these multi-layered data formats that are out in the wild like Json uh from the web um and they are you can uh mix types uh so you can mix um you know certainly integers and strings but also complex data types um and they are a little bit more readable than other other data types as well um all these are very good points so let's get into it um a a a dictionary um is a sequence and a an urable just like uh the some of the other structures we've been studying recently they have a key and a value to them separated by a colon so a colon in this syntax uh is not a between operator like they are when we're talking about indexing or slicing um in this case they are separating the key in this case we have a key of name and a value of Alice and we can access the value by using the key we'll see that in just a sec um so we have another key here of age and a value of 30 so on and so forth and of course we could Nest these things so we could use multiple versions of these and essentially make a slight a small data collection system if we wanted to um so let me break these out into two or three different code blocks uh sorry I meant to do that ahead of time I did it everywhere else um so we create our dictionary here um and you'll see that it uh the the big difference between dictionaries and lists um are these curly brackets here uh th those are uh and and that's the easiest way to identify them when you see the curly brackets you're usually talking about a dictionary although you could be talking about a set um if there are these colons in there we are definitely talking about dictionaries and these are separating the key and the value um separated by commas you can Nest these things with which we'll see in a bit as well so there could be um dictionaries or sets within um dictionaries or lists within dictionaries and vice versa you can also embed a dictionary in a list if you wanted to um to get things out uh we use the name of the dictionary so in this case simple dick I should probably call that dictionary I'm going to probably butcher that and get made fun of but that's okay at this point uh I'll just I I'll tell you what I'm going to call it simple dictionary just to avoid that easy easy to uh slip up pronunciation um and then we can use the key here so uh when we run these things I'll run this and we'll see that name age and City here get the values back out so it's not it's looking up the value of name or of age or of city and it's returning that value back out to us um and in that way it doesn't matter what index it is um these can certainly be in any order um let's go aad and demonstrate that let's put age before name here um like so rerun this and then when I and they do appear in different orders so these are unordered in that way but when I look up uh this you'll notice that Alis 30 and New York do not change um because I'm looking them up by their key and then just I'm displaying them in in in the order that they're coming out um and this is only a twole because I'm using comma here I could certainly do something like this um and that's only because I'm separating with a comma as we described when we talked about two if I do something like this we will see that each of these are indeed their own V values just like so okay so uh the really cool thing about dictionaries is just how flexible they are um in the way in in the way that we um can uh access these things we can also um um reverse that and say hey I just want to add a new key to this thing um and I'm going to go ahead and give it a value so when I run this you'll see that we now have a a a new um key value pair with the key of occupation and the value of engineer that gets teched on and if I run it again it will not repeat that like we've seen with a pending in lists it simply says hey I already have an occupation here and I'm going to use engineer if I update this to say doctor we'll see that it replaces that um which I probably have already yeah I already did it down down down in the next line but that's okay we'll go ahead and I guess developer um we'll see that it actually uses the this uh existing one um I'm going to take a step back uh uh if you've studied C++ or Java um this is a very hard thing to do where you basically update a um a data structure and insert something if it exists or update it I'm sorry insert something if it does not exist and update it if it does exist it's a it's a huge design pattern that's just built into python for free and I want I'm G to I'm going to wax a little philosophical and probably even end the video this first video here um doing just this this could be a mountain of code just to do what we're doing here where we're adding something if it exists in this case adding an occupation um or record to our our our collection um and updating it if it does exist um Ju Just huge you know if I wanted to add you know now uh I don't know a salary um I I could just as easily just say simple dictionary uh sub do uh salary equals you know $112,000 or whatever that that salary would be and it would tack it on automatically for us and then if I needed to update that either programmatically or explicitly um it's already done for me all that's built in just based on the P the power of looking up and using these keys in here um I did exactly that here where we updated from the age of 30 to 31 uh um uh that that that's how that was done there um and then you can remove uh these things with uh the delete uh operator as well so here uh if we didn't want City in there for any for some reason we can just get rid of it um so you notice we had City here and now it's not in here and if I run this again we actually get an air um there's ways to work around that but be careful with that that you make sure that you're deleting things that are already there um uh uh let's see oh and then um you can also use uh default methods uh to um basically and I think actually there's a way to do that with the delete but um if if we wanted to get say occupation here which we have it will um uh it'll return that uh but if I wanted to for example get something that was not in there I don't know say salary since we just talked about that let's do salary here you can give it a default value where it will uh say not specified let's go and run that so the idea is this would throw a key a without this let's go ahead and demonstrate that or not a key it would just be a null because it can't find it um with this get method uh but you can uh give it a default value um if you uh if you supply one which is really nice right um that way if your dictionary is being created in a whole another part or of of the of the code or the system and you don't know what's going to be in there you can give it a default value so your your access method Works a little bit better um the last thing I want to talk about just really quickly are three methods that we can get uh at dictionary items uh keys and values for that matter uh basically the three parts of a dictionary we can get those programmatically and do things with it we'll see more examples uh with and then I'll I'll move on to the next video uh we can get a list of all the keys with the keys function or method um of it um and those are simply uh age name and occupation we can iterate over those as well if we want to um which we'll see uh some examples of down the down the road we can do the exact same thing with values um and these return as a uh again an iter and a uh um you know uh and but these could be cast to lists if we want to or even um even sets uh if we needed to um but the idea is we can get at these programmatically and loop over them or work on uh get lists that are handy just for our own reference if we don't know what's coming in um and then we can get both a key value pair um from each uh and loop over those as as tubal with the items um we'll see a real this is probably the main uh way we we would want to do this in this way we can say hey if the if we're talking about an age do this that or the other thing and those are those are returned as tupal which uh again are immutable so you can't change them but you could certainly change the uh dictionary item based on name and give it a new value directly as we saw above uh given the information that you returned from this so um that that's a pretty good intro to these things and a good break point so I'm going to jump right back in and we're going to talk about how we can access these things and do some other work in just a bit