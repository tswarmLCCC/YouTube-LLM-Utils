okay uh this is one of my favorite introductory topics in Python it's it's really getting away from uh What uh most most programming languages can do natively and they're getting into um adding a lot of basic functionality that frankly everybody uses in different programming languages but they have to basically build them before they can use them in Python we don't and I'm talking about the idea of a list um a list is uh uh one of many many compound data types uh that python knows about uh that uh other programming languages don't um a list is basically a series of values um that are usually of the same data type although they don't have to be the same data type um you can have numbers in here you can have strings in here I could do certainly something like this I can certainly do this um just fine um these can be mixed data types or there can they can even be other types of data um uh that we we either make or are given to us from other other parts of a programming looking way ahead to the end of the course um we'll be building our own data types using objectoriented programming and we could put those type of objects in here um as well but let's just start with the basics here um there's a lot to talk about with lists and I'm going to try to get through them in just one introductory video here uh we'll certainly revisit a lot of this so a list is a series uh in square brackets uh that and things are separated uh by commas um these uh of course uh are a sequence type of object just like a string is that's what we call those when we can um uh when they're uh uh created uh with a comma and you could do a string the same way and we can use indexing um and sliced just like what we did with the strings in the previous unit and of course if you're if you're coming back to this video by indexing I mean using the position um uh the index uh to reference uh you know the position in the collection so zero here would give us one negative one would jump to the end and give us uh 25 uh negative3 would give us nine and so forth um and then of course you can use the empty uh beginning and end syntax uh in this through input uh to um to reference uh things in the middle so -3 well let's start with three here let's go ahead and load squares here I'm just going to put it in the console here just to illustrate those so if I do if I want wanted the uh the second one of squares I can do squares too right like so and I'd get nine right I'm sorry that's the third one because we start with zero nine if I wanted the second to or the third to last one and go -2 which is of course 16 uh second to last one uh I'm yes sorry starting with zero going backwards you don't start with yeah it's the second to last one this is the third one this is the second to last one even though that doesn't make sense intuitively in your head um start once you think about how it starts with zero uh you can get there and of course we get these these ideas too so if I wanted positions like uh two through five I can use this through syntax the colon uh to give just those so that's uh positions 9 uh 16 and 25 or I could just go uh omit either one of those um and go to the end or from the beginning to a certain position just like what we did with strings so hopefully that's review um but either take time to either go back to the string video when I go over that or uh you can look up the sytax uh in the in um either your book or or Python tutorial from there um hopefully we don't need to rehash that um unlike strings though this is the first big one is that strings are mutable you can change uh lists uh within there so uh here we're going to load a new one called cubes um uh not so uh and you'll see here that uh the um the third one is 65 and if you know your math you know that should be 64 well you might recall that in a string I couldn't do that so let's go a and make a string I can't change the the I can't change this the the the third position of Trev right we had to work around that so if I wanted to do something like this it won't let me do it but I can do that in cubes or in I'm sorry in lists so if I wanted to change the let's see it' be 0o one two three right so if I wanted to change the third position of this Cube to 64 sorry sorry let's just cubes three and I want to assign that the value of 64 I can do that and now you'll see when I print out cubes it's now updated to the appropriate amount um so that's one difference between strings and um and uh and and lists is that you can update uh lists as Oppo as opposed to Strings so strings are immutable unchangeable um lists are mutable you can change them there's some other nice stuff uh that we get with lists um you can add things to them very nicely this is again really hard to do as a matter of fact we study how to do this in C+ plus um but you can you can just add things to to the end of things so you'll see here with cubes when I do this uh cubes. aend here it's going to add 216 to the end so I'm just going to run that and you'll see now that I've done that it doesn't you know return anything but then when I print the cubes now you'll see that it is in there 216 is in there where it wasn't before um and I can even use an expression in there to add another one so I'm adding a pen and it's evaluating this expression which we'll talk about much more next week when we talk about uh control statements uh but the this this basically gets evaluated to one number in this case 7 to the 3 um and will be appended to the cubes list so let's go ahead and do that and now if I print that you'll see that we have six 343 in there pretty cool right um so there's one thing that happens uh uh in in um oh I lost some code in here um well let's go let me let me go ahead and bring it over from my notes here I'll have to change it but the the short version of it I'll do it up here just so we can have the code on here is that um when you reassign um or simple assignment this assignment operator so let's make RGB here let's make RGB um if I assign this to like rgba like so uh like this um what normally happens in a lot of programming languages is you'll have two versions of this then right you'd have RGB and rgba that's not true in Python um simple assignment does not copy data in assignment um the uh variable uh refers to the existing list so if I did something like this where I append to rgba now remember rgba is the second one I made rgba is the second one I made we might expect RGB to be untouched but in fact that is not true so if I grab RGB here and I run it you'll see that it has that in there they this is the same list no matter what so this is a reference to the list uh which has pros and cons I'm only introducing it here so you're aware of it um again we might get into why that's true down the road I don't know if I'll have room for it in this course uh let's see um of course uh like what we did before uh with strings let's go ahead and grab we'll just use RGB here I guess so if we use RGB and we grab say I don't know this the first or the second item through uh through the end right we can we can uh certainly do that where we get we're again we're leaving red off here right um uh so we get green blue an alpha um if I I can of course assign this to a new list I could do this and then when I run new list I would have a new list this is a copy of course uh you'll see if I go back to RGB here it's still the same so uh when you make when you do a new assignment like that from a slice you'll get a new new list um all together um there's a lot you can do with um with uh assigning uh things within there uh like like we demonstrated earlier um and I I won't run all these but just uh you and I I'll give you the guys this code um at the end so you can run this yourself but uh see we have lowercase letters and of course I can re I can use list syntax to overwrite uh two through five here and it would print uh in this way where these are the now the uppercase versions um or I can delete things that way too right so if I give it an empty list I can say everything before two is now empty and it will resize it for me um uh so that's how things can go and of course I could interestingly delete an entire list doing exactly that as well where I say give me um the be everything from the beginning of the list to the end of the list and replace it with an empty set and I would get an empty set back out um this is handy when you're doing using lists for things like record management um you you can get a lot done with very little there and uh this replaces basically link lists uh and a lot of Link list functionality from C++ if you have to if you happen to have studied that uh before before um studying python here in this class um so one thing uh that I uh kind of glossed over at the beginning uh but uh is the lists contain any I'm going to go back to our very first one our very first list here these can contain anything including other lists or other objects or anything so I could put a list within a list um so going down to this example um I've got an initial list called ABC let's go and run that right and now just a demo I'm going to do a and we can see now I'm going to make two more lists we're going to start with n and we'll see what n looks like right very simply and and and by the way uh when it's printing it's just basically saying this is the list item you can get each one of these individually now I can um combine them of course using a comma n or and you can use plus and multiplication and things like that as well um so I could do things like uh I can do you know a comma n this is like what we did with the string right um and that'll give me both of them but I could also do something like a plus n like so and to get um so the difference between these two these are lists within a new list so there's actually three lists here so this one is saying this is a list this is a list and make it within a new list and you'll see that here right but if I add them it just gives me one list back out so just know the difference between those two operators because you can store lists within lists um you this is a nested list um so if I did uh if I wanted to for example show the first index of a a Subzero um oh stinker uh hold on let's see uh oh you know I need to make it I need to do this that's what has do wrong so X here if I showed the first element of X here like so it's going to give me a list same thing with the second one that be because there's lists within the lists um as opposed to adding the things so if I did uh let's say let's let's call it X2 and we do a plus n um and I just show X2 there's no list within there so if I do the the first element of of that we're just going to get the first element of that list so just to reiterate that um let's go back to X2 here uh or X here this uh what's going on here is the um is what we're ending up here is with the first element is this entire list the second element is this entire list and and you can see that they're separated you're going to get a lot of data like this this this seems cumbersome and like why would you ever want to do that it turns out it's a super handy useful way to embed a lot of data in all kinds of different formats within python so get used to this syntax and how to decouple that um we'll cover it more but uh hopefully this kind of sunk in a little bit here um as well let's see is there anything else I want to talk about here let's see um there's a there's there's some functions associated with lists the main one that I want you to be aware of is uh the length function so if we go back to just you can just pass the name of a list to a to the length function and you'll see how long it is uh so on and so forth so if we did X2 we'll get three you know six because we added them and things like that um all right this one's getting long I want to stop with lists for now that's a pretty good introduction spend some time with this I really encourage you to get used to this hand in them like I did go grab the code from the download uh whatever you need to do but spend some time with list and really start to get to know these because you're going to see these in a lot of units and uh you'll see double double triple quadruple um you know brackets like this um and one other thing that I just want to read we we'll recover it when we get to dictionaries is that dictionaries use curly braces and lists like these ones use brackets um they look similar other than that kind of um but there's a big difference between how they work so all right thanks uh hopefully that resonated let me know if you have any questions about that one