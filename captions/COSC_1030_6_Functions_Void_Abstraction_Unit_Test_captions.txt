okay welcome back to our continuing study of functions in C++ um as as we move on from the the base core idea of a function where we have a return value and and the programs uh or the the function is designed to do a very small task and give us a value back sometimes functions are used in other ways um than uh just simply uh you know uh wrapping around a calculation which is what we saw in that first example um a very common use of functions is to just wrap um um a program up or a part of a program up that does a very specific thing um it doesn't necessarily have to do a calculation um that's a very good example of a specific thing but um another great example is printing often um when we're writing programs we do a lot of input and output and sometimes it's very repeated input and output or there's a lot of it and we don't necessarily want to clutter up a program uh just with that you know it certainly needs to be in there somewhere so what we might do is wrap our input and output uh ideas around a function uh or inside of a function I'm sorry and to do that um especially with output um input you'd probably want to return a a string or a character because you'd be collecting it and then you'd want to return it back to your your um overarching program but if you're writing for example a menu program well sometimes menu programs you want to return the number as well that that that might come out but um there there's a lot of times where you just want to spit out like you know a bunch of output like a report of of of series numbers I know we've done that in previous sections of my classes uh um um the idea though is that we could write what's called a void function and a void function much like it sounds just doesn't return anything um it just doesn't return anything at all um and so you can use it to for example print print summary here this first example let's see if I can get my cursor back there we go it basically takes um an ID um and um a number of items and prices and just prints out a very nice formatting thing um you know with our SE outs and our end lines and all that um where we could print somewh so if you're if you're iterating over a bunch of of items for example like with a for Loop in our collections our vectors um you know we we might want to write this instead of every time we call it uh you know uh or uh we we could call just call a simple you know print item summary type of function and get a lot of good information back out so that can be very useful um uh a useful form of encapsulation um where we don't have to necessarily take the uh the individual parts and and clutter up our main program we can just write on Liners in the main program that describe what's going on for sure you want good names with your functions but it would instead uh you know take all of the code that has to do with output because it's kind of a similar idea all of all of this code all of this code all of this code the whole point of it is to just give it back to the user right sorry I kind of forget where my camera is in my office here um but the idea is that we we tuck all that away and then just call a oneliner in in our main program here uh when we want to use it um uh Prince David's menu systems are very common file writing can be done like this too where we we we say write to file or write item to file or write report to file uh things like that uh that kind of input and output so that's another kind of function that I wanted to introduce um and it's certainly covered at length in your book I don't want to beat it to death I don't just don't want to you know reread the book to you here but the idea is I sometimes instead of taking a simple calculation or uh we could take ideas uh of of something a small logical part of a program and write that write them into a function and then just make our code much more readable and reliable the main idea with a function and I'll say this throughout these videos uh on functions and and when we get into objectoriented programming I will as well um the main idea in my mind of a function is to take something big break it down into into small parts that are very that you can have little small deliverables in there so it might be you know for example the the area from our previous video or printing an item and writing a very small program that does that and then getting that right testing it you know right there which is kind of bringing me to my next slide uh which is about unit testing uh that and here um is is this idea of of basically breaking big problems down into small problems solving the small problems and then putting those small problems back together in a way that that lets us solve bigger and bigger and bigger problems you can think of your computer um like this all the time this happens all the time in Computing we have functions in our computer right now that are running my camera or capturing my voice or running PowerPoint here or even just writing the words on PowerPoint or making that you know bottom line yellow in PowerPoint all those are done with functions that you know somebody figured out how to do that to make those pixels right you know uh yellow instead of white sometime and then they they tucked it away in Windows somewhere a long time ago and then uh that's the way that it just uh it just works now right uh is is the main idea um is that they can just call you know make that text yellow or show my instructor's goofy face in the middle of summertime here right um all of those all of those things have been solved and then tucked away and then called uh within bigger programs and that's the main idea of of functions in general I really um you know that's what all of these slides are uh are kind of about here um or at least these introductory slides and the and the reason we you know somebody might ask why would we take a perfectly good program and make it more complex by writing you know a bunch of functions and then I have to go up here and follow it and all that well the the main idea is that you're writing smaller programs one at a time that can be easily understood you keep Less in your brain at a time so you don't get too confused and you can test them right there um which uh is kind of a big deal this idea of let's call it unit testing let me let me go sorry I'm not using reading mode I need to use that here more so you can read the code there that should be a little bit better than what we were doing sorry about that in the First videos kind of just getting back into um lecturing here as we get into summer here after uh after after the after school got out um but unit testing is basically the idea of um taking for example a function in this first example and passing values to it and making sure it's getting what we want back out of it so in the top one um we have a simple function called uh hours and minutes to minutes so basically it's taking like you know 130 and returning 90 would be the idea right where you have um you know an hour and a half and returning 90 minutes back out um so when I when I and it it looks like it parses out uh this idea of uh the string here um and uh and then take so you pass the hours and the minutes these are two arguments to the function right these are and we're passing those as uh so these are the parameters of the function um and I again sorry I mix them up even sometimes but parameters are basically the what they're called within the function and then arguments are what they're called when you're passing them to them so we're seeing a great example of that here for example here we are passing zero hours and 1 minute and we're expecting one and the the programmer even uh writes out exactly that um explicitly and saying okay I'm going to test this function that I just wrote a bunch of different ways so you know with 2 hours and 30 minutes I would expect to get 150 minutes back out right so the idea is when you print this you should see all of that um and you can test it in that way um this would be just a simple program and you might have this function in another file so in one file you might have a test my functions type of file main program where all it does is do that and then then you know it works right right and then you can put it for example in front of a user or um on a server or on the internet where it's going to do what you expect because you tested it locally under very controlled environments so then when you let it out in the wild you kind of know it's going to behave um in ways you would expect and then when you see things that like when it misbehaves and you fix it you put that that situation uh that you encountered into your use tests right so in the future when you're you're you're improving it the next time you make sure you capture all the things you know about what might go right or wrong about a program that's that's the essence of unit testing and I hope I hope that this uh the importance of this resonates with you um because it's it's something not a lot of beginning programmers do um and if if if I can you know pass any you know old man wisdom to you um as a beginning programmer this would be one of them you know get in the habit of this it feels like it's like silly and a waste of time but I'll tell you you're going to save yourself a lot of headaches by adopting this kind of methodology into your programming um one sign of a mature programmer is this kind of work um so much so that modern tools a lot of modern tools do this for you as a matter of fact our repet uh product even kind of did this for us um back in the fall of 23 um but it went away I'd written a lot of programs that did this for us so it would test your program for you and let you give you some feedback if it wasn't working right but I digress um another way to do unit testing is this word called assert um it's a special function that's built into C++ and the idea though instead of printing it out and manually comparing the thing is that you can run this program and what will happen here is if this doesn't happen so you notice this is the equality operator but these could be a lot of different comparison operators like we studied in our if and for Loop statements um if this if this happens to not work right it will actually air out of this little program so you just run the program and if it passes if it runs successfully you know everything passed which is kind of cool right but if it airs out you don't have to read it all each time and look manually it will just air out and it'll tell you which one it did um so it's a nice way to to kind of wrap unit testing into a small program um I like that one a lot as well so um just a little bit more about again void void programs uh you know um and and this idea of wrapping ideas into functions and then um and then um sorry I'm getting ahead of myself um you know some definitions of why we do this some introduction to abstraction here and know I'll revisit that a lot and then a little bit about this idea of unit testing so just just to kind of summarize here really quickly the the the Big Ideas around this unit or around this particular video this subp part of this are to basically write things that are small and understandable and testable and and test them and make sure they work right and then you can use them in other places you can start to stack these things together um for example when we wrote those those uh those print statements uh you might you know just simply print instead of doing massive amounts of calculation or they let a user give you um you know things with input and having to print that out you can pass variables that you know uh might be passed into a different program and do unit test on that and then when you use it for example uh in in a bigger program it would be ready to go so um we got a lot more to go on functions probably at least a couple more videos here we're going to get into some of the the weeds of what you can do with functions and some of the nuances of functional programming here in the next two videos uh or well I'm thinking two we'll see how it goes but I'm trying to keep these short and and with a theme so hopefully uh hopefully this resonates but at any point here if some of this isn't making sense either go back to the book go to the prim exercises that accompany this unit there's a bunch of them that I've designed to kind of play with this stuff and modify it and experience it or just come talk to me come find me and and say hey I don't I don't understand what you're saying in this in this video on on functions because this is a a big jump forward conceptually for a lot of folks and I I don't I want you to take your time and make sure you understand it all right cool thanks um uh I'm going to stop this one here and we'll get to the next one