in this unit we're going to greatly expand our capabilities in processing different problem types we're going to introduce this concept of iteration in programming which is really one of the things computers are just great great tool for doing similar operations very very quickly over multiple multiple sets of uh information it could be files could be um just about anything it's really just a the backbone of modern Computing is is this concept of repetition um and python even adds some really nice features that have made it a lot easier than it was using older programming languages like C and Java um this week we'll have a guided learning both combining reading on dictionaries and Loops in our zybooks this is what it looks like presently uh let me go back to the actual assignment here uh sorry so there's there's a bunch of reading here and there's a bunch of work this this week as well um honestly this should get you a very nice understanding of what's going on um whether you're in 249 or 10 I know it says 10 here we use the same book right now um and then uh you have a homework assignment where you're going to make a you know fairly fairly uh basic basic Loop looping application but this is a full application now we're going to have a menu system and some things like that as well which we should be well equipped to do by this point um that homework looks a lot like this we will have a zip file that I'll jump into just a sec and we'll be doing some different things with looping and dictionaries um and differentiate between the arrays um and then we'll get into an assignment here where we basically write a program that takes names and puts them into a list um uh and uh and that that's that's what we're going to going to be doing here um so with that I'm G toh take a drink first before I start the the lecture formally while I'm switching over PowerPoint for this week uh go back up to the top uh excuse me one sec sorry recording in late December with colds things um so as I said uh we're getting into loops and uh I I want I'm going to use the or arrays here very Loosely um arrays are an older older con uh older term that means many copies of the same variable um in a data structure to hold them all and we'll talk about that in in in some extent here but we don't use the or arrays in Python on uh because they've kind of been replaced by better things or more easy to use things I should say in Python um it's actually one of the biggest things that python uh does really well for a beginning programmer is simplify how we can keep many copies of things and work on them and we'll go over all that in both the reading um in here but first let's let's just talk about the use case for these things at all you might recall from previous weeks we had this idea of memory right previously I think it was in our variables unit we had this idea of you know maybe a character a bite for the letter t r EV my my the short version of my name and we we send that to a name an array called a variable um or not an sorry an OB a data structure called a variable which basically gave that that that location and memory a name that we could reference and update and use and compare and all the things we did in procedural programming and um and selection programming or or the if statement that we did previously what if we had many names though what if we were you know for example building a grade book or a phone book um we might have you know a name John here I I did this very quickly I apologize for the visual in another part of memory and then maybe maybe Frank here that took up five characters and then maybe another one you know um I don't know Sally Sally's five characters we could use that one where we're taking up more memory but we want to do the same kind of thing right what if we wanted to go and just print out the name in all these memory locations well certainly we could go through and say first name one and first name two and first name three but as you might imagine if we did that in code we'd have to write a print statement for first name name one and then print first name two and then print first name three that gets very very repetitive as you might imagine leads to errors because we might make typos makes very long code when it doesn't necessarily have to be that way so we're going to introduce this idea of what's called a code block um oh I'm sorry so we might want to do things um on these things where we take you know each one of those as an input and do something on it and have an output um but what we could do instead is we can put these things in I'm going to I'm going to use the term dictionary here but we can put in dictionaries or lists in Python which are basically better versions of what we call arrays and what these things are are just um it's it's a it's you can think of it like a variable but it it also knows a little bit about hey I've got like five names and I've got ways to store these things and I've got ways to access these things all in one nice package and by the way I'm going to give you a lot lot of functionality that makes your life easier in terms of of of working with these things and that becomes important when we think back to memory again um going back to this slide um in older programming languages let's say we knew we had four students Trev Frank Sally and and J right well what if we wanted to add a fifth student it turns out that's really really hard to do in older programming languages because what happens when you build a program language or a program is it's it's what's called compiled it basically takes our our user code our our source code that we've been playing with and it turns it into what's known as machine code or some version of that depending onage I won't get too far into that those weeks uh that that's definitely a topic for an advanced course if we if we gave gave the program um room for four names though that's all it would ever get you can do you can go grab more memory but it's really really hard to do um because basically when it compos it says okay grab from here to here and that's what we're going to we're going to need for this program turns out you can't really go down here uh it becomes kind of hard to do and actually causes some security problems maybe you know this is our our grade book program maybe I'm a teacher and I wrote this for myself and down here's my bank account right and a different part of memory of the computer and it shows my social security number well I wouldn't want this program to be able to jump down here and grab that many many reasons they did this historically well as thought processes and designs and more importantly computer hardware improved in terms of both speed and size it turns out that we can now write some nice features in Python that can give us more memory as we need it or change things or delete things things like that those are big features that we get in terms of memory management in Python that's kind of for free as a matter of fact in another class we teach here l c we go over how to do the painful lifting here of memory allocation and grabbing more but enough on that um just some justification on why we do that um it's very efficient though and it's very flexible this is much much harder to do in other programming languages uh usually a third year topic as a matter of fact um but at the same time all we're doing same same kind of procedural thing we're doing we're basically taking some uh some some some car recipe and doing the same thing over and over again to something that's in a a memory location and that's the essence of looping and then they're stored in dictionaries and there is that's kind of kind of what's going on here let's see here yep uh me give me just one sec uh excuse me what cough again sorry sorry about that um so one thing that um dictionaries also do is they give us this thing called the key value pair here uh there we go uh the key value pair here um this is a key thing arrays basically just say U let's say we're we're storing ages here uh or let's let's say grades these are really old people um an array would basically just store a bunch of numbers and they have to be the same type as well um the lines don't matter here that's just for illustration purposes but an array in an older language would store 90 and that would be the first grade you wouldn't know whose grade that was by the way it would just be n you'd have to just know that that was Alice same thing with 85 that's just the second array so you would access that by saying grades and then a bracket in like zero or one and you might see that if if you venture on into other programming languages and then so on and so forth um dictionaries on the other hand and you can do this with lists by the way in Python we won't get too much into that today but um it will certainly be in your reading so on how to sort just um a bunch of values in in what's called a list dictionaries on the other hand they can store a label um that you can think of this almost like a variable name within the dictionary so we might have a dictionary called grades but we could say within grades we've got this key of our key value pair the key is Alice and then the value is 90 um so we can say hey I don't know where in here Charlie's grade is where it is here we need to know it's the third one we could say go get Charlie's grade huge benefits and it makes your codee much more readable and frankly a lot easier to comprehend um some really nice things there um let's see what else do I have to say about this um I'm gonna come well no I'll go over this now U for Loops uh sorry four Loops uh versus while Loops I'm jumping jumping I know uh in from dictionaries to Loops but I did want to make one more note on this slide I'll just leave it up and let you read it while I kind of just describe it in in the short sense um Loops basically go over a collection in this case a dictionary or or even a list um and and um and and do things to each well usually each thing in in the loop for Loops definitely do that um if if you kind of know that you're just going to go over everything in a list for Loops are great to use that use for that and they're shorter and simpler and there's a lot of things built into them and we'll demo that in just a second certainly that was done in your um there's another kind of loop though called a while loop that you get a little bit more control over but you have to you have to give it a few hints uh because what it's doing is executing um until something happens that's why it's called a wild Loop um you might even hear them call until Loops but that's rare anymore um but a wild Loop basically says keep doing this thing while something is true and we'll see the differences between those two in here just a second okay um then lastly just on just to before I jum out just to give you a reference um a while loop can basically um combine what we did with our our our our sequencing block um and do a conditional so basically there's something that's going on at the beginning of a while it says while this thing is true go do this thing go do this thing and then when the stop s being true go ahead and leave continue on so that's how you can diagram and think about a while we'll see this in action many many times here um some new termin or some new symbols here the conditional one um we touched on it during the if statement week but this is a decision basically each one of these there will be a condition in here so let's say I'm looking I'm counting to 10 I might say I might have a condition up above that or a um a process up above that sets a variable called a sentinel Val variable to to one to to to one and another one that says um do this until it's 10 so I might say um you know for or while or um I'm sorry make a a variable counter called one and a limit called 10 and then each time goes through here it says if the counter is less than 10 go do this thing and when it's past 10 leave that that's how you could kind of read that and it's a very common structure as a matter of fact we'll get into a version of that in just a sec but this is kind of just coming back to our reference on when to use the wild Lo so with that I am going to get into the the prim part of the sence just go Visual Studio code hopefully the yep there we go that's good and let me just change over here real quick um and go into here and uh so let me just go and close this we're going to come back I'll leave it at open uh just for a sec so the first uh couple and you'll notice there's a few more here because we're kind of introducing a couple tasks I've got the instructions as before you can always remember you can if you want to keep these open you can you can open the preview and you can even put it over on the side like this and then of course you don't need that anymore you can move close that and then we can go into here and we'll do our predictions um so in this first one here um you should should have uh read enough in the in the ey books right now to understand this is the Syntax for a uh I'm just going to use this as an example but we'll come I I do want you to kind of predict what goes on down here um we're naming a dictionary here and that's what these brackets uh mean so the curly brackets mean dictionary these kind of brackets right like this this will break the code temporarily not that this one means a list um they're shorthand but that's the difference uh between the two um the big dictionary or big difference between dictionaries and lists is that dictionaries have a key to them and then a value um so in here we're storing five four grades Alice Bob Charlie's grade and and Alice got a 90 David got a 92 so on forth so forth but they have a label to which is really nice so um in this exercise I want you to go through and kind of um guess what's going to happen kind of read the code see what you can figure out about what might be going on with all of this um pretty simple stuff we've done it before just like this uh let's see here then on C we're going to do something with an an iterator yep um the iterator by the way all it does just so we're in our new s technology it's basically taking um grades and saying give me a a thing I can go through each one of these on and it's it's a way to kind of convert um or get a really nice way to handle um uh dictionaries uh when you want a little bit more control the the point here though is is really that you can use this syntax to um to to get at uh things in a little more controlled environment in a while Lo we'll do that another way just a bit um then we go into some several uh investigate oh I'm sorry the predict the last predict one here is just a little bit about um uh uh figuring out how to get different parts of a list so I did did want to write one piece of a list because you will see this intax and again lists have the the square bracket as opposed to the curly bracket and you'll notice that there's just values in here much like what we were talking about earlier as opposed to those key value pairs um and then in the investigate part we're going to do just a little bit more with lists the same list and uh you'll you'll print this out and there'll be a few questions to answer and you'll see if see if you kind of have a good comprehension of what's going on there and then finally we get in into a little bit of op some operations with dictionaries um I'll go through just a little bit of this because I want to remind you and I I did put a note up here I'll go close this um a note up here that you can you can send them to the uh to the the console down here with control enter so kill that and I found it best uh to kind of do like each like this like what it's doing and then the print statement is one and then um if you I actually have started to like to run this in a uh um a python terminal just like this anymore um so what this is actually how lists will print you get the name and the value although I just want to illustrate that you can certainly do things like uh like this where you can just get the values let's go ahead and Sh under that um uh well actually what you do is you'd go through each one and iterate through those um um so you could do something like this I uh and I think maybe we do this I can't remember I wrote this a couple days ago uh yeah you know I'll just demo it real quick so if we wanted a student grade you can actually do it with this sort of syntax so I'm going to leave the print here but then we can use the uh the brackets here not to be confused with the uh the brackets that we had earlier and you can see our auto complete even gives us the keys that it knows about in there so we could actually just print the value of Charlie's student grade just just like this so let's go do that and we can see that indeed we do get 78 back so that's a way to access them but you can also and we'll do we'll certainly go through where we access the values in these as well just just couple syntax notes and again this is all in the in the text you'll go through all of these uh during the reading if you happen to be doing this video before the reading which I don't recommend I recommend it in the reading first um you'll go through and uh you'll learn that you can nice you can Emma is not in this group uh you can easily add more student grades again this is such a nice feature in Python this is really hard to do in JV and C++ um way way harder than this I mean um the fact that you can just add things to this list um directly is is something that uh that um is is often taken for granted in modern programming but it's such a nice feature um this is how you might update an existing grade right we have Charlie 78 we're going to go through and and print out um and uh and see see that that does indeed change to 80 and then finally you can remove these things you can delete these you could also do this uh like this pretty sure pretty sure this works let's just double check um and I actually like that syntax better yep so um one thing you might not here so Bob did have a grade right we Bob was in here and then I what I did is i i r ran this delete command delete and it's basically saying go find Bob and delete him from our list in student grades and then we see down here that Bob is no longer here now what happens if we run this again this is a kind of a a tricky little thing um and it's something you'll trip I'm going to run this again and you'll see we get a key erir it's called it's not a big time erir it's not actually going to even stop your program most times um but be aware that Bob's not in there anymore and it's letting you know there are ways to handle this we'll get in there that towards the end of the class I think where you can actually if you can expect an error like this you can actually do what's called catching the air and deal with it appropriately um so that's the investigate and then we'll just have a few modify things where we're gonna um see what modify instructions um what did I do here what I was doing excuse me I think what it's [Music] doing I might have to modify this I can't remember what I might have to modify the modified thing I can't quite remember what we were doing here I'll have to go back and look at that I I I I jumped right into this a little quick apologize for that anyway then we'll get into our assignment um this one is a little more challenging intentional I'm going to actually preview this just so we get nicer uh it's it's time to ramp up our game class is is the idea this week so you are going to write a program that basically stores 10 names in the list uh you can use a dictionary if you want then you're going to actually prompt the user using a loop to um collect some input right it's going to do this thing um and it's going to ask you for some a menu option make sure that it's a number right that's what you're going you'll need to do one two or three um so you can B it'll basically um take a list and you'll you'll uh basically be add the ability to um output certain parts of the list um excuse me so that that that'll be what you work through during the week um and again this will be a bit of a challenge start this early get help from me if needed we'll get through it though it'll be a good assignment um and then then we'll turn that in so that's kind of kind of what we'll do for the week um but there's one and I think I did I shove some stuff uh yeah so let me go and preview this I did include this intentionally this lesson plan uh in in your files because I wanted to give you um a nice reference as well for some different just just different things in Python um and I so you'll get quite a bit here there's um just different things to search and things like that none of this is necessarily uh new material but it's just a few notes that I used when I was writing this lecture that I was like you know this turned out to be uh pretty good for that stuff uh as well so just a little on that and then one other thing I wanted to talk about is uh what we talked about in the PowerPoint this uh um this while versus for concept so I'll go back to that for just a sec um basically like I said four Loops um are and while Loops they do very similar things both of them it rate over a collection of items um but in while Loops you could do um uh um I'm sorry that's in the wrong place this is supposed to be in the wild Loop there section sorry that's a terrible copypaste there um that was great apologies for that let's let's just fix that sucker right now wow that's that's going great uh uh you know let's let's do this going to go let's just cut this we'll just make a new there we go that's better okay so four Loops are really good because they they kind of have a built-in end to them where while Loops you kind of have to tell it when to end um is really goodness okay enough of that I I'll come back and fix the slide later um and and we can uh the uh the nice thing about while Loops is you get more control and you can do things like some logic within the loop saying okay continue until something happens right instead of just the end of a list um you can certainly use while Loops to go over the fullest but that's kind of why four Loops were involved there those are make things much easier so let's go over some examples of that to illustrate um let's see uh I'm going to close everything but this close [Music] others yep that's all fine okay and we'll close the lesson time just for clarity and we'll kill all of these as well okay everything's back to normal so this is a for lip right a very simple oh I just realized I did not switch up sorry uh let's go to there sorry about that um all right to the four Loops I'll have to go hopefully I didn't do that for too long on there um this is a list right we talked about this just a little bit ago and I kind of copied those slides here um if we just wanted to go through and print this this is really nice thing so what this is going to do you might notice the animal in animals here animals is the name of the list animal what four will do is it we'll take and assign a variable for each each item in here it's going to create a variable called animal just for that iteration of the loop um I'm going to iterate I'm going to go and run this first let's just go ahead and give it the old shift enter here and we'll see that it does exactly what we would expect right it goes through and it grabs cow and it grabs chicken and it grabs cat and then it grabs dog right we can we can see that quite clearly I'm going to ince is a new tool though for you and one of the main reasons we use integrated development environments or idees it's called a debugger um so what a debugger is is it's a basically a program that sits on top of python and it lets us do some useful things that are handy for programming um one of which is it lets us slow down our code or even pause our code and see what's going on you can imagine if this was a million of these and something broke and it was more complicated than print be really hard to figure out why so what you can do in Visual Studio code is there's this uh this Explorer up here right some of these things you may not have looked at yet and uh these all have really these except maybe extensions week one but we've got this run and debug thing which is kind of curious I'm going to go and hit that it'll bring this up um and uh actually you know what what I'm going to do is UN un undo this break point what this is going to do is run this whole thing there's a lot a few examples in here that we'll come back to you know what I'll just put this put this in new code for just a second that's probably even smer just go file new file and we're just going to call this uh loop loop playr just to have some just somewhere El and I'll just this will be in the demo as well um just just to make our life a little easier instead of running all of this code each time like we run in a file um it's just going to be in its own little in own little file but same thing I'm still going to do this so I'm just going to run into bugget and it's going to do exactly what we would expect just like before that doesn't do a lot for us yet but what we can do is we can put what's called a break point in here you might see on the right on the left side of the screen there this little red dot that that's going well basically wherever I put one of those if I run in debug now I'm going to put one actually right here and I'll show you why in just a sec um if I wrun it down what happens is we get a new set of controls that popped up up here and a new window over here um what happens here is we've got uh continue step into or step over step into and then uh step out uh really and then stop and you can even like uh you can restart it if you want um but really for for our intents and purposes today you can use just really this one step into of f11 or continue um so if you've got a breako you can see that it stopped here it highlighted this code how's that useful well it's gone through and it's created it's created our list and just like we talked about it created this animal variable and we can see that here do you see that where it it actually pulls that out and says right now the variable's name is cow um which gives us an idea what's going on in here you know say it was trying to do something I don't know logical say if it's a c say moo or something and you're trying to figure out why it never said moo well we we'll get into some iterations here where we can you know and I you can you know expand this out if you want to see what's going on or you can even look within there where we get different different aspects of what's going on there including its length um which tells you that maybe I could use this function on this thing called animals and figure out how long it is um all kinds of nice hints there so anyway um right now we're paused but that's what this step into does and and or next if you got multiple break points this one just goes to the next one this one will just keep going over code and you'll see here right so we were Cal right that's the first one if I hit this again here and I'm just going to use f11 for now instead of clicking each time which is Handy you can see now that it updated it ran this again now it's chicken and then it's going to point chicken down here right all it's doing is it's pausing it and then as we go through just like you might expect so nice introduction to a debugger and then it just exit outs and it's done um but really nice feature I'm going to grab a next bit of code though and we'll do the same thing with a while loop um so you might recall that uh we we might want to if we want a little more control in our in our loops and I'm going to Mo move the break point here we can do some things like say use conditionals to do some things so I'm going to introduce another concept here called a sentinel value um what this does is basically says um while this thing is true and you could well I actually wrote the expression here but you could actually just write well I I'll never know that's just shorthand it doesn't matter for what we're talking about right now but basically what I'm doing here is creating a variable this is called a Boolean value it's only ever true or false and um and and in instead of like doing comparisons like with the the double equal sign or the greater sign or less than sign it just says this is true or this is false that that's what's being stored there and you can assign that I could easily and I I'll show an example of this put the actual conditions in here instead but this makes your code a little bit more readable if you do it like this so I'm actually going to do exactly what we just did I am going to put a a break point here and we've got a uh a similar setup where we've got a series of items and I'm going to but here's what we're going to do a little differently and one of the things you often have to do with while Loops we have to know where we're at that's what index is good index is a very common sometimes you'll see that just abbreviated to I like that um but I'm going to use the term index here um saying we're on our zeroeth iteration we we haven't gone through this yet and then the other thing I'm going to do is write a little bit of information about um you know and I'm going to go ahead and I'll put a break point right here as well to illustrate this um we're going to say how many items are even in this thing right well it turns out we can do that by using the length function um that basically says take this dictionary and put it and use this function to tell me how many things are in there that that's its whole purpose so the input is a dictionary or List um the processing is it's going to count those things if we go back to our old black box model and then the output is a number um just just just how many things are in there um and again that gets packaged away for us quite nicely using abstraction and then we just get a nice way to do this with three letters instead of a whole bunch of code and a whole bunch of headaches um and then last we we set our we set our Loop so basically what's going on is um I'm going to set this to true and I'm going to say you keep doing this thing everything in here um oops sorry don't want to do that everything in here keep doing that forever or this becomes false that that's kind of the game here now you might recall from our uh our our our uh our conditionals unit the the if statements that when I indent code like this it's basically saying do this block block it's called a a code block um and we see another one here actually where it says um do uh basically python will keep going while this indent is still here so if I if I for example did this it would kind of freak out because it's like well you got an if statement here that seems to be indented for no reason um when really this is supposed to happen while this is true so this is um essentially a little mini program that happens while this thing is true is how to read that but be very mindful of the indents and things like that you use here um and you'll even see the if statement has its own little sub program we're going to call it or sub routine it says do this part right here when this if statement fires off and and this should not be too foreign to you at this point but it's a nice review of of when we do this same thing with the if statement here that's what's going on here as well okay um so when we we debug this thing we we fire it off here and we'll see here we get our nice variable list again right so our conditional Loop is true pretty straightforward because we said that's true the index is zero we assigned that but here we get this items length and sure enough we can see that it's four right so I'm going to start hitting f11 which again is just our step into like this we're going to go in and it's going to print the thing so it's printing the first one and this is a great example of so items is the name of our dictionary and the index here is zero so we can say items zero print that and uh uh that's what it's doing here we can see that we get the first one um and uh by the way these things start with zero not one um just because of of binary um so if you wanted to actually get pen you'd write items uh Subzero and then how to read this item subscript zero that's that's what this bracket is but it's also the uh it's the the index of the dictionary or of the list then it's doing a simple comparison we're just doing a very simple search algorithm here saying we're going to go through here until we find a pencil that that's kind of the whole point so we'll go through but we notice we go through and it's uh it's it's working go find pencil and then we go in and it said found it and now we're setting our conditional Loop to false so it's going to continue through here it's going to go ahead and iterate this one more time we see that happen there um and then but now it's saying is the continue Loop true well it's not so guess what our program ends and that's the end of it so that's that's how we get a little more control we can do things in here to get out of the loop another way we could do this if we wanted to is instead of doing this whole thing we could actually use this term called Break like this that does the same thing break will basically I'm sorry yeah break will actually break out of whichever control Loop it is in so not the if statement but the the loop um so I'll I'll go ahead let's go and run that as well excuse me so again just going it's going to go now we find pencil goes in there and it hits break and then it's done so basically this does the same thing instead of evaluating this though it's just smart enough to know that it was in a while loop here and it says okay I'm out that's all that that that you need to to do there um sometimes you'll need to use a uh use this uh but it's it's quite rare if you programmed your logic correctly it's kind of most of the time if you're using using break you should think about your algorithm and how your program is flowing and maybe even flowchart it out before you get to that it's just good practice and you'll save yourself a lot of headaches by avoiding breaks and actually um letting the actual logic of the problem dictate when you leave leave these things as opposed to to using braks um so Sentinel values uh like I said um it's funny updated and found the things um you can do this without stin no values we could do the same thing by saying go through you notice in the in the previous version I I had to check down here to make sure that the index that we were not like outside of the the the range here because this keeps going up and the and the length is I guess I didn't really iterate on it let's go ahead and just do this one more time quick um you'll notice here that the index here is one and the items length is four all built up here and when that stops basically when we we say the index is when the index gets bigger than the items length then we're going to do the same thing we did here in our case we never got to here because we found pencil but if this was like not pencil uh let's go ahead and and uh continue here um it would just keep going forever it's called an infinite Loop this is actually hung up right now because it will never ever end uh um uh if we didn't have this in here um because it's only looking for this continuing Loop to get set to false well guess what that never happens because we never we never change this in in this case so U just just something to look out for there anyway um let's let's go grab that other bit of code to illustrate one last concept and then I'll close the video up uh we could absolutely do this here though because this this is again an expression right it's making this comparison let's go ahead and let's go ah and set this here like so and we'll go through and debug it and kind of see what's going on here so we do the same thing we have our items we got an item length just like before and we got an index so the difference here though and you'll notice this is much shorter um uh we can go through here and we're going to compare and see see if our item uh in the current index is uh is is uh is set to um um pencil and we know it's not because it's a pen right now so we keep going and then what what's going on here is this is a I'll write it I'll write it in a new window here uh just oh I can't well what what's going on here this is shorthand this is another way to write [Music] index equal index + one and I know there's a Code there because I'm in the middle of execution but uh this is a handy thing so basically what it does is uh take our our variable right and it says okay grab the value of variable in this case it's zero add one to it so this expression becomes two right so we have we have again this is this is our current ver uh value value and it's saying um it's zero and we can even see that as I hover over it and then if if I actually do this you you can see it you it basically say now evaluate this thing um index plus one so 0 + one and assign that back to index so this is a way we can update that memory location with a new value based on its current current um current uh value um turns out though that this is such a common thing you can do the same thing here so that was equivalent to saying index plus equals you can also do like minus equals even multiply equals you can do some several things but this is shorthand for saying take this and add one to it and then reassign it back to this the reason we do that here is you'll see here the index went to one there and we're going to say um is is index less than the items length here no because one is certainly less than four so this is still true so we still go in here that's going to grab the next one because again we're using that index variable to reference our list now it's grab to notebook um and then we keep going and then as you might expect it's going to get to here and items index here then is going to be pencil this is actually going to pass so we're going to go in there and just going to print found it just like before and now we use our break because we don't have a great way to get back out of here uh without creating more variables this is a great use of break where you're like okay I this this this while loop has served its purpose now is the time to leave so let's bail out on that and our program mes so that's uh some Theory uh and abstraction levels and things like that about loops and a lot of things like that back to PowerPoint here um and just a lot of uh a lot of the whole purpose of this um the uh and Loops are just great tools you know uh programs uh you might wonder when you're looking at like Windows or played a video game well how's why does this keep running in my programing the trick to that is actually they run a loop forever or not forever but basically until you tell it to exit much like we just did with the Sentinel value they say hey when I chose exit game Let's exit the whole program and that's just a big old Loop that keeps running Forever Until you tell it not to um just a programming trick there um it's a Cornerstone of modern Computing it's used to M to process you know continuing programs like we just talked about huge amounts of data you can iterate over variables but not only variables data data rows and things like that um you can have multi-dimensions of these things that will start start to study down the road all kinds of crazy things here it's really our first jump into the world of bigger Computing where we take procedures and we use those procedures many many many many times um and uh do do similar operations one of the one of the cornerstones of computing and why they they are the tool they are today um you know uh everything we do is built on this concept of of of abstracting um a procedure into a a kind of a known pattern and then and then doing operations on it very very quickly a core building block I'm really excited for this unit this is kind of the the the aha moment of the class or one of them anyway uh where we really start to uh go from thinking in things of a you know a line by line Manner and we start to distill this um we're going to spend a lot of time discussing this week please use office hours contact me and and things like that as we get our program going this week um it's really a crucial step in the development in computational thinking okay sorry about the longer video this week um it's a core part of the class though and I really wanted to spend a lot of time lecturing on it on top of it there's going to be a decent amount of reading this week um on top of this uh make sure you get your discussion posted once you kind of understand this maybe one other thing you're going to be ready for your final uh you're about there already here in week four everything else we do is going to be building on this concept uh of this and actually making your life a little easier frankly but uh anyway thank you thank you for sticking with me through this lecture and uh let me know how you're doing this week with this thank you