welcome to this optional sync session um supporting the finals in three of uh the LC computer science classes um two of them are the same design uh of uh concerning poker hand simulation um the the difference there obviously is the languages C++ and python U but the class uh definitions and in logic will uh be uh almost identical um you know given the limitations of of of of course the language language uh language is there and then in 1010 which I don't see anybody from 10 10 in here yet unfortunately let me take another look um we have a different thing alog together where we're kind of coding out the the flow of the end of a basketball game um and uh and uh and running that as a simulation and seeing uh which of two strategies between a two-point shot and a three-point shot might be the uh the best best one to do well since we've got mainly our poker poker programmers in in the room tonight would you guys like to just kind of jump right into that then sure yeah sure great sounds good to me yeah I can thank you yep how are you doing uh I'm doing well sorry away for a moment when you said hello I was muted oh that's okay no no problem at all some people don't don't like to speak up too I just like you know you never know um so uh this is being recorded uh looks like we got somebody trying to come in yeah there we go good evening Michael how are you doing well how are you good good um this uh I've started the recording for the meeting um and I was just kind of in reintroducing the uh the finals for for the different class as I'm in uh we're going to use this sync session time for all of them um a little different than office hours it's a little Guided by me but it's mainly a Q&A session um the the main difference is what I'd really like to have happen is much like if we had a classroom setting um where we we we could talk about different structures and things like that we just don't have that in an asynchronous format um so I'll probably do this every week up until the final including the week of the 10th there um even though that's the we can to hopefully you're well well on your way by then but uh you know um hopefully we can design some of the structures and and flows and things like that here as a class um so it's not just me giving you you know this the program structure I want this to be you know kind of something you guys collaborate on um so I'm going to try to be passive as much as as I can but still facilitate it if that makes sense um and uh and and hopefully we can uh make some progress in that in that in that way I'm going to try to find just quickly the notes I took last week um I should have them hanging around here uh somewhere useful um but in the meantime um would you guys like to kind of revisit the class structure we just start like want do you want to talk about I was thinking maybe about starting with a a little bit about class design in general um particularly in um in the python class in 203 or 2409 we've only just introduced those last week um and they they might be a little bit foreign to a few folks yet um but they're kind of a big piece of this of this Pro program um I I I I did prepare a little there um uh I prepared a chess program or a light a light skeleton of one anyway that I can demonstrate some of the ins and outs of object-oriented programming as it applies to maybe you know uh game programming and then also uh I wrote I I actually stripped out um a lot of the code of my solution for the poker Final in Python and I I'd like to maybe demonstrate a few things there um but I don't want I don't want to just kind of take over your time with this um how do you guys feel um yeah I don't know I don't know how to pull work so I'm just starting to open up a a rough draft for this really um early thoughts is just are we going to like create a class for a card and then assign attributes to those classes yep yep y we kind of went over that last week let me find that I've got it I emailed it to myself last week and I don't think I ever got the stinking thing posted let me just go back a week and find there it is poker notes so let me I'll just make a little text document share that and uh I'll kind of show you where we ended last week but yeah that's kind of the way we went last week um I don't have a great whiteboard here at home but uh let's start with that I'll share share this W this little window here and if it's too small let me know um I have a jundo monitor monitor here at home um so I try to resize the window to make it like fit better can you guys read that okay anybody you're not you're not sharing your screen yet we just see your face oh what happened there I thought I shared it uh how about that is that better much better that works for me okay cool so um hold on Lost teams here teams is a weird thing to do there it is okay I like to see his talking when I can um so uh um uh I guess I'll go Michael Brit here oh we lost Tomy that's too bad hope she can make it back um anyway uh we we did we we kind of went through uh three classes actually Michael uh Michael B um last week and you can kind of see what we came here and I just kind of you know asked you know how might we represent a car and as you might imagine uh we kind of came up with this idea that we might have a face and we liked maybe the idea that it was a numeric representation um and perhaps we use something akin to a dictionary or maybe um you know an enum or you know enum n uh type of structure in C++ uh to you know basically hand off that back to labels but you know um that that's one thing we we kind of talked about there and then we we also of course came up with the idea that maybe we have a suit which is just obviously a series of four strings um that a card would have right um and then a con the Constructor um and I'll come back to this in just a sec uh you know either could be blank and then you could either use accessors and mutators to assign each one as you create them or you could just create a Constructor right there uh to to to accept you know mainly the two things right away um one thing that's uh um the idea of a Constructor might be a little foreign to those of you in Python we kind of hit it really fast last week um in C++ they get uh uh the luxury of doing what's called overloading Constructors where you can build different you can build the same function the same kind of Constructor in in C++ but it takes different amounts of um arguments so you might have one that's blank and you just might make say hey if if they don't give me any information I'm going to call it the Ace of Spades or something like that right you tell it that and then you might have one that says um you know I maybe it only takes Spa the the suit for some reason so it accepts the suit and you always said it Ace in whatever suit they give you I don't know why You' do that but it'd be something you could do and then of course the last one the one we're probably going to want to use is one that takes both the suit and the face right so we can create it with the shorthand of just you know the uh the Constructor syntax of you know de new deck or or I'm sorry new new card or uh card in Python right um but we don't get that in Python there is a way to do it though um and if you'd like I can jump into that later uh if you guys would like um let's see yeah then we kind of got into the meat and potatoes of what the backbone of this program will look like uh the first is a deck right um and that's a collection um The Collection could be you know probably a vector or a list likely um of of card objects um and that's one thing that's probably the the key going to be the key backbone of this whole thing is that we're we're going to have both a hand a collection of five cards or a deck a collection of 52 cards and um we'll be basically be moving cards back and forth between these two things um I saw one early implementation a student would really uh worked out worked uh out quite quickly um the the whole final did really good work some really neat stuff that he did there um but one thing he did was he randomly assigned uh the you know a deck and a suit for in his um his draw mechanism from the deck or well he didn't even make a um he did he actually did this all without objector programming um but as you might imagine using just random uh to to to do some of these draws especially over the scale of a simulation like this a large mini mini runs of this he duplicated some card draws so there's there were hands where he might have you know two two cards both of the two of hearts for example which is of course what we don't want one nice thing about object-oriented programming is we can basically go through in Our Deck um our deck mechanism and and you know basically iterate through the the four suits and the 13 faces to to make sure there's only one of each in there and then we can use some of our list and Vector mechanisms respectively of the two languages to only pull the one card out and then it's not there anymore that that Randomness is already H uh you don't want to use Randomness like that because you can you can do what's called sampling with replacement which is not what we want in this case we want to sample without replacement when we Shuffle because we want to remove the card from the deck right um so um from there we uh kind of talked about Shuffle and draw um Shuffle would basically randomize the order of the cards of the deck but again there would be one Unique Card of each um permutation of face and suit and then finally we have draw the act of removing one card from the deck to a hand um and that the key there the key word there is removing removing that card and moving it to a hand because again we don't want to draw the same card twice if we don't remove it we could we could potentially do that we'd have a one in 52 chance every time of of of of ending up with a card two of the same card every draw um I'm not going to do the stats on that quickly but we we want that to be zero for obvious reasons um and then a hand is kind of a different kind of deck if it's still a collection of five cards but they're not they're not uh they're not the full set obviously and they are randomly drawn from the deck um um that uh that are obained via the draw de draw method from the deck um and then we talked about maybe that hand we'd want to have a label for it um this label would be the thing that would contain the value of the hand you know Full House uh two pair royal flush on the rare occasion of those things um and then the idea of how that gets built that hand label that happens in a Val a Val hand is the word we came up with the method we came up with so you draw a hand and then you would evaluate the hand and then the label would get set and then you could pull that label out and run your statistics and then quickly off screen I ran an example of the the solution um just to show you what you'll kind of end up with I think this was oh would have yeah looks like it'd be about 100,000 runs and over 100,000 runs I got 15 four of a kind and 157 full houses ET etc etc and we were kind of matching these up to the um Wikipedia page that I provided a few weeks back to see how close we did so um that's kind of what we did last week Michael was just kind of do go through that went through um uh what what what poker hands are um you know the ins and outs of the final both finals including the basketball one uh as well and then we we ended on on kind of a discussion like that so that should get you roughly caught up but I did record that it's it's down there at the bottom of of of of your uh of your um canvas modules under the final information I I think I called it that would have been a week ago so it would have been uh 42 sync session or April 2nd snc session probably something like that um but it that's it's just a YouTube video so you can it's just like what we're doing tonight just a week ago sure okay yeah I see it now I didn't see that before yeah that's okay um yeah and I'll post this one too so um anyway anyway that that's kind of what I had there um hopefully that gets you caught up and and Tomy had You' seen that I had not seen that no or Tommy is it Tommy or Tommy I'm sorry Tommy Tommy thank you I I I did that to another student class it was what much worse though I called her by just the straight wrong name for about three weeks and then her classmate corrected me I felt terrible I'm kind of an idiot when it comes to things like that so feel free uh to to uh correct me there okay um well what would you guys like to talk about next um what's the is there an easy way to like shuffle a like a vector in C++ I thought there was but there's there are there's a couple ways you can do it um you can actually uh do you remember oh goodness it was probably the Sorting unit you remember that the Sorting unit there's a random sorting unit uh but that was for sorting something it is yeah there's one that's very similar for uh shuffling um essentially um or we can use random number generators uh to essentially uh pop different um Vector elements you know the at syntax uh we we we can basically uh grab each one of those uh without replacement as well but um that that'd be something that we can Implement uh you know in the near future for sure but yeah um does that kind of make sense yeah I was focus on something yeah essentially what you do is you basically we could we could just use any random number generator from it start at one to one to the length of the end of think like when when you said that like we could Loop through or do a um some kind of loop through all of the elements and then randomly select a value somewhere in the structure out of the 52 values uh not not not the 52 uh the remaining yeah well of the well there's 52 like slots right so so I'm saying for each we we could for like each um Uh Oh you mean like we don't oh yeah we don't want to Resort something into the same slot I mean we could it would still be random but yeah the the way I think that let me uh I'll just make a new let me make a new the way I kind of think have that going in my mind I haven't written that part yet in C++ but um you know basically we would um and I'm I'm writing pseudo code of course but right um some like that this is looks a lot like python obviously but um I just don't want to do brackets right now frankly um so you're right we would go over uh one for 52 but then we would basically say um uh um how would we do that so we'd have two decks we'd have you know original deck and new deck right and then for each one of those we're gonna have a we're going to do a random random num in the range of zero or I'm sorry one and then the length of new deck or original deck right so we basically what we do is for 52 times uh we're going to go through there um or and actually we could do this by doing 52 minus I as well if we wanted to right we could do this as well by doing 52 minus I um either one of these so because this will go down each time by you know if I is one uh or Well we'd have to play with the indexes but um so it might be it might be actually zero here um or something to that end um but when I is zero we'd get the um 50 we create a random number between 1 and 52 and then one one and 51 so on and so forth and then um we'd say something like new deck um append um old deck at something like and then it'd be uh the random number right that'd be one way to shuffle it wouldn't it yeah that would that would make sense yeah that's kind of what I was thinking about thinking there might also be like something in the standard library for shuffling yeah sure there is was deated or something maybe there's something new I don't know yeah I wrote it by hand when I wrote it in Python but um I can try to get that done by next week though get some of these utility functions ready uh for you but yeah that that's kind of what I would think about there something to that end good question though another another thing I was thinking of is writing some utility function just to like quickly visualize the deck like yep for example I when I wrote I wrote some code to like build a deck a couple days ago um and I just kind of checked like I just kind of check certain values in the uh the vector to make sure it was what I expected uh but that's not a very great way to see the overall state of the deck so I guess um so we're storing the uh this the suits as strings and then the uh the actual numbers I for I forget what that's called as integers so I was thinking I could just make a very quick like Loop through it and print out like a two character like two characters for every card so like the two of Hearts would just be two H yeah you don't really need to though I mean I I see where you're going with that but I mean you're you're writing a class why not make it look nice you know um why not have a print card function well I I well we can print out that's for printing out a specific card but I like I mean like uh if I want to see all the cards at once in the order sure yeah but you know compress it a little bit because I don't I don't have you know Infinite Space on my screen so I if I just want to see a quick overview uh like let's say I sorted and I want to make sure I sorted it in or not sorted I made it random and I want to make sure it's in random order uh there should probably be some kind of function to to actually do that right yeah what about like this though right or well oh oh yeah oh yeah so okay so have a function for printing a specific card and we just run that in a loop for the entire yep yep and then yep so and then you could have the same two down here right where um in the deck but instead of of printing you know you know something like that right is that kind we yeah something like that so yeah and then and then I I would argue that those same functions or very similar ones would be very very handy in your hand class as well yeah pretty much yeah and and you bring up a great Point um something that I was gonna maybe add on at the end um maybe print isn't even the best way to do it um Let me let me prep a little code here for you off screen here while we're talking um I built several of these I just want to make sure that I don't inadvertently record the solution to the final I've only done that on two videos so far but I hate record re-recording videos and this one was live so let me make sure I don't do that but the point being is um what I did I'll just show you a few outputs of files I've got several files that my Pro my program creates every single time it's run um so this one's called hand test and it literally um deletes and then recreates a file called hand hand test every time I run the program so as I'm working on it I run this and I don't print anything out to the console I just create a file here that I keep opening another editor and I just watch it um so you know same thing with like the order of hand test so when I was working on you know um making sure that the the hand was printing okay I wasn't getting duplicates and things like that um I wrote I wrote a little routine that says hey Loop through these five cards and tell me what's in there um and you know sometimes it blow up wouldn't even run sometimes it would run okay and I'd get the same card five times things like that and then finally I got to where it's doing this kind of thing and uh you know I can um run this really quickly again let me just uh bring up Maine and uh run this real quick one sec and uh just like that now now hand test looks like exactly the same because I didn't close the file I couldn't overwrite it there you go it's running a whole bunch times there we go now in hand test I should have different things and I don't I don't know why oh I know why because I'm not running it from this right thing which brings me to another point there we go now hand test should have different things yep and it so like the second time I ran my unit test I got this right and I'm just making sure they're random and things like that and I've got similar ones so I've got one that's a hand order test um that's basic I I think I actually wrote it incorrectly it actually prints it out twice but basically I was trying to make sure that the order of the cards uh was in the right order because as you know for flushes we need these things to be in a certain order don't they um so we need to be able to order these things so I wrote that kind of unit test um and these things go to files and then um I the deck test of course um is much what like what you might expect um where I start out and I um and it actually is doing this after it it draws the five cards so there's 51 in cards in my deck with zero index being the first one and then at the end I see that there's 46 left which is exactly what I would expect after I've taken five out right and I see and then what I do then is I make sure that the the one the five that are out are in my hand and from the hand test file right do you see how that kind of comes together yeah yep I guess you could just make sure that none of them in the hand are in the deck yeah but the point is these are all files instead of printing so I'm not trying to like scroll through a bunch of stuff um a bunch of stuff uh guess that could be easier for some people people I I I think I could just do it with Printing and have like a make it like inter interactive like press this letter to display your hand press this letter it display the deck that's how I would do it but maybe yeah no nothing wrong with that UMES yeah I I think files might be a little faster because you can just run the code and it you know get like you know six different outputs you know into different files things like that yep um and then the last one I wrote this might be useful for you guys um is is is this thing I wrote this in what basically when I was starting to build my hand evaluation thing um I I started you know saying okay what do I need to know well a flush okay well a flush is pretty easy that's just making sure everything's the same suit right so I count the unique suits in the in the hand and seeing um if uh if you know how many cards uh there so flush count it doesn't mean there's one one flush there what it means is there's only uh there the the last card I looked at uh the running total of the flush was just one so it's not a flush I would need that that need to be five um and then straight count is very similar saying hey are these cards you know do I have five cards in order well it's three so the answer is no um and then I start to do evaluations based on that logic and you know of course the kind and pair and all that and just writing all of those out so I have that and I have my hand test here hanging out right next to it which again looks like this and I can start to say was there a flush in here was there you know so we can see that and you can even see where I break out faces and like the six you know counting them uh things like that and seeing if there's a flush in here um just break you know kind of tearing these things out into Diagnostics that I would then need to put back together um and having that all in the file file was quite nice um but um uh and it certainly helped me along when I was developing these things so that's one one thing you can do and I'll show you the code uh for that how that got built and actually um this is probably something that uh um might be a good way to kind of develop these things in general um let let's me let me let me make it just a new file real quick here in here uh and let me share um let me share my vs code now oh I heard somebody coming in let me get them there we go and oh I shared the whole screen sorry I didn't mean to do that let me re share uh share window there we go and I want this one and I want to make this smaller so you guys can actually read it and we'll just get rid of that window for now is that readable right now could be a little bigger on my screen but I can read it like that then is that better uh yeah now it looks great yeah it just re it's just using the resolution of whatever window I have here so um one thing I'd recommend is actually write this is going to sound weird and backwards but writing your tests um so this is in my um in this file I can't show you this file because this is actually the file that I bring into my main program that has the classes the full class implementations we studied this in modules you might recall but basically I import this Sim support so I do like from SIM support uh import the two functions uh or uh the I'm sorry the two classes uh deck and or three three sorry deck and and um it actually turns out that you only need deck in hand because you never call card directly and card is contained in the other two um but basically I just kind of write these things in a main program so you might recall that if I put this syntax in like here um I could run this I could run this file directly and I get a different main program than the one I end up using using for my simulation cuz you you'll see there's nothing in here about things like um you know looping over things you know a thousand times I'm only testing individual things where I'm you know basically uh um uh doing some things and then I I built some uh like Shuffle handbuilt that means I hand I hand entered like a royal flush or uh a straight or things like that to test these things to make sure they they they evaluate properly um outside of my main program I never actually use handbuilt here from my deck um um and I and I do similar things uh in there I never actually do that in my main program but it's very handy for debugging right so um basically I just make a new hand and a new deck here and then I'm drawing five cards and and I could print these of course to Michael's point I could print those but what I'm doing around here uh where' It Go yeah so here I'm just creating all of these you know just with simple files and I just uh print the thing out and and then I run the function that I want to test in this case hand out ordering and then I print a line at the end and then I close it um now um the the trick here that I did was I basically took this CIS uh call here where's the opening one um you there's another one somewhere and I may not copied it um that basically grabs the console and writes it to the file if you wanted to I think that's what I was doing here I can't quite remember exactly what I was doing there but um I could I could oh yeah that's that's it so this as CIS this redirects it from a file um or from this so the standard output is your console normally I'm just saying hey for the uh duration of this little block your system's output is not the console it's this file so anything that would have gone to the console and that's why Print Works and things like that these actually just are print statements in here um that normally would go to the console but instead they go to these different these different files um and I said that up ah ahead of time right I kind of you know build build a little unit test case of what I'm trying to run and that way as I'm developing it I can just run over and over again um so anyway um let's uh let me see if there's any questions or things like that uh sorry I'm having a trouble keeping an eye on chat here as well don't see anything um what do you guys think of that what was the last statement there the uh the system standard out for it it said system standard out equals and then you had something yeah it was I'll put I'll put it in chat that basically is saying with an S there it's CIS standard it's basically saying uh go back to the default oh oh okay yeah that otherwise it'll keep writing to the last file I hope forever not not forever once the program exit it would actually be okay but um yeah NE okay yeah uh so that's one thing I did um yeah and that's very handy for that evaluation of the hand operation um once you get into that that's probably going to be where you spend a lot of your time once you get everything else working Brian bowy did that make any sense to you guys in the on the python Side Y yep yeah okay well I'm happy to help set that up of course and I I can share that part of the code um but the idea the main idea is you give yourself a test bed whatever you're working on um so you can keep track of several things at once but printing Out Printing is just fine Michael Michael B um I I don't have any problem with that at all I just got sick of trying to parse through you know a whole bunch of lines you know once you once you get like okay is the deck working and is the hand working and is the order and you all of that I just wanted to compartmentalize it so I'm not looking for that one print statement or like you said writing a menu system um certainly certainly uh you know valuable and all that but um you know I wasn't really interested in wrapping a menu system around all of this I just wanted it to be quick and dirty okay well we can talk about design a little bit more if you guys wanted to um you guys want to talk about maybe populating the uh the the hand and the um the hand in the deck um bowy and I kind of went through that earlier it sounds like you know everybody in this in this room maybe is kind of beyond that point where you you know do the the randomness and you you you know in Python you know you you pop in a pin and things like that with the lists um you know I kind of want this to be your time I don't want to just you know lecture through the final that's not the intent really tell you the only thing that I'm uh still working on in my head is Pairs and two pairs and three of a kind four of a kind of I mean obviously you can set it and it'll remove elements that are duplicated and boom there you know you have at least a pair somewhere um but I've been trying to think of nice ergonomic clean looking way to evaluate Pairs and threes and fours of a Kind a short manner without you know it's not a trivial operation is it not at all um I'm going to hold on write a little more pseudo I'm trying to organize things here so um give me one sec we can talk about that for sure that's a great question so you might have got a little bit of a hint how I approached it Michael there um in in the way I counted things right did you see that maybe I don't think I did so basically what I did um in I built two functions um and uh and and I think this was a pretty good way to handle it um because there's um there's two things you need to do uh a lot of um the first is um counting cards right you need to count a lot of cards in in the hand um uh and uh let's see where did I do that yeah so basically um you know I went through every card in the five cards I had and um I uh let's see what did I do here it's been a little bit since I wrote this um what yeah so for uh the uh pairs um what I did there is uh what did I do here oh that was okay it was a little that was an interesting little um uh list comprehension I did um so what I did there is basically I ran a sum over the um the values of the um so I ran some and then uh over over the whole thing and what you'll get there is for each one you'll get a count um and there's a number of ways you could do that but um um I I uh so um what did I do here okay so I looked through each of the of the um the face values and counted through how many there were simply and made a dictionary of them okay right so and and so that got me like you know there's like you know two twos and three three fours things like that um and then once I had that I had this hand faces dictionary um and I I ran a sum over that to see um uh basically um I I ran a sum over that to say how many had two nice okay so if there's one if there was if there if there was uh if there was uh let me let me write a little pseudo code so basically you know uh we we we write a uh let's call it hand faces right um and then we we say uh um is that'll be a dictionary or a vector in C++ right something like this going to use the the python notation just because it's a little fresher in my brain and lot less code but basically uh for uh for uh and I think I have a uh I think I've got a a little list of the the faces hanging out somewhere I think is what I did uh so something like this in faces right um I think I go through and say some or um uh [Music] um yeah is I can't remember the off the D of my head but this something like this right okay so that that's GNA that what that's going to look like is basically it's gon to uh let's just use the one above so it's going to go through and say okay Ace is going to be zero and then it's going to Loop through and it's going to see a a dece it's going to be one and then we're going to see a I don't have any more than that was a pretty crappy hand to use there but basically you can see what gets built here is this it was this yep and then um and then what you can do is you can run the sum function on that and there's a derivative of of a a list comprehension that you can do to actually say how many of these are two and how many of these are three how many of these are four or five I guess if you sure obviously that's not possible um and then it becomes just in order so um and that's really the trick for the Full House right um I look for a three and a two yeah so that that's kind of how that ended up working and it worked out quite elegantly that took me a while though I had to I had to look up uh you know a lot of different uh uh uh ways that you can use um use uh uh lists in this case to uh kind of or I'm sorry the dictionaries they dictionaries because they have a values um so you you you're going to have you know the key and the value um and and finding out how many of those are and you can print those things out as you get it but um maybe I'll I'll write a little bit about that as well or we can look that in in future weeks but um that's kind of how how I did that um and then from there the other part of it um in the evaluation of the hand was simply the count of flushes and Straits um and that's a lot easier right you're just either saying hey I'm going to start and grab this the the the face of the first card and if the next card is not that it's false you know and if you go through all five and it's still still not false it's true same thing with a straight they just have different rules you know what what one is of course making sure that the same suit and the other one is that they're an Inc CU you need to order them than to do it straight right yeah yep so that's kind of it it's kind of it yeah the straight one that that was the first one I worked on and sort is a magical awesome thing yeah yeah yeah but it it's h it's interesting as well so yeah cool thank you yeah yeah no problem no problem yeah and then a royal flesh of course uh is the easy one really is it is is it is it is it a flush and is it a straight and does it contain these exact cards [Laughter] faces so any other questions kind of coming up on an hour well no I guess we got a little time sorry my timer on my um I started the meeting a little early apparently but we've got about 15 minutes yet left yet if you got guys want to take it so yeah that dictionary counting seems like a a great trick yeah it took me a little bit um and that's uh it it is but you know what I did is basically I made I made um essentially two dictionaries hand faces I called them hand faces and hand suits just empty empty dictionaries and then looped through um looped through the cards and just did different kinds of counting uh at the you know at the same time so I I'll give you a little code today um th this is kind of a handy bit I'll just write it put I'll just copy and paste it down here th this is a very handy uh bit of code and this is with the invention for my solution but basically um if you don't have so you have this this this is a this is a dictionary um um and this is a a bit of code that this is a very handy bit of code in Python in general for basically counting junk um so you you you start off with something like this I can get the IND indentions right you can do something like this where it's hand faces equals just an empty uh an an empty no it's a dictionary yep yep it's a dictionary so what you do then so there's nothing in here right so what it does is it check checks to see if something's in there um you could you could go through and force them all to be zero of course but you don't really need to do that for this operation and what you'd get is this would have 13 elements in it with a bunch of zeros which you don't really want um it turns out it it complicates your code to do that um if if you're counting uniques and things like that uh because then you don't have to check for zero but instead what you do is you first see if it's in there and if it if it's not in there with a very simple englishy bit of code you initialize it at one so this is when you're going through each one and then if it is in there you just increment it right so it's pretty elegant right how how that's handled um then you'll get a number of the faces and the and the the the the faces and the um and you can do a similar thing for um for suits as well and you'll end up with things like this I just and that you're calling a you're calling a class called Hand cards yeah uh no hand cards is just a dictionary oh oh no sorry sorry sorry you said Hand cards uh Hand cards are um probably passed into this function okay no they're a member The Hand cards I'm sorry The Hand cards are a member of the class I inan which happens to be the hand gotcha okay so yeah what that is is a list of cards okay that makes sense yeah that's a list of cards within the within the hand so there's there's five of them right there's five of them right that's how that's done yeah sorry I didn't didn't explain that yeah um yeah and that's why it that's why it has self here Michael right that's is a dictionary is that just like a python term for like a map yeah it is okay I wasn't sure I wasn't sure like what exactly you're referring to yeah what they look like is is basically um you can construct them like this where you'd have something like oops uh like so like in our in our chat right now you know we we have you know we have let's say we have you know so they're key value pairs is what they really are so you know if we if we had a students one we might have a you know like a a boui and it would have a value of one because there's one of you and if we had Michaels how many you are there and there there's two of you two so on and so forth right so you what you have is and you can access either um or neither or either or both where you have a key and a value and in Python you can look up look it up by the key um and get the value so on and so forth um so that's what's getting built there it's probably going to be a little um so what are we what are you what are you using the U dictionary for are using it for like like if you're storing like the values of the cards as integers are you like Translating that to like actual strings like King Ace so on like yeah I actually didn't use integers at all I just used the straight up strings as their keys okay yeah th this is actually a rep you know this part was a printed out but this is actually the the the two string uh function of that of that dictionary it just prints like that it's it that's how they print in Python if you just print the list or the dictionary I mean but you can you can access each one of these and you could say how many of these are one and two and three and four and five you can just look at the values as well I don't know offand the structure it it might be um it very well um wait I thought there was a key value pair uh structure in C++ too isn't it just uh the map you can import map or something I mean I mean include map and then you can make a actual structure called a map I've not used it you're probably right yeah you're I'll use that in my code let me take a look um I'll just let me just have a quick look um as I told you today um C++ is not something I've written a lot in um you're probably right and the fact that it in the standard Library uh oh yeah this is this is it yeah yeah yep I'm just looking at it quick yeah I'm just seeing is there an insert I'm assuming it's Dynamic too right so you can just keep adding things to it um looks like it wants to be having a lower bound and an upper bound sure makes sense for something like that yeah insert there's an insert here's the uh here's the reference I was looking at I'll put it in chat here um yeah I'll try to flush that out because I'd like to have better answers for you there obviously we didn't cover that outside of maybe like week two um when we talked about the standard library and haven't Revisited it since wonder if there's anything in those eye books on that that would be handy yeah it's a really handy structure those ones I love key value pairs I've used them my entire career in different capacities yeah there's a in chapter 14 in containers 14.4 there's a map structure definition so there's plenty of examples there y so here I'll copy that for you too since I have it here and a quick question for the python class is there a zybooks assigned for this week uh for classes yeah I think it's chapter 15 off the top of my head all right because it's not in the module it's not did I do that again yeah I saw you create the D and but I did not see the deal date oh goodness sorry guys that was last week though wasn't it well last week had a a had the date problem this week there just isn't a zybook assignment in the module at all all right I know I created it in the zybook sorry sorry sorry uh guided oh no that's the ion classes yeah you're right dang it thanks Ryan all right you're welcome uh here let me I think I've even got it going already yeah there we go I wait no it's there no that was last week the objectoriented programming one the object oriented program one is there game programming oh no no I'm sorry I'm sorry no there isn't one no okay it's only in the it's only sorry I'm losing my mind I got up really early this morning trying to get a few things done uh here no let me show you um let me uh share share again where teams go now sh share share I like your dog [Laughter] F hi puppy uh anyway back to what I was doing sorry eo's puppy puppy distracted me it does not take no stop it tra uh uh share window then the game programing unit and this is in 249 right this is yeah this is the modification one um so the entire reading is in in here Ryan um so it's mainly kind of misspelled documentation there and this newbie guide um and but again you don't have to go through all of this it's just some stuff I found the whole point of this unit isn't to learn how to Rite a game from scratch it's to expose you guys to that scope of project and how to use modules like pame in particular to start to build these things and then for those of us in 1010 to say to kind of understand that really games aren't much more than loops and assignments and things like that they're just with bigger bigger tools than what we've been playing with uh that's all so that was kind of the point so no this is a completely custom unit and you'll have a couple more of these uh down the road um actually we might not I think I'm running out of room uh in the course but I might make some um optional uh modules like there's one for computer vision I'm writing right now um that I just got going this morning that I might I might just you know kind of turn into a unit uh on its own uh that that I'll just give you guys with not no assignment on um but the main thing is to um watch this and go through some of these games and then play with some of these reets um all right and for you guys clarification yeah no problem and then for you guys uh it's simply to like change gravity or change the button or change you know the how how much damage the bullet does or something like that in one of these games right just to go in there and play with the code a little bit it's supposed to be kind of a fun unit I I wanted some of these um some of these uh survey units uh you know some of the to introduce you to the you know what python can do now that we've covered some of the basics of programming towards the end of the unit is we started to prep for the final so I wasn't like introducing things like two days before your finals due or something that you needed for the final so um all of these are are supposed to be a little bit more fun all right y sorry yeah sorry I was like I've missed so many of the stupid zybook things as I as I've poured it over from the old format that uh I was sure I was like yeah for sure I did that but I I kind of even forget what week we're in sometimes because I was writing completely different stuff than what you guys are studying right now it's it's it's a very interesting thing teaching asynchronously you have to teach it before anybody else is doing it and then once you guys are in it I'm like not even thinking about that anymore it's it's not like I go to a classroom and lecture on it so I'm on the same Pages you so my disorientation I apologize for but that that's why it happens absolutely yeah it's it's a challenge for sure so let's see let's see what else we got going on oh goodness uh let's see people where's the people think so uh looks like we lost Tomy from the C++ stuff but we picked up a eure um which is always nice uh eure we didn't talk too much about the um the uh 1010 final tonight um mainly because we had 2409 and in the 2030 folks uh but I think they're well on their way now so hopefully next week we can spit a a little bit more time with 10 10 folks um especially if you if you could be here the whole time um if not I'll start providing you know op lectures on the side uh or maybe you and I can do some stuff in office hours this week or next week or something like that and we'll record that that's perfectly fine with me as well um you know I don't want to give away the whole final but I also don't want you to just just just straight up struggle I'd really love to get some of the basketball players involved with the uh the the final and maybe we could talk to like hey what happens if you do this and what and we can you know flowchart that out I think that'd be a lot of fun but uh yeah we didn't get too far so there's probably not too much for you in this particular video um but it might be worth your time to go back and watch the one from last week if you haven't yet yep but let yeah I guarantee I'll see you again on campus so you and I can kind of talk about that and formulate a strategy there okay all right great well guys um it's been about an hour now um and I I don't want to just keep droning on but uh you know uh certainly uh you know get get to work on this stuff figure out what you run into that you that you're struggling with and maybe we could start looking at your code and uh maybe next week uh but and that goes for you and everybody in 1010 watching this later as well um uh you know get get into the final start programming it start finding your questions and let's do this this work together over the next couple weeks um the work should get lighter and lighter um that's by intention I think you both have a week onewe unit next week except in 2030 and I think I get you guys right into a two- week unit and then that's it in 2030 so you're going you have a two-e unit on I want to say recursion perhaps and then we're rolling right into the final so I'm trying to give you plenty of time um if if if we get to the point where you guys are all like really good on your final I'm happy to to go into some other topics in all of your classes I've got other things prepared um but I I just ran out of room in a 16we schedule for him so um happy to do that too uh if if we get there but i' I'd rather eror on the side of too much time on the final here than not enough time so that's my little two cents on on the philosophy the rest of the class here okay awesome well you guys have any question now speak now or not forever hold your peace but hold your peace till office hours tomorrow anyway all right good night everybody thank you very much thanks for coming thanks for coming guys swies I love him love it love it love it all right good night guys sing all right bye