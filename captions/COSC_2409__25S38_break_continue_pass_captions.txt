iteration in Python um has some really well thought out patterns that are very cryptic if you don't study them explicitly um we've seen a few of these already but um there there's a a control statement in Python called break and there's another one called pass associated with it um although pass doesn't do anything um that will basically not basically it's exactly what it does it leaves the for Loop or while loop um and remember this is only for Loops break only works for Loops um although the code in front of you kind of doesn't look like that we'll talk about that in a sec um it will leave the loop when when it's occur when it happens um it's almost always used within an if statement within a loop so you might recall within our if uh introduction uh recently we uh we we wrote a if statement within another if statement Well you certainly can do that in a uh in a loop as well so here we have an example of this uh in this case we're trying to basically leave the loop when we run into the word window we might not ever run into the word window we don't know what's in here ahead of time and I'll demo that in a sec um so when we run this it will basically go through W inwords just like we've talked about for load cat go through here it will evaluate this and say is is the word window and if it is it will print and say found the word and talk about the word a little bit and then it'll break break and what break does here uh and I want to be very explicit about this um is break will leave the most the innermost four or while loop that it that is contained within so if we had a nested Loop here if we had more than one four it would only leave this one it doesn't leave if there was another one outside of this if we were doing like a double you know a two-dimensional um collection or something to that end it would only leave the innermost one you need to break again to get out of both of them um so but it can be super useful so let's go and run this and we'll see that we only get uh one word out or it basically prints the found the word window right um and what what happened here is it went through cat it basically said is this true it was not true so it passed over it and then it execute it it ran into the end of the uh if statement went back to the four statement and tested that and said okay give me a new one then uh gives us W the second one uh because again these are iterations um and it grabs window and of course then it says it found it and then we encounter this word break and says I'm done so it never went to dog that's the key point it never went to dog it broke out early that's what break does um and it's a very handy thing to do that um it turns out that you can also so let's just demo that if it uh if if if we're looking for Windows still but the window wasn't either let's make um I don't know let's make bird and let's make uh let's make um bird cat dog Turtle I don't know I'm not very good at doing these on the Fly I hope you have some fun at my expense um so we're going to reassign that let's just go ahead and fire that off real quick oops that's not what I wanted uh let's fire that off so now we have a new collection that does not have a window in it and we'll see here that we don't get any output basically right we never say say found the word um which is by so it never broke it this never this was never true so it never encounted break it basically iterated over each one we could print this out to to to basically ensure that we are indeed seeing these words right we're iterating over this let's go ahead and do that so we see that it's doing this but we never see this print statement this is found the word in here so never went into the thing and it never broke early um hopefully that's clear the other kind of cool thing about four Loops in Python is that they can have else statements um so an L statement in this syntax so we could we can actually do this yeah we could let's and AI knew what I was trying to do there it's kind of amazing how I can do that these days um but what happens here is basically if break is never occur never occurs then it will fire off the else statement it's basically like a cleanup um we'll see a similar pattern when we start study exceptions much later in the course where basically it's saying do this stuff and if if the the special thing in here never happens do this thing so I'm going to go ahead and get rid of the print statement here that we added just for just to be explicit here like so and we'll see here that with when I run this um it actually goes here so basically it went through all of these just like we talked about never found the break and then said it it basically defaulted to this no window found so else almost always goes with break when you're talking about loops um it's not very much like the if statement else it's a different con uh construct but not many people even know that you can write else statements with with loops um at all so that just hopefully that that resonates that that example resonates with you and just to just to kind of put a bow on it let's go ahead and type window here right just like we had before and we'll see that we do not ever see this text when we do that because it breaks so it found the word window that's our output right it's doing this it's hitting break and it's not going here pretty cool pretty cool control structure um an example that they gave um a couple examples was a prime number generator um so basically what's going on here is we've got a nested Loop what we were talking about earlier uh it's basically looking between two and 10 here right you the range from 2 to 10 uh by one we could also write that like this right could certainly do that to iterate our last video um and uh and then it's it's uh basically looking to see if another number in there uh if the modulus is zero so basically it's saying um from here till 10 from 2 to 10 um and then from where we're at until or from two until the number we're at if those if the the modulus if there's no remainder then we found a prime number right because if if say say this was uh if if this was I don't know uh like three and six um there would be a modul is zero and uh basically it would break um so uh let's uh it's it's uh testing X here each time um and I think I missed just a bit uh I think I need oh no yeah that's being controlled by the outside um so running this we'll see that it's looping through each one uh on the outer one that's that's where the print statement's coming from um and it's saying it if it finds if it finds something where the the dividing uh in that range equals zero um then it's not a prime number and it breaks because it it basically right I mean you're either a prime number or not so when we find one where it can be divided by something else it's not a prime number so we want to use break here otherwise we use the else statement to say it is a prime number here's another example of uh using a simpler uh single for Loop um that uh that basically says it's something prime or not or even or odd right iterating again from 2 to 10 and saying is if if it's divisible by two or if I divide by two and the result is zero then it's an even number um then we we continue um so continue basically uh is a slightly different version of the thing um it stops IT B continue basically stop stops but it keeps going so uh I'm sorry it stops but keeps going it stops in the current iteration it breaks out of the current iteration but the iteration continues that's the difference between break and continue so in this case we want to keep going because we want to list go through them all um uh otherwise it will print uh so this if statement basically saying um you know if if we found an even number the logic we just explained um go ahead and stop stop on this iteration we don't want to do anything else because we know this is the even number and print it which is within our if statement but continue on in the loop that's the difference between break and continue otherwise it will print it we could have write this with an elf statement L statement as well but this this is a way to illustrate so let's say this was three this will F fail and it will come down here and print it and it would continue anyway that's Behavior we want but we want to be able to handle this special case and and exit early uh if if if we have an even number and that's when you want to use that is like I still want to keep going but I do want to exit early still um so that that's how break and continue work um one other last keyw in this thing and it's it's almost silly is this word pass pass is the opposite of break um basically uh pass doesn't do anything by itself but you cannot write something like this you can't write while true like we'll get an error when we do this right um so you can write an infinite Loop this way you have to have something here so I could do something like print high and or not like that but print high I can do this and I hope you'll know by now that uh well first of all this is kind of a special case right while true what do you mean well true is an expression in its own right this will always be true and it will never end this is an infinite Loop isn't it this is how games are often written this is continuing by the way you can kind of see that there so I need to send a keyboard interrupt contrl X here to get out of that right um but that that's pretty high uh but what I can also do instead is write pass so if I didn't want to actually do anything here for some reason I can write pass which basically just gives it its control block part um I cannot I can't put nothing here there has to be something here after a control block statement um and pass is good for that so it doesn't do anything but it does uh satisfy the requirement that you need to need to have something here it's handy for multiple if statements and switch statements and things like that if you need need such a thing um just one other thing I wanted to add there so hopefully that makes sense um all right one last thing uh one last thing a special kind of if statement and then we're done with control statements for now well these kind of control statements